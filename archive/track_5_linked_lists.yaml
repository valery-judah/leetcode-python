version: 1
track: track_5_linked_lists
title: Linked Lists — Invariants, Rewiring, and Structural Tricks
description: Master pointer invariants, fast–slow techniques, in‑place rewiring, segment reversals, and list‑specific sorting.
problems:
  # Basics and fast–slow
  - slug: reverse-linked-list
    title: Reverse Linked List
    difficulty: easy
    primary_pattern: iterative-reversal
    section: basics
    why: >
      Core rewiring loop with prev/curr. Builds invariant: "prev is reversed, curr is frontier". Foundation for many transforms.
  - slug: middle-of-the-linked-list
    title: Middle of the Linked List
    difficulty: easy
    primary_pattern: slow-fast
    section: fast-slow
    why: >
      Fast moves 2×, slow moves 1×. Teaches cycle of reasoning for mid split used by palindrome/reorder/sort.

  # Cycles and two-list alignment
  - slug: linked-list-cycle
    title: Linked List Cycle
    difficulty: easy
    primary_pattern: floyd-cycle-detection
    section: cycles
    why: >
      Tortoise–hare proves existence in O(1) space. Establishes fast–slow template for next tasks.
  - slug: intersection-of-two-linked-lists
    title: Intersection of Two Linked Lists
    difficulty: easy
    primary_pattern: two-list-pointer-switch
    section: two-lists
    why: >
      Pointer switching aligns path lengths without extra memory. Elegant invariant with guaranteed meeting or null.

  # Merge and palindrome
  - slug: merge-two-sorted-lists
    title: Merge Two Sorted Lists
    difficulty: easy
    primary_pattern: sentinel-merge
    section: merge
    why: >
      Dummy head + tail pointer. Trains stable merge and loop exits; used by sort-list and reorder variants.
  - slug: palindrome-linked-list
    title: Palindrome Linked List
    difficulty: easy
    primary_pattern: split-reverse-compare
    section: fast-slow
    why: >
      Split at mid with fast–slow, reverse second half, compare, optionally restore. Integrates multiple invariants.

  # Segment reverse and rearrangement
  - slug: reverse-linked-list-ii
    title: Reverse Linked List II
    difficulty: medium
    primary_pattern: reverse-sublist
    section: segments
    why: >
      Reverse subsegment [m,n] via head‑insert technique. Sharpens pointer bookkeeping and sentinels.
  - slug: reorder-list
    title: Reorder List
    difficulty: medium
    primary_pattern: split-reverse-zip
    section: segments
    why: >
      Split list, reverse second half, then zip. Exercises three phased transforms with O(1) extra space.

  # Arithmetic and sorting
  - slug: add-two-numbers
    title: Add Two Numbers
    difficulty: medium
    primary_pattern: carry-scan
    section: arithmetic
    why: >
      Per‑node addition with carry and tail creation. Trains clean node allocation and termination conditions.
  - slug: sort-list
    title: Sort List
    difficulty: medium
    primary_pattern: merge-sort-linked
    section: sorting
    why: >
      Split by mid and merge sort in O(n log n), O(1) extra space. Prefer bottom‑up iterative to avoid recursion depth.

  # Advanced segmenting
  - slug: reverse-nodes-in-k-group
    title: Reverse Nodes in k-Group
    difficulty: hard
    primary_pattern: reverse-k-chunks
    section: advanced
    why: >
      Reverse fixed‑size blocks with group checks and in‑place reconnect. Demands precise boundary control.

  # Pointers + auxiliary structures
  - slug: copy-list-with-random-pointer
    title: Copy List with Random Pointer
    difficulty: medium
    primary_pattern: hashmap-or-weave
    section: design
    why: >
      Two solutions: hashmap old→new or O(1) extra space weaving. Tests structural insight and cleanup.

notes:
  ordering: Basics → fast–slow/cycle → two‑list align → merge/palindrome → segments → arithmetic/sort → k‑group → design.
  next_track: track_6_trees_basics

extensions:
  optional:
    - slug: swap-nodes-in-pairs
      title: Swap Nodes in Pairs
      difficulty: medium
      primary_pattern: pairwise-swap
      section: segments
      why: >
        Dummy head + local triple‑pointer swap. Fast practice for pointer choreography.
    - slug: remove-nth-node-from-end-of-list
      title: Remove Nth Node From End of List
      difficulty: medium
      primary_pattern: two-pointers-gap-k
      section: two-lists
      why: >
        Gap‑k deletion with sentinel. Covered in track_2 core; include here for spaced repetition if desired.
    - slug: remove-linked-list-elements
      title: Remove Linked List Elements
      difficulty: easy
      primary_pattern: sentinel-filter
      section: basics
      why: >
        Filter by value using dummy head. Reinforces unlinking vs skipping and final head return.
    - slug: odd-even-linked-list
      title: Odd Even Linked List
      difficulty: medium
      primary_pattern: two-list-stitch
      section: segments
      why: >
        Build odd and even chains in one pass then stitch. Good pointer hygiene exercise.
    - slug: rotate-list
      title: Rotate List
      difficulty: medium
      primary_pattern: length-mod-k + split
      section: segments
      why: >
        Compute length, mod by k, split and reconnect. Tests ring thinking and off‑by‑one.
    - slug: partition-list
      title: Partition List
      difficulty: medium
      primary_pattern: two-lists-stitch
      section: segments
      why: >
        Build <x and ≥x chains then stitch. Clear invariants and stable partitioning.
    - slug: flatten-a-multilevel-doubly-linked-list
      title: Flatten a Multilevel Doubly Linked List
      difficulty: medium
      primary_pattern: dll-stack-flatten
      section: design
      why: >
        Use stack to preserve next pointers while descending child lists. Tests DLL pointer correctness.
    - slug: design-linked-list
      title: Design Linked List
      difficulty: medium
      primary_pattern: data-structure-design
      section: design
      why: >
        Implement singly/doubly list with sentinel nodes. Solidifies edge cases for add/delete at head/tail.
    - slug: lru-cache
      title: LRU Cache
      difficulty: medium
      primary_pattern: hashmap+dll
      section: design
      why: >
        Doubly‑linked list + hashmap for O(1) ops. Real‑world integration of list invariants with indexing.

omitted:
  from_neetcode_250:
    - id: 24
      slug: swap-nodes-in-pairs
      reason: >
        Moved to extensions to keep core tighter; covered by k‑group and reverse‑sublist patterns.
    - id: 19
      slug: remove-nth-node-from-end-of-list
      reason: >
        Core in track_2. Avoid duplication in core; listed here as optional for spaced repetition.
    - id: 23
      slug: merge-k-sorted-lists
      reason: >
        Heaps/selection focus. Covered in track_3 heaps; omit from LL core to minimize concept switching.
    - id: 82
      slug: remove-duplicates-from-sorted-list-ii
      reason: >
        Use after mastering sentinel patterns; similar to 83 with extra edge cases. Keep for later drills.
    - id: 83
      slug: remove-duplicates-from-sorted-list
      reason: >
        Straightforward once sentinel patterns are learned. Omitted from core to maintain challenge density.
    - id: 725
      slug: split-linked-list-in-parts
      reason: >
        Arithmetic partitioning of sizes. Good practice but less central than current core.
    - id: 430
      slug: flatten-a-multilevel-doubly-linked-list
      reason: >
        Listed as extension due to DLL specifics and iterative stack handling.
  from_leetcode_150:
    - id: 61
      slug: rotate-list
      reason: >
        Listed as extension; keeps core focused on foundational transforms before ring operations.
    - id: 86
      slug: partition-list
      reason: >
        Included as extension to consolidate two‑list stitching.
    - id: 138
      slug: copy-list-with-random-pointer
      reason: >
        Included in core here because it is a high‑signal structural problem testing two standard solutions.
    - id: 148
      slug: sort-list
      reason: >
        Included in core; canonical list‑specific sort.
    - id: 2
      slug: add-two-numbers
      reason: >
        Included in core for arithmetic scan on lists.
