{
  "category": "",
  "id": "1753",
  "name": "Maximum Score From Removing Stones",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/maximum-score-from-removing-stones/",
  "slug": "maximum-score-from-removing-stones",
  "isPaidOnly": false,
  "tags": [
    "Math",
    "Greedy",
    "Heap (Priority Queue)"
  ],
  "similar_questions": [
    {
      "title": "Minimum Amount of Time to Fill Cups",
      "difficulty": "Easy",
      "slug": "minimum-amount-of-time-to-fill-cups"
    }
  ],
  "questionId": "1879",
  "questionFrontendId": "1753",
  "title": "Maximum Score From Removing Stones",
  "titleSlug": "maximum-score-from-removing-stones",
  "content": "<p>You are playing a solitaire game with <strong>three piles</strong> of stones of sizes <code>a</code>​​​​​​, <code>b</code>,​​​​​​ and <code>c</code>​​​​​​ respectively. Each turn you choose two <strong>different non-empty </strong>piles, take one stone from each, and add <code>1</code> point to your score. The game stops when there are <strong>fewer than two non-empty</strong> piles (meaning there are no more available moves).</p>\n\n<p>Given three integers <code>a</code>​​​​​, <code>b</code>,​​​​​ and <code>c</code>​​​​​, return <em>the</em> <strong><em>maximum</em> </strong><em><strong>score</strong> you can get.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 2, b = 4, c = 6\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 4, b = 4, c = 6\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 1, b = 8, c = 8\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a, b, c &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
  "likes": 978,
  "dislikes": 58,
  "stats": {
    "totalAccepted": "50.1K",
    "totalSubmission": "73.6K",
    "totalAcceptedRaw": 50124,
    "totalSubmissionRaw": 73568,
    "acRate": "68.1%"
  },
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    },
    {
      "name": "Heap (Priority Queue)",
      "slug": "heap-priority-queue"
    }
  ],
  "metaData": {
    "name": "maximumScore",
    "params": [
      {
        "name": "a",
        "type": "integer"
      },
      {
        "type": "integer",
        "name": "b"
      },
      {
        "type": "integer",
        "name": "c"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "XirenZhou",
      "year": 2021,
      "content": "Let\\'s denote the maximum score by ` f(a, b, c)` for our convenience. Note that the order of a, b, c does not affect the result, so let\\'s **assume a<=b<=c hereinafter**. Also, denote the three stone piles by capital characters A, B, and C.\\n\\nCan you explicitly write out the formula `f(a, b, c)` in terms of a, b and c? Absolutely. The following content will lead you to it step by step with very detailed derivation.\\n\\nIt\\'s very easy to draw a conclusion under some simple condition. For example, if a=0, `f(a, b, c) = f(b, c) = min(b, c) = b`.\\n\\nFrom now on, let\\'s talk about the condition where 0<a<=b<=c.\\n1. if `c >= a+b`, then` f(a, b, c) = a+b`\\nIt can be easily found that `f(a, b, c) <= a+b`. Because, if you stare your eyes at pile A and B, during each operation, there are at least one stone extracted from AUB since you can\\'t take two stones both from C. So we can do at most `a+b` operations in total. Also, given that `c >= a+b`, this upper bound is achievable by taking one stone from AUB and the other from C per operation until we exhaust AUB. Therefore, ` f(a, b, c) = a+b`. Note that this formula also absorbs the case when `a=0`.\\n\\n2. if `c < a+b`, then `f(a, b, c) = (a+b+c)//2`\\nIt is noteworthy that under whatever circumstance, `(a+b+c)//2` is an upper bound of `f`, because we take 2 stones each time, and we have `a+b+c` in total. This upper bound is not always achievable depending on the distribution of stones among three piles. We will now show that this upper bound can be strictly met under the assumption that `c < a+b`.\\nApparently `f(a, b, c) >= c` since we are able to exhaust C. Then we are left with `a+b-c` stones within AUB; the maximum operations we could do with this amount of stones is `(a+b-c)//2`. This amount `(a+b-c)//2` is achievable *iff* all `a+b-c` stones are evenly distributed among A and B. i.e., if `a+b-c` is even, A and B must have same amount of stones left, which is `(a+b-c)/2`; if `a+b-c` is odd, A should have exactly one more/less stone than B. And we show this requirement is feasible: during the procedure when we are emptying C, we take the other stone from A or B depending on whichever has more stones left. At the time C gets empty, it is easy to show that the numbers of stones left inside A and B have difference <1 because `c>a` and `c>b`. Therefore, `f(a, b, c) = c + (a+b-c)//2 = (a+b+c)//2`",
      "voteCount": 20
    },
    {
      "name": "localhost8000",
      "year": 2023,
      "content": "This should be an easy problem.",
      "voteCount": 4
    },
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "not to be that guy, but this was easy ",
      "voteCount": 3
    },
    {
      "name": "Sungjin_wooM",
      "year": 2025,
      "content": "Easy question if u are practicing it for Priority queue",
      "voteCount": 3
    },
    {
      "name": "anishsingh0904",
      "year": 2024,
      "content": "Similar problem, try out\\nhttps://codeforces.com/contest/1973/problem/A\\nThe constraints aren\\'t tight but you should try to come up with a mathematical approach rather than a iterative approach for the cf and this lc question.\\nInterviewers grind you to get the most optimal approach from you.\\nShowing them such mathematical moves make them lean towards your selection.\\nThough this problem people are saying easy for iterative, try for being mathematical.\\nThank you",
      "voteCount": 3
    },
    {
      "name": "Koteiko",
      "year": 2025,
      "content": "Alice, Bob, where are you? Should I play alone?",
      "voteCount": 2
    },
    {
      "name": "amincodecl",
      "year": 2024,
      "content": "it is crazy how  return (a + b + c) / 2 ; passed 59 testcases\\n ",
      "voteCount": 2
    },
    {
      "name": "Elbu",
      "year": 2021,
      "content": "The goal is just to keep taking from the largest and second largest pile with each step.\\n\\nIf the largest pile has more than the other two combined, you can empty the other two piles, and take an equal amount from the largest, but the largest will still have some left over. Return the sum of the smaller two piles.\\n\\nElse, Keep taking from the two larger piles. Eventually this will bring the medium pile down to the size of the small pile. Then, with each step, take one from the pile that was originally largest and take one from whichever of the other two is larger. Do this until the pile that was originally largest is depleted.\\n\\nThe two remaining piles will now either be equal, or differ by 1. Empty the smaller one and take an equal amount from the larger. Either that depletes all stones or you are left with one remainder. Return the sum of all stones, divided by two.\\n\\nNo need to iterate through the taking of stones. Just return either of the two values.",
      "voteCount": 1
    },
    {
      "name": "minhdg241",
      "year": 2025,
      "content": "so easy",
      "voteCount": 0
    },
    {
      "name": "y0Ntsc3MCW",
      "year": 2025,
      "content": "Literally 4 if-else statements ...",
      "voteCount": 0
    }
  ]
}
