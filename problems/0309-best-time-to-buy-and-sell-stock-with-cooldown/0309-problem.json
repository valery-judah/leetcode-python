{
  "category": "",
  "id": "309",
  "name": "Best Time to Buy and Sell Stock with Cooldown",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/",
  "slug": "best-time-to-buy-and-sell-stock-with-cooldown",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Dynamic Programming"
  ],
  "similar_questions": [
    {
      "title": "Best Time to Buy and Sell Stock",
      "difficulty": "Easy",
      "slug": "best-time-to-buy-and-sell-stock"
    },
    {
      "title": "Best Time to Buy and Sell Stock II",
      "difficulty": "Medium",
      "slug": "best-time-to-buy-and-sell-stock-ii"
    }
  ],
  "questionId": "309",
  "questionFrontendId": "309",
  "title": "Best Time to Buy and Sell Stock with Cooldown",
  "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
  "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:</p>\n\n<ul>\n\t<li>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</li>\n</ul>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,2,3,0,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> transactions = [buy, sell, cooldown, buy, sell]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n",
  "likes": 9858,
  "dislikes": 345,
  "stats": {
    "totalAccepted": "686.9K",
    "totalSubmission": "1.1M",
    "totalAcceptedRaw": 686929,
    "totalSubmissionRaw": 1126205,
    "acRate": "61.0%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "metaData": {
    "name": "maxProfit",
    "params": [
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "sasukesharma",
      "year": 2022,
      "content": "not a promoter but one of the best explaination u can get\\nlearn and grow\\nhttps://www.youtube.com/watch?v=IGIe46xw3YY&t=803s",
      "voteCount": 112
    },
    {
      "name": "qiushile",
      "year": 2022,
      "content": "How can I buy a stock with price zero??\\nWho would sold with zero? totally unreasonable set",
      "voteCount": 68
    },
    {
      "name": "Hardspyne",
      "year": 2024,
      "content": "That feeling when you did it yourself, and it doesn\\'t matter that it only beat 5 percent",
      "voteCount": 52
    },
    {
      "name": "pansari",
      "year": 2023,
      "content": "This should be a hard problem ",
      "voteCount": 49
    },
    {
      "name": "amanchandna",
      "year": 2022,
      "content": "Good testcase : [4,3,2,10,11,0,11]",
      "voteCount": 45
    },
    {
      "name": "ziaee",
      "year": 2019,
      "content": "I think this graph will be helpful:\\n![image](https://assets.leetcode.com/users/ziaee/image_1562177674.png)\\n",
      "voteCount": 34
    },
    {
      "name": "IngridMorstrad",
      "year": 2021,
      "content": "The way to solve stock problems is to consider \"state\".\\n\\nWhat states are possible? Usually, you can either be holding a stock, or not.\\nIn this case, there is another state as well - cooldown.\\n\\nCombining this with the number of days (another component of the state), this gives us a 2D DP array\\n\\ndp[i][j]\\n\\nwhere i = the day\\nand j = (0 = holding a stock, 1 = cooling down, 2 = not holding a stock & ready to buy).\\n\\nSince j takes only 3 values, this can be reduced to O(1) storage (3 variables).",
      "voteCount": 31
    },
    {
      "name": "shreyas88",
      "year": 2017,
      "content": "\\nSharing my thinking and generalization of the problem for the dp approach. Hope it helps\\n\\n* States at day  i `{S1, S2, S3}`. For this problem think of states are used to denote \"hold one share so we are eligible to sell\" , \"Just sold one share, need to rest(cooldown)\" , \"Cooldown period done, eligible to buy\"\\n\\n* DP constructs the optimal solution by traversing edges between these states(more on this below)  Instead of thinking it as a conventional state machine with transitions between edges I found the below abstraction more useful. Basically we can think of the problem as nodes(think states) of a graph and a map function(think edges or actions) which takes us from `day i from day i+1`. DP constructs a path in the forward path discarding the paths which are sub-optimal. \\n\\nFor instance in the below diagram an example path for arriving at `S1 at day 3 could be E22 -> E21`\\nSimplified diagram for 2 states below to help visualize.\\n![0_1509595138261_dp.jpg](/assets/uploads/files/1509595138409-dp-resized.jpg) \\n\\n\\n* Edges can be thought of having weights here. Here weights are the profit/loss number associated with each action. We progressively accumulate profits as we traverse a path  tracking the cumulative profit per state in a DP variable.\\n\\n > The DP algorithm at each `step i` can be thought of as a choice  for every possible `State Sm` : choose an edge  from the set of all edges that takes us from state `Sk at day i-1 -> Sm at day i` such that the cumulative weight(accumulated from the beginning) is maximized. \\n\\n* It can be proven by contradiction that we indeed get an optimal solution ie max profit accumulated for each state using this algorithm at the end.  \\n>Proof: Suppose we didn't achieve the optimal solution using the DP method. It implies that at some point we took a different edge than DP solution when we arrived at some `state Sm` at `day i`( if no such edge exist then we already have the optimal solution). But we know from our DP process that the edge we chose has the maximum accumulated profit for state `Sm at day i`. Now we can simply take the same series of steps that the optimal solution traversed for `days > i` and achieve higher profit than the optimal solution. This completes the proof since DP solution is optimal.",
      "voteCount": 15
    },
    {
      "name": "viraj071",
      "year": 2018,
      "content": "I am having a tough time coming up with a brute force solution to this problem along with its complexity.\\nAny suggestions will be appreciated.",
      "voteCount": 11
    },
    {
      "name": "qqqaaasss",
      "year": 2023,
      "content": "Based on the problem description, cooldown can only happen after the sell. Isn't it? And it's not clarified that if there can be two or more continuous days of cooldown after a sell.",
      "voteCount": 10
    }
  ]
}
