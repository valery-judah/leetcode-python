{
  "category": "",
  "id": "203",
  "name": "Remove Linked List Elements",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/remove-linked-list-elements/",
  "slug": "remove-linked-list-elements",
  "isPaidOnly": false,
  "tags": [
    "Linked List",
    "Recursion"
  ],
  "similar_questions": [
    {
      "title": "Remove Element",
      "difficulty": "Easy",
      "slug": "remove-element"
    },
    {
      "title": "Delete Node in a Linked List",
      "difficulty": "Medium",
      "slug": "delete-node-in-a-linked-list"
    },
    {
      "title": "Delete the Middle Node of a Linked List",
      "difficulty": "Medium",
      "slug": "delete-the-middle-node-of-a-linked-list"
    },
    {
      "title": "Delete Nodes From Linked List Present in Array",
      "difficulty": "Medium",
      "slug": "delete-nodes-from-linked-list-present-in-array"
    },
    {
      "title": "Convert Doubly Linked List to Array I",
      "difficulty": "Easy",
      "slug": "convert-doubly-linked-list-to-array-i"
    },
    {
      "title": "Convert Doubly Linked List to Array II",
      "difficulty": "Medium",
      "slug": "convert-doubly-linked-list-to-array-ii"
    }
  ],
  "questionId": "203",
  "questionFrontendId": "203",
  "title": "Remove Linked List Elements",
  "titleSlug": "remove-linked-list-elements",
  "content": "<p>Given the <code>head</code> of a linked list and an integer <code>val</code>, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return <em>the new head</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,6,3,4,5,6], val = 6\n<strong>Output:</strong> [1,2,3,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [], val = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [7,7,7,7], val = 7\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 50</code></li>\n\t<li><code>0 &lt;= val &lt;= 50</code></li>\n</ul>\n",
  "likes": 8805,
  "dislikes": 277,
  "stats": {
    "totalAccepted": "1.4M",
    "totalSubmission": "2.7M",
    "totalAcceptedRaw": 1438714,
    "totalSubmissionRaw": 2733330,
    "acRate": "52.6%"
  },
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "metaData": {
    "name": "removeElements",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "val",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    }
  },
  "discussion_posts": [
    {
      "name": "Vanam8659",
      "year": 2022,
      "content": "just add dummy node at front and solve with loop as usual",
      "voteCount": 42
    },
    {
      "name": "LeetCode",
      "year": 2021,
      "content": "This problem is the Daily LeetCoding Challenge for November, Day 12.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **\ud83d\udccc Do you want to learn the problem thoroughly?**\n  Read [**\u2b50  LeetCode Official Solution\u2b50**](https://leetcode.com/problems/remove-linked-list-elements/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Sentinel Node\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
      "voteCount": 37
    },
    {
      "name": "acretu81",
      "year": 2023,
      "content": "I have a question regarding the c++ approach, if you do not free the memory for each deleted node your program still passes, and the running time is much faster than when you have another variable that you use to free each deleted node. Should we care about the running time or the correctness of the approach, i would say the second. I know that c++ does not have a garbage collector, so normally not freeing the memory should create leaks. Thanks",
      "voteCount": 31
    },
    {
      "name": "wagzap",
      "year": 2023,
      "content": "\ud83c\udf81Since we must remove nodes from a __singly__ linked list, we need the node before the one to remove.\n\u26a1Here's a recipe for success:\n1. Go through the list once, from head to end, with a previous and a current pointer\n1. If the current node's value ISN'T the one to remove, just advance both pointers\n1. Otherwise, detach the previous node from the current one, and link it to the next one.\n\u2757 Also detach the node from the list (its Next shouldn't point to the following node in the list anymore)\n1. If you're removing the current head, set it to the node after it.\n\nEasy as pie \ud83e\udd67",
      "voteCount": 16
    },
    {
      "name": "Almazino",
      "year": 2023,
      "content": "I need to update head and return head? I can not understand how I need to return my answer",
      "voteCount": 9
    },
    {
      "name": "L4t3xs",
      "year": 2025,
      "content": "I was somehow unable to do this problem a couple days ago even after spending quite some time on it. Today I started from a clean slate and completed it in a minute. Funny how brain works.",
      "voteCount": 6
    },
    {
      "name": "Kira361",
      "year": 2024,
      "content": "Basic Approach of singly linked list : \\n\\n1 : check the head value if it matches then move head to head.next;\\n2: now create two pointer current and previous. \\n3:; check until cur. is not null .\\nif( curr.val ==val )\\n{\\n  then linked previous to current pointer (just skip the matched node from link)\\n pre.next = cur.next ;\\n}\\nelse{\\n       if values didn\\'t matched then make pre same as curr;\\n}\\n  move cur to cur.next  and come outside from while\\nand return head.\\n\\nplease ignore the bad indentation..",
      "voteCount": 6
    },
    {
      "name": "aditrisingh",
      "year": 2023,
      "content": "see question 83",
      "voteCount": 6
    },
    {
      "name": "bumate90",
      "year": 2023,
      "content": "What a stupid exercise, you just need to unlink them, if you unlink + delete and set them to nullptr\\nthe address sanitizer will complain.",
      "voteCount": 3
    },
    {
      "name": "Tharunadhit",
      "year": 2022,
      "content": "Why is it showing last element 6 too?\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def removeElements(self, head, val):\\n        n = ListNode()\\n        temp = n\\n        \\n        while(head):\\n            if(head.val != val):\\n                temp.next = head\\n                temp = temp.next\\n            head = head.next\\n\\n        return n.next\\n       ",
      "voteCount": 3
    }
  ]
}
