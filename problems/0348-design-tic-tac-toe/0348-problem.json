{
  "category": "",
  "id": "348",
  "name": "Design Tic-Tac-Toe",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/design-tic-tac-toe/",
  "slug": "design-tic-tac-toe",
  "isPaidOnly": true,
  "tags": [
    "Array",
    "Hash Table",
    "Design",
    "Matrix",
    "Simulation"
  ],
  "similar_questions": [
    {
      "title": "Valid Tic-Tac-Toe State",
      "difficulty": "Medium",
      "slug": "valid-tic-tac-toe-state"
    }
  ],
  "questionId": "348",
  "questionFrontendId": "348",
  "title": "Design Tic-Tac-Toe",
  "titleSlug": "design-tic-tac-toe",
  "content": "<p>Assume the following rules are for the tic-tac-toe game on an <code>n x n</code> board between two players:</p>\n\n<ol>\n\t<li>A move is guaranteed to be valid and is placed on an empty block.</li>\n\t<li>Once a winning condition is reached, no more moves are allowed.</li>\n\t<li>A player who succeeds in placing <code>n</code> of their marks in a horizontal, vertical, or diagonal row wins the game.</li>\n</ol>\n\n<p>Implement the <code>TicTacToe</code> class:</p>\n\n<ul>\n\t<li><code>TicTacToe(int n)</code> Initializes the object the size of the board <code>n</code>.</li>\n\t<li><code>int move(int row, int col, int player)</code> Indicates that the player with id <code>player</code> plays at the cell <code>(row, col)</code> of the board. The move is guaranteed to be a valid move, and the two players alternate in making moves. Return\n\t<ul>\n\t\t<li><code>0</code> if there is <strong>no winner</strong> after the move,</li>\n\t\t<li><code>1</code> if <strong>player 1</strong> is the winner after the move, or</li>\n\t\t<li><code>2</code> if <strong>player 2</strong> is the winner after the move.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;TicTacToe&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;]\n[[3], [0, 0, 1], [0, 2, 2], [2, 2, 1], [1, 1, 2], [2, 0, 1], [1, 0, 2], [2, 1, 1]]\n<strong>Output</strong>\n[null, 0, 0, 0, 0, 0, 0, 1]\n\n<strong>Explanation</strong>\nTicTacToe ticTacToe = new TicTacToe(3);\nAssume that player 1 is &quot;X&quot; and player 2 is &quot;O&quot; in the board.\nticTacToe.move(0, 0, 1); // return 0 (no one wins)\n|X| | |\n| | | |    // Player 1 makes a move at (0, 0).\n| | | |\n\nticTacToe.move(0, 2, 2); // return 0 (no one wins)\n|X| |O|\n| | | |    // Player 2 makes a move at (0, 2).\n| | | |\n\nticTacToe.move(2, 2, 1); // return 0 (no one wins)\n|X| |O|\n| | | |    // Player 1 makes a move at (2, 2).\n| | |X|\n\nticTacToe.move(1, 1, 2); // return 0 (no one wins)\n|X| |O|\n| |O| |    // Player 2 makes a move at (1, 1).\n| | |X|\n\nticTacToe.move(2, 0, 1); // return 0 (no one wins)\n|X| |O|\n| |O| |    // Player 1 makes a move at (2, 0).\n|X| |X|\n\nticTacToe.move(1, 0, 2); // return 0 (no one wins)\n|X| |O|\n|O|O| |    // Player 2 makes a move at (1, 0).\n|X| |X|\n\nticTacToe.move(2, 1, 1); // return 1&nbsp;(player 1 wins)\n|X| |O|\n|O|O| |    // Player 1 makes a move at (2, 1).\n|X|X|X|\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li>player is <code>1</code> or <code>2</code>.</li>\n\t<li><code>0 &lt;= row, col &lt; n</code></li>\n\t<li><code>(row, col)</code> are <strong>unique</strong> for each different call to <code>move</code>.</li>\n\t<li>At most <code>n<sup>2</sup></code> calls will be made to <code>move</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Could you do better than <code>O(n<sup>2</sup>)</code> per <code>move()</code> operation?</p>\n",
  "likes": 2147,
  "dislikes": 120,
  "stats": {
    "totalAccepted": "297.2K",
    "totalSubmission": "506.4K",
    "totalAcceptedRaw": 297157,
    "totalSubmissionRaw": 506405,
    "acRate": "58.7%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Matrix",
      "slug": "matrix"
    },
    {
      "name": "Simulation",
      "slug": "simulation"
    }
  ],
  "metaData": {
    "classname": "TicTacToe",
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "n"
        }
      ]
    },
    "methods": [
      {
        "params": [
          {
            "type": "integer",
            "name": "row"
          },
          {
            "type": "integer",
            "name": "col"
          },
          {
            "type": "integer",
            "name": "player"
          }
        ],
        "name": "move",
        "return": {
          "type": "integer"
        }
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true,
    "manual": true
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 17
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "daringcalf",
      "year": 2023,
      "content": "Bruteforced my way through it.",
      "voteCount": 19
    },
    {
      "name": "ursat",
      "year": 2023,
      "content": "```\\nFollow-up: Could you do better than O(n2) per move() operation?\\n```\\nI guess that means the space complexity because non of the solution mentioned is O(n2) in time",
      "voteCount": 4
    },
    {
      "name": "HugoWangzc",
      "year": 2024,
      "content": "I should say this is pretty good practice for beginner.",
      "voteCount": 3
    },
    {
      "name": "kaidul",
      "year": 2016,
      "content": "Again \"Run Code\" button is not working. Please fix this :)",
      "voteCount": 3
    },
    {
      "name": "junhuangli",
      "year": 2016,
      "content": "[\"TicTacToe\",\"move\",\"move\",\"move\"]\\n[[2],[0,0,2],[0,1,1],[1,1,2]]\\n\\nThis test case failed when I submit my solution, but it passed if I use \"Run Code\"",
      "voteCount": 3
    },
    {
      "name": "solosynth1",
      "year": 2024,
      "content": "How about a nice game of chess?",
      "voteCount": 2
    },
    {
      "name": "tin_le",
      "year": 2024,
      "content": "That optimal solution feels good to learn about. Thank you lc for these quality problem",
      "voteCount": 2
    },
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "only check the row, column, and potential diagonal where the new move was ",
      "voteCount": 1
    },
    {
      "name": "Satansoft",
      "year": 2025,
      "content": "Somebody knows, that:\\n- If we need to check result on each move, everything is need to check rows, cols and 2 diagonals with just current player ;\\n- No needed double loop, all values is reachable with single loop, all variables are provided!\\n- Diagonals could be reachable with `[i][i]` and `[i][n - 1 - i]`;",
      "voteCount": 1
    },
    {
      "name": "ndsouza786",
      "year": 2025,
      "content": "|0 1|\\n|1 2| test case  26 / 33 appears to have the wrong answer. ",
      "voteCount": 1
    }
  ]
}
