{
  "category": "",
  "id": "146",
  "name": "LRU Cache",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/lru-cache/",
  "slug": "lru-cache",
  "isPaidOnly": false,
  "tags": [
    "Hash Table",
    "Linked List",
    "Design",
    "Doubly-Linked List"
  ],
  "similar_questions": [
    {
      "title": "LFU Cache",
      "difficulty": "Hard",
      "slug": "lfu-cache"
    },
    {
      "title": "Design In-Memory File System",
      "difficulty": "Hard",
      "slug": "design-in-memory-file-system"
    },
    {
      "title": "Design Compressed String Iterator",
      "difficulty": "Easy",
      "slug": "design-compressed-string-iterator"
    },
    {
      "title": "Design Most Recently Used Queue",
      "difficulty": "Medium",
      "slug": "design-most-recently-used-queue"
    }
  ],
  "questionId": "146",
  "questionFrontendId": "146",
  "title": "LRU Cache",
  "titleSlug": "lru-cache",
  "content": "<p>Design a data structure that follows the constraints of a <strong><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a></strong>.</p>\n\n<p>Implement the <code>LRUCache</code> class:</p>\n\n<ul>\n\t<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>\n\t<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>\n</ul>\n\n<p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>Explanation</strong>\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity &lt;= 3000</code></li>\n\t<li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n",
  "likes": 22322,
  "dislikes": 1172,
  "stats": {
    "totalAccepted": "2.2M",
    "totalSubmission": "4.9M",
    "totalAcceptedRaw": 2249833,
    "totalSubmissionRaw": 4911301,
    "acRate": "45.8%"
  },
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Linked List",
      "slug": "linked-list"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Doubly-Linked List",
      "slug": "doubly-linked-list"
    }
  ],
  "metaData": {
    "classname": "LRUCache",
    "maxbytesperline": 200000,
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "capacity"
        }
      ]
    },
    "methods": [
      {
        "name": "get",
        "params": [
          {
            "type": "integer",
            "name": "key"
          }
        ],
        "return": {
          "type": "integer"
        }
      },
      {
        "name": "put",
        "params": [
          {
            "type": "integer",
            "name": "key"
          },
          {
            "type": "integer",
            "name": "value"
          }
        ],
        "return": {
          "type": "void"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 104
      },
      {
        "taggedByAdmin": true,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 56
      },
      {
        "taggedByAdmin": false,
        "name": "Apple",
        "slug": "apple",
        "timesEncountered": 29
      },
      {
        "taggedByAdmin": false,
        "name": "Oracle",
        "slug": "oracle",
        "timesEncountered": 18
      },
      {
        "taggedByAdmin": true,
        "name": "Microsoft",
        "slug": "microsoft",
        "timesEncountered": 16
      },
      {
        "taggedByAdmin": false,
        "name": "TikTok",
        "slug": "tiktok",
        "timesEncountered": 16
      },
      {
        "taggedByAdmin": false,
        "name": "Goldman Sachs",
        "slug": "goldman-sachs",
        "timesEncountered": 12
      },
      {
        "taggedByAdmin": true,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 11
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "musicmaker99",
      "year": 2021,
      "content": "Does \"used\" mean used for a get, used for a put, or used for either? Question is unclear.",
      "voteCount": 268
    },
    {
      "name": "pandora111",
      "year": 2014,
      "content": "Please define what \"used\" means in this least recently used.  Does insertion to cache for the very first time count as being used once?  Please clarify the following 2 case: \\n\\n1) I keep on inserting different key-value pairs to the cache by calling set, then eventually cache reaches its capacity, and I need to invalidate.   \\nset(1, 1)\\nset (2, 1)\\n....\\nset(100, 1) --> capacity is 99, capacity limit reached need to invalidate.  So far, I never called get, so does it matter which entry I invalidate?\\n\\n\\n2) I have a bunch of key-value pairs in the cache, the last entry before cache hits its capacity is a new entry.  The next insertion to cache exceeds the capacity so cache needs to be invalidated, do I invalidate the most recently inserted entry because it was never used?  Imagine I call get twice after inserting each new entry like this \\n\\nset(1, 1)\\nget(1)\\nget(1)\\nset (2, 1)\\nget(2)\\nget(2)\\n....\\nset(99, 1) --> capacity is 99, the next call is NOT get(99) \\nset(100,1) -->  which entry should be invalidated?  (99,1) or (1, 1)?",
      "voteCount": 207
    },
    {
      "name": "hgon23",
      "year": 2019,
      "content": "Why is this question changed from hard to medium ?",
      "voteCount": 206
    },
    {
      "name": "roma-glushko",
      "year": 2021,
      "content": "# How would you design LRU cache?\\n\\nI got really excited aswering this question and decided to write a blog post with a whole walkthrough:\\n\\nhttps://www.romaglushko.com/blog/design-lru-cache/\\n\\nHope it will be helpful for some one \\uD83D\\uDE4C\\nLet me know what do you think and happy problem solving!",
      "voteCount": 161
    },
    {
      "name": "pamphlet",
      "year": 2023,
      "content": "Should be Hard any day of the week. You don\\'t get away with bumping it down just because it\\'s a \"popular\" question.",
      "voteCount": 155
    },
    {
      "name": "rahulsah6003",
      "year": 2023,
      "content": "I think its better to mark this problem as Hard since its easy to think but hard to implement ",
      "voteCount": 104
    },
    {
      "name": "umnik",
      "year": 2019,
      "content": "What makes this question\\'s difficulty level to change?",
      "voteCount": 76
    },
    {
      "name": "ks24",
      "year": 2015,
      "content": "There are two ambiguities in the task description. Please clarify the description, because taking the intention from the failed test cases is unnecessarily cumbersome.\\n\\na) The description does not specify which operations count as \"use\", i.e. which operation should trigger an LRU status update. get and set both do, and the description should say so.\\n\\nb) The wording for set() can suggest set-only-upon-add behaviour. Consider reading: \"((Set or insert) if the key is not present)\". Please change to something along: \"Set key, or add it if not present\".",
      "voteCount": 69
    },
    {
      "name": "indrasen_007",
      "year": 2023,
      "content": "Some more test cases :\\n\\n----------------------------\\n\\n[\"LRUCache\",\"put\",\"get\"]\\n[[1],[2,1],[2]]\\n\\n------------------------------\\n\\n[\"LRUCache\",\"put\",\"put\",\"put\",\"put\",\"put\",\"get\",\"put\",\"get\",\"get\",\"put\",\"get\",\"put\",\"put\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\",\"get\",\"put\",\"put\",\"get\",\"get\",\"get\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\",\"put\",\"put\",\"put\",\"get\",\"put\",\"get\",\"get\",\"put\",\"put\",\"get\",\"put\",\"put\",\"put\",\"put\",\"get\",\"put\",\"put\",\"get\",\"put\",\"put\",\"get\",\"put\",\"put\",\"put\",\"put\",\"put\",\"get\",\"put\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\",\"put\",\"get\",\"get\",\"put\",\"put\",\"put\",\"put\",\"get\",\"put\",\"put\",\"put\",\"put\",\"get\",\"get\",\"get\",\"put\",\"put\",\"put\",\"get\",\"put\",\"put\",\"put\",\"get\",\"put\",\"put\",\"put\",\"get\",\"get\",\"get\",\"put\",\"put\",\"put\",\"put\",\"get\",\"put\",\"put\",\"put\",\"put\",\"put\",\"put\",\"put\"]\\n[[10],[10,13],[3,17],[6,11],[10,5],[9,10],[13],[2,19],[2],[3],[5,25],[8],[9,22],[5,5],[1,30],[11],[9,12],[7],[5],[8],[9],[4,30],[9,3],[9],[10],[10],[6,14],[3,1],[3],[10,11],[8],[2,14],[1],[5],[4],[11,4],[12,24],[5,18],[13],[7,23],[8],[12],[3,27],[2,12],[5],[2,9],[13,4],[8,18],[1,7],[6],[9,29],[8,21],[5],[6,30],[1,12],[10],[4,15],[7,22],[11,26],[8,17],[9,29],[5],[3,4],[11,30],[12],[4,29],[3],[9],[6],[3,4],[1],[10],[3,29],[10,28],[1,20],[11,13],[3],[3,12],[3,8],[10,9],[3,26],[8],[7],[5],[13,17],[2,27],[11,15],[12],[9,19],[2,15],[3,16],[1],[12,17],[9,1],[6,19],[4],[5],[5],[8,1],[11,7],[5,2],[9,28],[1],[2,2],[7,4],[4,22],[7,24],[9,26],[13,28],[11,26]]\\n\\n------------------------------\\n\\n[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]\\n\\n------------------------------------\\n\\n[\"LRUCache\",\"put\",\"get\",\"put\",\"get\",\"get\"]\\n[[1],[2,1],[2],[3,2],[2],[3]]\\n\\n-------------------",
      "voteCount": 49
    },
    {
      "name": "tejasX",
      "year": 2023,
      "content": "definitely a HARD one !!",
      "voteCount": 23
    }
  ]
}
