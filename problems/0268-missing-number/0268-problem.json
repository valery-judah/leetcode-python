{
  "category": "",
  "id": "268",
  "name": "Missing Number",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/missing-number/",
  "slug": "missing-number",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Hash Table",
    "Math",
    "Binary Search",
    "Bit Manipulation",
    "Sorting"
  ],
  "similar_questions": [
    {
      "title": "First Missing Positive",
      "difficulty": "Hard",
      "slug": "first-missing-positive"
    },
    {
      "title": "Single Number",
      "difficulty": "Easy",
      "slug": "single-number"
    },
    {
      "title": "Find the Duplicate Number",
      "difficulty": "Medium",
      "slug": "find-the-duplicate-number"
    },
    {
      "title": "Couples Holding Hands",
      "difficulty": "Hard",
      "slug": "couples-holding-hands"
    },
    {
      "title": "Find Unique Binary String",
      "difficulty": "Medium",
      "slug": "find-unique-binary-string"
    },
    {
      "title": "Find the Largest Almost Missing Integer",
      "difficulty": "Easy",
      "slug": "find-the-largest-almost-missing-integer"
    }
  ],
  "questionId": "268",
  "questionFrontendId": "268",
  "title": "Missing Number",
  "titleSlug": "missing-number",
  "content": "<p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return <em>the only number in the range that is missing from the array.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,0,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>n = 3</code> since there are 3 numbers, so all numbers are in the range <code>[0,3]</code>. 2 is the missing number in the range since it does not appear in <code>nums</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>n = 2</code> since there are 2 numbers, so all numbers are in the range <code>[0,2]</code>. 2 is the missing number in the range since it does not appear in <code>nums</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [9,6,4,2,3,5,7,0,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">8</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>n = 9</code> since there are 9 numbers, so all numbers are in the range <code>[0,9]</code>. 8 is the missing number in the range since it does not appear in <code>nums</code>.</p>\n</div>\n\n<div class=\"simple-translate-system-theme\" id=\"simple-translate\">\n<div>\n<div class=\"simple-translate-button isShow\" style=\"background-image: url(&quot;moz-extension://8a9ffb6b-7e69-4e93-aae1-436a1448eff6/icons/512.png&quot;); height: 22px; width: 22px; top: 318px; left: 36px;\">&nbsp;</div>\n\n<div class=\"simple-translate-panel \" style=\"width: 300px; height: 200px; top: 0px; left: 0px; font-size: 13px;\">\n<div class=\"simple-translate-result-wrapper\" style=\"overflow: hidden;\">\n<div class=\"simple-translate-move\" draggable=\"true\">&nbsp;</div>\n\n<div class=\"simple-translate-result-contents\">\n<p class=\"simple-translate-result\" dir=\"auto\">&nbsp;</p>\n\n<p class=\"simple-translate-candidate\" dir=\"auto\">&nbsp;</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= n</code></li>\n\t<li>All the numbers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you implement a solution using only <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime complexity?</p>\n",
  "likes": 13552,
  "dislikes": 3432,
  "stats": {
    "totalAccepted": "3.3M",
    "totalSubmission": "4.7M",
    "totalAcceptedRaw": 3339679,
    "totalSubmissionRaw": 4724073,
    "acRate": "70.7%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    }
  ],
  "metaData": {
    "name": "missingNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 12
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "amsahil",
      "year": 2022,
      "content": "This problem can be solved by 3 methods:\\n1.Hashing\\n2.Sum Formula\\n3. Bit manupulation i.e using XOR.\\n\\nLets dicuss this method that which is more effiecient and why it has to be used:-\\n\\n1. **HASHING** :- In this Method, We can iterate over all the element upto the n and compare it with the present element by creating the hash map of (n+1).\\n*Time Complexity = O(n)\\nSpace complexity =O(n)*\\n * Issue :- Though it is taking the space complexity of N, So we move on to  the next Method.\\n\\n2. **Sum Formula** :- In this we us e the sum formula i.e;\\n    Sn = (N+1)/2 & Sum of all the array(Sa[]). \\n\\tAnd after this we subtract the (Sn-Sa[]) to find the Missing Number.\\n*Time Complexity = O(n)\\nSpace complexity =O(1)*\\n* Issue :- It can cause the Overflow issue because in this we are adding the element, So if the array element is very large then it can cause Integer Overflow.\\n\\nTo handle out this Overflow we can use the Next Method which is XOR Bit Manipulation.\\n\\n3. **XOR Bit Manipulation** :- In this we take the XOR of given array and the first n natural number.\\n*Time Complexity = O(n)\\nSpace complexity =O(1)*\\nNo Overflow.\\n\\nHope you find this useful.\\n//Happy coding\\nSigning off ~Sahil Shah\\n\\n\\n",
      "voteCount": 381
    },
    {
      "name": "rhythm31",
      "year": 2024,
      "content": "Newbie here. Finally a daily question that has already solved by me. Feels good lol ",
      "voteCount": 146
    },
    {
      "name": "skydodle",
      "year": 2023,
      "content": "Here is an intuitive approach to solve the problem before thinking about how to code it:\\n\\nWe know that there are supposely n + 1 total numbers but one number is missing and we need to find that missing number. This is because we know the range is [0, n]. \\n\\nFor example,  Input: nums = [3,0,1]\\nWe know the range is 0, 1, 2, 3 and there are supposely 4 total numbers, but the given input only has 3 total numbers: 0, 1, 3. \\n\\nWithin this range 0 to n, each number should be unique and consecutive, so we can safely assume the sum of the suppose total numbers by iterating from 0 to n,  and then compare it with the current input sum.\\n\\nsuppose sum = 0 + 1 + 2+ 3 = 6\\ncurrent sum = 0 + 1 + 3 = 4\\n6 - 4 = 2 \\n\\n2 is the missing number in [0, 1, 3]\\n\\nNo sorting or hash map is required in this approach and you can achieve O(N) time and O(1) space.\\n\\n",
      "voteCount": 106
    },
    {
      "name": "CaptainAlex",
      "year": 2023,
      "content": "Input: nums = [0,1]\\nOutput: 2\\nInput: nums = [1]\\nOutput: 0\\nWhy ?",
      "voteCount": 39
    },
    {
      "name": "vuduyquoc",
      "year": 2018,
      "content": "I don\\'t understand the requirements. Why the return result is 1 when the input is [0]. I think it should return -1",
      "voteCount": 34
    },
    {
      "name": "anwendeng",
      "year": 2024,
      "content": "1-line Use Gauss' n(n+1)/2.\nxor-sum is also good. Even binary search can do & needs a sort\nHave a good day!",
      "voteCount": 26
    },
    {
      "name": "bedmuthaapoorv",
      "year": 2023,
      "content": "intuition behind bit manipulation solution:\n- it is given the numbers are unique and between 0 to n, this has to be a hint. -> the xors of all numbers from 0 to n if done twice will be equal to zero -> since one number is missing in nums, the xor of all numbers of nums ^ all numbers from 0 to n will be equal to the missing number.\n",
      "voteCount": 21
    },
    {
      "name": "Tamradhwaj",
      "year": 2023,
      "content": "Hint : XOR of two number is zero\nAssume the given array is: {1, 2, 4, 5} and N = 5.\nXOR of (1 to 5) i.e. xor1 = (1^2^3^4^5)\nXOR of array elements i.e. xor2 = (1^2^4^5)\nXOR of xor1 and xor2 = (1^2^3^4^5) ^ (1^2^4^5)\n\t\t\t= (1^1)^(2^2)^(3)^(4^4)^(5^5)\n\t\t\t= 0^0^3^0^0 = 0^3 = 3.\nThe missing number is 3",
      "voteCount": 20
    },
    {
      "name": "sagarv19171",
      "year": 2022,
      "content": "\\'\\'\\'\\n\\n\\treturn sum(range(len(nums)+1))-sum(nums)\\n\\t\\n\\'\\'\\'",
      "voteCount": 14
    },
    {
      "name": "shammyraj",
      "year": 2020,
      "content": "this is error which I\\'m getting :\\ninput : [0]\\noutput:[1]\\n\\nshouldn\\'t the output be 0 ? what am I missing ?",
      "voteCount": 11
    }
  ]
}
