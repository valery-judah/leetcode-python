{
  "category": "",
  "id": "772",
  "name": "Basic Calculator III",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/basic-calculator-iii/",
  "slug": "basic-calculator-iii",
  "isPaidOnly": true,
  "tags": [
    "Math",
    "String",
    "Stack",
    "Recursion"
  ],
  "similar_questions": [
    {
      "title": "Basic Calculator",
      "difficulty": "Hard",
      "slug": "basic-calculator"
    },
    {
      "title": "Basic Calculator II",
      "difficulty": "Medium",
      "slug": "basic-calculator-ii"
    },
    {
      "title": "Basic Calculator IV",
      "difficulty": "Hard",
      "slug": "basic-calculator-iv"
    },
    {
      "title": "Build Binary Expression Tree From Infix Expression",
      "difficulty": "Hard",
      "slug": "build-binary-expression-tree-from-infix-expression"
    }
  ],
  "questionId": "785",
  "questionFrontendId": "772",
  "title": "Basic Calculator III",
  "titleSlug": "basic-calculator-iii",
  "content": "<p>Implement a basic calculator to evaluate a simple expression string.</p>\n\n<p>The expression string contains only non-negative integers, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, <code>&#39;/&#39;</code> operators, and open <code>&#39;(&#39;</code> and closing parentheses <code>&#39;)&#39;</code>. The integer division should <strong>truncate toward zero</strong>.</p>\n\n<p>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</p>\n\n<p><strong>Note:</strong> You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1+1&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;6-4/2&quot;\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2*(5+5*2)/3+(6/2+8)&quot;\n<strong>Output:</strong> 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;(&#39;</code>,&nbsp;and&nbsp;<code>&#39;)&#39;</code>.</li>\n\t<li><code>s</code> is a <strong>valid</strong> expression.</li>\n</ul>\n",
  "likes": 1168,
  "dislikes": 293,
  "stats": {
    "totalAccepted": "149.5K",
    "totalSubmission": "283.5K",
    "totalAcceptedRaw": 149522,
    "totalSubmissionRaw": 283526,
    "acRate": "52.7%"
  },
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "metaData": {
    "name": "calculate",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "JavaExcavator",
      "year": 2023,
      "content": "this is the problem Casio calculator engineers haven\\'t solved for decades till date. Meanwhile, there are us, 45 minutes, ready set go!",
      "voteCount": 50
    },
    {
      "name": "alvin480",
      "year": 2024,
      "content": "If you get this question, interviewer just doesn\\'t want you to join",
      "voteCount": 31
    },
    {
      "name": "Tristan37",
      "year": 2025,
      "content": "pain.py",
      "voteCount": 11
    },
    {
      "name": "mingrui",
      "year": 2019,
      "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\"",
      "voteCount": 10
    },
    {
      "name": "fdsm_lhn",
      "year": 2018,
      "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE.",
      "voteCount": 6
    },
    {
      "name": "renol",
      "year": 2023,
      "content": "what is this\\n",
      "voteCount": 5
    },
    {
      "name": "_Hamada",
      "year": 2019,
      "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description.",
      "voteCount": 5
    },
    {
      "name": "lixt7891",
      "year": 2020,
      "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?",
      "voteCount": 3
    },
    {
      "name": "wenwei202",
      "year": 2019,
      "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?",
      "voteCount": 2
    },
    {
      "name": "0xFFFFFFFF",
      "year": 2018,
      "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?",
      "voteCount": 2
    }
  ]
}
