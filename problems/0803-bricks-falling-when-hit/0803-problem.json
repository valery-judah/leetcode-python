{
  "category": "",
  "id": "803",
  "name": "Bricks Falling When Hit",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/bricks-falling-when-hit/",
  "slug": "bricks-falling-when-hit",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Union Find",
    "Matrix"
  ],
  "similar_questions": [
    {
      "title": "Last Day Where You Can Still Cross",
      "difficulty": "Hard",
      "slug": "last-day-where-you-can-still-cross"
    },
    {
      "title": "Number of Ways to Build Sturdy Brick Wall",
      "difficulty": "Medium",
      "slug": "number-of-ways-to-build-sturdy-brick-wall"
    }
  ],
  "questionId": "821",
  "questionFrontendId": "803",
  "title": "Bricks Falling When Hit",
  "titleSlug": "bricks-falling-when-hit",
  "content": "<p>You are given an <code>m x n</code> binary <code>grid</code>, where each <code>1</code> represents a brick and <code>0</code> represents an empty space. A brick is <strong>stable</strong> if:</p>\n\n<ul>\n\t<li>It is directly connected to the top of the grid, or</li>\n\t<li>At least one other brick in its four adjacent cells is <strong>stable</strong>.</li>\n</ul>\n\n<p>You are also given an array <code>hits</code>, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location <code>hits[i] = (row<sub>i</sub>, col<sub>i</sub>)</code>. The brick on that location&nbsp;(if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will <strong>fall</strong>. Once a brick falls, it is <strong>immediately</strong> erased from the <code>grid</code> (i.e., it does not land on other stable bricks).</p>\n\n<p>Return <em>an array </em><code>result</code><em>, where each </em><code>result[i]</code><em> is the number of bricks that will <strong>fall</strong> after the </em><code>i<sup>th</sup></code><em> erasure is applied.</em></p>\n\n<p><strong>Note</strong> that an erasure may refer to a location with no brick, and if it does, no bricks drop.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\n<strong>Output:</strong> [2]\n<strong>Explanation: </strong>Starting with the grid:\n[[1,0,0,0],\n [<u>1</u>,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,<u>1</u>,<u>1</u>,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n [0,0,0,0]]\nHence the result is [2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\n<strong>Output:</strong> [0,0]\n<strong>Explanation: </strong>Starting with the grid:\n[[1,0,0,0],\n [1,<u>1</u>,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n [1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n [<u>1</u>,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is [0,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>grid[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= hits.length &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>hits[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i&nbsp;</sub>&lt;= m - 1</code></li>\n\t<li><code>0 &lt;=&nbsp;y<sub>i</sub> &lt;= n - 1</code></li>\n\t<li>All <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are unique.</li>\n</ul>\n",
  "likes": 1177,
  "dislikes": 190,
  "stats": {
    "totalAccepted": "35.2K",
    "totalSubmission": "97.4K",
    "totalAcceptedRaw": 35195,
    "totalSubmissionRaw": 97410,
    "acRate": "36.1%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Union Find",
      "slug": "union-find"
    },
    {
      "name": "Matrix",
      "slug": "matrix"
    }
  ],
  "metaData": {
    "name": "hitBricks",
    "params": [
      {
        "name": "grid",
        "type": "integer[][]"
      },
      {
        "name": "hits",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[]"
    }
  },
  "discussion_posts": [
    {
      "name": "wanglu",
      "year": 2018,
      "content": "I just want to share my thoughts here. \\n\\nIf no bircks drop, then after all operations. The grid will be look like a pool with multi islands.\\nfor example:\\n0010000100\\n0111001110\\n1111111111\\nafter operations: [0,2], [2,4], [1,2], [0,7]\\n0000000000\\n0101001110\\n1111011111\\nso total 2 islands. \\n\\nThen add bricks back reversely.\\n[0,7]\\n0000000100\\n0101001110\\n1111011111\\nthe right island attaches top, and its size is 9, which means 8 bricks drop in this operation.\\n\\n[1,2]\\n0000000100\\n0111001110\\n1111011111\\nthe left island does not reach the top, so no brick drops. \\n\\n[2,4]\\n0000000100\\n0111001110\\n1111111111\\nthe left island connects to right island and acttaches top, and left island is original 7, which means 7 bricks drop in this operation.\\n\\n[0,2]\\n0010000100\\n0111001110\\n1111111111\\nthe island size is just enlarged by 1, which means no brick drops. \\n\\nHope this helps:)\\n\\n\\n\\n\\n\\n",
      "voteCount": 78
    },
    {
      "name": "Msey",
      "year": 2024,
      "content": "got my head hit by that brick",
      "voteCount": 10
    },
    {
      "name": "cppshooter",
      "year": 2024,
      "content": "There\\'s a [1D version of this problem](https://leetcode.com/problems/maximum-segment-sum-after-removals/) which can also be solved in a very similar way. If you\\'re stuck on this problem try the 1D version first :)",
      "voteCount": 8
    },
    {
      "name": "markalavin",
      "year": 2023,
      "content": "Can we assume that all initial bricks are stable?",
      "voteCount": 8
    },
    {
      "name": "Dagar",
      "year": 2023,
      "content": "One of the facts that should be present in the problem statement is that all the bricks are stable to begin with.",
      "voteCount": 6
    },
    {
      "name": "saurabh0707",
      "year": 2024,
      "content": "Somebody please pick that same brick and hit me. Please hit me harder than the problem \\uD83E\\uDD72",
      "voteCount": 5
    },
    {
      "name": "preeti3",
      "year": 2023,
      "content": "The problem with \"hard\" problems is understanding the problem is itself hard :-)",
      "voteCount": 3
    },
    {
      "name": "panzerschrek",
      "year": 2025,
      "content": "This piece of shit is designed to be solved in reverse order - just remove all blocks in hits list and then add them back one by one.",
      "voteCount": 2
    },
    {
      "name": "ashish1729",
      "year": 2025,
      "content": "an image in this question will be so helpful",
      "voteCount": 1
    },
    {
      "name": "You_Know_Me",
      "year": 2025,
      "content": "My O(R^2*C^2) solution is faster than 85% submissions and DSU solution with complexity O(R*C*alpha(R*C)) is only beating 69% of solutions. It\\'s strange. \\n\\nLink to my O(R^2*C^2) solution. \\nhttps://leetcode.com/problems/bricks-falling-when-hit/submissions/1613793241",
      "voteCount": 1
    }
  ]
}
