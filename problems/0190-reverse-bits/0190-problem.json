{
  "category": "",
  "id": "190",
  "name": "Reverse Bits",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/reverse-bits/",
  "slug": "reverse-bits",
  "isPaidOnly": false,
  "tags": [
    "Divide and Conquer",
    "Bit Manipulation"
  ],
  "similar_questions": [
    {
      "title": "Reverse Integer",
      "difficulty": "Medium",
      "slug": "reverse-integer"
    },
    {
      "title": "Number of 1 Bits",
      "difficulty": "Easy",
      "slug": "number-of-1-bits"
    },
    {
      "title": "A Number After a Double Reversal",
      "difficulty": "Easy",
      "slug": "a-number-after-a-double-reversal"
    }
  ],
  "questionId": "190",
  "questionFrontendId": "190",
  "title": "Reverse Bits",
  "titleSlug": "reverse-bits",
  "content": "<p>Reverse bits of a given 32 bits signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 43261596</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">964176192</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Integer</th>\n\t\t\t<th>Binary</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>43261596</td>\n\t\t\t<td>00000010100101000001111010011100</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>964176192</td>\n\t\t\t<td>00111001011110000010100101000000</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2147483644</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1073741822</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Integer</th>\n\t\t\t<th>Binary</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2147483644</td>\n\t\t\t<td>01111111111111111111111111111100</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1073741822</td>\n\t\t\t<td>00111111111111111111111111111110</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 2<sup>31</sup> - 2</code></li>\n\t<li><code>n</code> is even.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If this function is called many times, how would you optimize it?</p>\n",
  "likes": 5455,
  "dislikes": 1625,
  "stats": {
    "totalAccepted": "1.1M",
    "totalSubmission": "1.7M",
    "totalAcceptedRaw": 1066657,
    "totalSubmissionRaw": 1662180,
    "acRate": "64.2%"
  },
  "topicTags": [
    {
      "name": "Divide and Conquer",
      "slug": "divide-and-conquer"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "metaData": {
    "name": "reverseBits",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "manual": false
  },
  "discussion_posts": [
    {
      "name": "quarkyy99",
      "year": 2023,
      "content": "What is wrong with the developer of the question....Theyre saying that input is binary string and the input theyre taking is an integer...\\n",
      "voteCount": 499
    },
    {
      "name": "anantverma711",
      "year": 2023,
      "content": "I love bit manipulation... said no one, ever",
      "voteCount": 208
    },
    {
      "name": "csierradeveloper",
      "year": 2024,
      "content": "The problem description is flat out false. They describe how you would have an input of 00000010100101000001111010011100, which corresponds to the integer 43261596. The method signature lists this as an int (I\\'m working in python, so there\\'s unlimited precision for these). The test cases list the input as 00000010100101000001111010011100. The actual input is instead 43261596. The problem wants you to convert from an int to the bit representation, reverse it, then convert back. And that would be fine if that\\'s what the problem said to do! But instead it describes being given an incomplete string representation of a 32 bit number, filling it out with any missing leading zeroes, reversing it, and converting it to a normal int.\\n\\nI don\\'t like having my time wasted by imprecise or actively misleading problem descriptions. Half the difficulty here comes from guessing what the writer meant and failed to articulate, not from writing the actual algorithm.",
      "voteCount": 71
    },
    {
      "name": "Pranay_Dutta",
      "year": 2024,
      "content": "**Explanation says n is a string & shows a n with bit values, gives a decimal value.**\n\n<img width=120 style=\"border-radius: 15px\" src=\"https://media1.tenor.com/m/7l4PXSCFjjQAAAAd/huh-cat.gif\"/>",
      "voteCount": 59
    },
    {
      "name": "shtian",
      "year": 2015,
      "content": "## Java ##\\n\\nUse [`>>>`\\\\*][1] instead of `>>`. `>>>`is unsigned right shift, and `>>` is signed.\\n\\nUse [`Integer.parseUnsignedInt`\\\\*][2] and [`Integer.toUnsignedString`\\\\*][3] if you want test your program locally.\\n\\n## JavaScript ##\\n\\nUse [`>>>`\\\\*][4] instead of `>>`. This is as same as Java.\\n\\nAfter `|`, `&`, `~`, `>>`, `<<`, the number was converted ToInt32. But you need return a positive value. So try `return result >>> 0;`. `>>>` will call [`ToUint32`\\\\*][5].\\n\\n\\n  [1]: http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html\\n  [2]: http://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#parseUnsignedInt-java.lang.String-\\n  [3]: http://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#toUnsignedString-int-int-\\n  [4]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.7.2\\n  [5]: http://www.ecma-international.org/ecma-262/5.1/#sec-9.6",
      "voteCount": 49
    },
    {
      "name": "rajeshsingh505",
      "year": 2023,
      "content": "definitely not an easy question. ",
      "voteCount": 41
    },
    {
      "name": "gen504240809",
      "year": 2015,
      "content": "int in java is 32-bit signed number ,the maximum signed number is 2147483647.when the last bit of the input number is '1' and we reverse bits,it will become negative number ,how can we return a positive int number and the number must be larger than 2147483647?",
      "voteCount": 39
    },
    {
      "name": "lordwerneo",
      "year": 2022,
      "content": "In case if you wonder, if it says that as input you get something like this: \\'00000000000000000000000000000100\\' it means that as input you just got int 4, and to get binary representation, you just need to format or f-string your input as f\\'{input:032b}\\' where input is your variable.",
      "voteCount": 24
    },
    {
      "name": "jimmyzzxhlh",
      "year": 2016,
      "content": "Since the function is forced to return an int, how is it possible to return 2147483648?\\n\\nI've tried to return -2147483648 and it doesn't work.",
      "voteCount": 16
    },
    {
      "name": "daynis",
      "year": 2018,
      "content": "I have a more of a Java language question. My program failed for 2147483648 as an input. How is Java able to represent 2147483648 as an unsigned int value when it doesn't have any unsigned integer types?In other words, how is the input sent as 2147483648 in an int variable given that the Java language itself doesn't let us hold 2147483648 in an int ?",
      "voteCount": 12
    }
  ]
}
