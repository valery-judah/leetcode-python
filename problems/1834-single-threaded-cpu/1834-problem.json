{
  "category": "",
  "id": "1834",
  "name": "Single-Threaded CPU",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/single-threaded-cpu/",
  "slug": "single-threaded-cpu",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Sorting",
    "Heap (Priority Queue)"
  ],
  "similar_questions": [
    {
      "title": "Parallel Courses III",
      "difficulty": "Hard",
      "slug": "parallel-courses-iii"
    },
    {
      "title": "Minimum Time to Complete All Tasks",
      "difficulty": "Hard",
      "slug": "minimum-time-to-complete-all-tasks"
    }
  ],
  "questionId": "1962",
  "questionFrontendId": "1834",
  "title": "Single-Threaded CPU",
  "titleSlug": "single-threaded-cpu",
  "content": "<p>You are given <code>n</code>​​​​​​ tasks labeled from <code>0</code> to <code>n - 1</code> represented by a 2D integer array <code>tasks</code>, where <code>tasks[i] = [enqueueTime<sub>i</sub>, processingTime<sub>i</sub>]</code> means that the <code>i<sup>​​​​​​th</sup></code>​​​​ task will be available to process at <code>enqueueTime<sub>i</sub></code> and will take <code>processingTime<sub>i</sub></code><sub> </sub>to finish processing.</p>\n\n<p>You have a single-threaded CPU that can process <strong>at most one</strong> task at a time and will act in the following way:</p>\n\n<ul>\n\t<li>If the CPU is idle and there are no available tasks to process, the CPU remains idle.</li>\n\t<li>If the CPU is idle and there are available tasks, the CPU will choose the one with the <strong>shortest processing time</strong>. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.</li>\n\t<li>Once a task is started, the CPU will <strong>process the entire task</strong> without stopping.</li>\n\t<li>The CPU can finish a task then start a new one instantly.</li>\n</ul>\n\n<p>Return <em>the order in which the CPU will process the tasks.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[1,2],[2,4],[3,2],[4,1]]\n<strong>Output:</strong> [0,2,3,1]\n<strong>Explanation: </strong>The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]\n<strong>Output:</strong> [4,3,2,0,1]\n<strong>Explanation</strong><strong>: </strong>The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>tasks.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= enqueueTime<sub>i</sub>, processingTime<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
  "likes": 3374,
  "dislikes": 280,
  "stats": {
    "totalAccepted": "138.2K",
    "totalSubmission": "295.1K",
    "totalAcceptedRaw": 138200,
    "totalSubmissionRaw": 295141,
    "acRate": "46.8%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    },
    {
      "name": "Heap (Priority Queue)",
      "slug": "heap-priority-queue"
    }
  ],
  "metaData": {
    "name": "getOrder",
    "params": [
      {
        "name": "tasks",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[]"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "DoorDash",
        "slug": "doordash",
        "timesEncountered": 14
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "Msey",
      "year": 2022,
      "content": "this problem deserves to be in my \"nightmare list\" from medium section",
      "voteCount": 147
    },
    {
      "name": "djslim",
      "year": 2022,
      "content": "Creative question, asked recently by Google",
      "voteCount": 86
    },
    {
      "name": "vghoghari82",
      "year": 2022,
      "content": "In Technical terms this problem is called Shortest Job First (SJF) scheduling algorithm in OS",
      "voteCount": 73
    },
    {
      "name": "joshuako",
      "year": 2022,
      "content": "Really nice question. I feel this much closer to real life work problem, compared to those dynamic programming / tree / graph problem which I almost never see at work.",
      "voteCount": 43
    },
    {
      "name": "aryonbe",
      "year": 2022,
      "content": "This question is really tough! Looks easy but actually hard. ",
      "voteCount": 41
    },
    {
      "name": "Shreyash_Yadav",
      "year": 2022,
      "content": "Hardly medium ",
      "voteCount": 21
    },
    {
      "name": "abdul_sohail24",
      "year": 2022,
      "content": "SJF Implementation is damn hard",
      "voteCount": 20
    },
    {
      "name": "sorokus-dev",
      "year": 2022,
      "content": "The beauty of this problem is that it\\'s not just revealing a potential of priority queues, but reminds us we can use 2 PQs when necessary. Loved it!\\n",
      "voteCount": 14
    },
    {
      "name": "v_suresh",
      "year": 2023,
      "content": "I wish leetcode had a problem type as MediumPlus\\n\\nThis one is such a tricky question to solve during interviews!",
      "voteCount": 11
    },
    {
      "name": "ajaygonepuri",
      "year": 2022,
      "content": "tasks = [[1,2],[2,4],[3,2],[4,1]] Output: [0,2,3,1]\\nIn this sample input test case why is the output starting from 0 , according to the questions it should start with 3\\nCan someone please explain.",
      "voteCount": 6
    }
  ]
}
