{
  "category": "",
  "id": "1567",
  "name": "Maximum Length of Subarray With Positive Product",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/",
  "slug": "maximum-length-of-subarray-with-positive-product",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Dynamic Programming",
    "Greedy"
  ],
  "similar_questions": [],
  "questionId": "1690",
  "questionFrontendId": "1567",
  "title": "Maximum Length of Subarray With Positive Product",
  "titleSlug": "maximum-length-of-subarray-with-positive-product",
  "content": "<p>Given an array of integers <code>nums</code>, find the maximum length of a subarray where the product of all its elements is positive.</p>\n\n<p>A subarray of an array is a consecutive sequence of zero or more values taken out of that array.</p>\n\n<p>Return <em>the maximum length of a subarray with positive product</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,-2,-3,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The array nums already has a positive product of 24.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,-2,-3,-4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that&#39;ll make the product 0 which is not positive.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3,0,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest subarray with positive product is [-1,-2] or [-2,-3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
  "likes": 2471,
  "dislikes": 77,
  "stats": {
    "totalAccepted": "107.1K",
    "totalSubmission": "240.5K",
    "totalAcceptedRaw": 107060,
    "totalSubmissionRaw": 240519,
    "acRate": "44.5%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "metaData": {
    "name": "getMaxLen",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "_rajeev_ranjan",
      "year": 2025,
      "content": "TestCases :\\n[-1,2]\\n[-1]\\n[0,0,0,0,0]\\n[1000000000,1000000000]",
      "voteCount": 2
    },
    {
      "name": "mdabennett99",
      "year": 2025,
      "content": "Ignore the hints, use dynamic programming keeping track of the longest positive and negative product subarray at each index.",
      "voteCount": 2
    },
    {
      "name": "armanphaugat20",
      "year": 2025,
      "content": "We iterate from left to right and then from right to left, tracking the current subarray length and updating the maximum length whenever the product is positive. Instead of multiplying the actual numbers, we only track the sign (+/-)",
      "voteCount": 1
    },
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "the problem can be greatly simplified by just splitting the list on zeros",
      "voteCount": 1
    },
    {
      "name": "darkhorse007d",
      "year": 2025,
      "content": "We are only interested in `parity` of negative-number-counter. If we encounter a `same parity` again that means, the intermediate subarray has even number of negative numbers.\\nOne edge case though: If subarray contains `0`, no matter how many other numbers you include product will be non-negative(according to problem description). So, a new `sub-problem` start after encountering a zero.\\n`Parity` indicates If a number is odd or even. Keep track of the earliest index for each parity `(0/1)`.",
      "voteCount": 1
    },
    {
      "name": "user0907pa",
      "year": 2025,
      "content": "copy of max product",
      "voteCount": 1
    },
    {
      "name": "echristensen",
      "year": 2024,
      "content": "I think example 3 is wrong, it should be size of 3 since you can have [-1, -2, 1] or [-2. -3, 1]... you include a positive 1 in there, so it should be included for the LONGEST subarray with positive product. so I believe the expected output on that one is wrong.",
      "voteCount": 1
    },
    {
      "name": "Mrinal2100",
      "year": 2023,
      "content": "Tricky question",
      "voteCount": 1
    },
    {
      "name": "Cocamo1337",
      "year": 2023,
      "content": "Consider that all valid subArrays contain no zeros - Try to come up with a way to only check the range of elements between the zeros.",
      "voteCount": 1
    },
    {
      "name": "sohil_trgsx",
      "year": 2025,
      "content": "Testcases: \\n\\n[2,-1,2,-1,2]\\n[-1,0,-2,-3,0,-4]\\n[1,-1,1,-1,1,-1,1]\\n[-1,-1,1,-1,-1,-1]\\n[0,1,2,3,-1,0,-1,-1,-1,2,2]\\n[100000,-1,-1,0,-1,-1,-1,-1,2]\\n[-2,-3,-4,0,-1,-2,-3,-4,-5,0,1,2,3,4,5,-6]\\n[0,-1,0,-1,0,-1,0]\\n\\n[1,1,1,1,0,-1,-1,-1,-1,0,1,1,-1,-1]\\n[-1,2,3,0,4,0,-5,-6,0,7,8,9,-10]\\n[1,-2,3,-4,5,-6,7,-8,9,-10]\\n[1,2,-3,4,-5,6,-7,8,-9,10,-11,12]\\n[-1,-1,-1,-1,-1,-1,-1,-1]\\n[1,-1,0,-1,1,0,1,-1,-1,1]\\n[0,1,-1,1,-1,1,-1,1,0,1,1,-1,-1,1,1,1,-1,0,-1,-1,-1,1]\\n[0,0,1,-1,-1,-1,0,1,1,1,-1,0,0,-1,-1,1,1,0]\\n\\n[5,-1,-1,-1,0,-2,-2,0,3,-3,-3,3,0,-4,4,4,-4]\\n[-2,0,-2,-2,-2,0,-2,-2,0,-2]\\n[1,-1,-1,1,1,-1,-1,1,1,-1,0,-1,1,1,-1,1]\\n[1,2,3,0,-1,-1,-1,0,2,2,2,-2,-2,0,3,-3,3,-3,3]\\n[0,-1,-1,1,1,0,0,1,-1,1,-1,0,1,-1,-1,1,0]\\n[-1,2,-3,4,-5,6,-7,8,-9,10,0,-11,12,-13,14,-15,16,-17,18]\\n[1,0,0,0,-1,-1,0,1,1,0,-1,0,1,-1,1,0]\\n[-1000000000,0,1000000000,-1,-1,0,1,-1,-1,1,0,0,1]\\n\\n[1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1]\\n[0,1,1,1,1,1,0,-1,-1,-1,-1,-1,0,1,1,1,1,1,0]\\n[2,0,-3,0,4,0,-5,0,6,0,-7,0,8,0,-9,0,10]\\n[-1,0,0,-1,0,0,-1,0,0,-1]\\n[1,-2,-2,-2,-2,3,0,-3,-3,-3,3,3,3,-3,0,2,-1,-1,2,0]\\n[1,1,-1,-1,1,1,-1,0,-1,-1,1,1,-1,-1,1,1,1,0,1,-1,1,-1]\\n",
      "voteCount": 0
    }
  ]
}
