{
  "category": "",
  "id": "155",
  "name": "Min Stack",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/min-stack/",
  "slug": "min-stack",
  "isPaidOnly": false,
  "tags": [
    "Stack",
    "Design"
  ],
  "similar_questions": [
    {
      "title": "Sliding Window Maximum",
      "difficulty": "Hard",
      "slug": "sliding-window-maximum"
    },
    {
      "title": "Max Stack",
      "difficulty": "Hard",
      "slug": "max-stack"
    }
  ],
  "questionId": "155",
  "questionFrontendId": "155",
  "title": "Min Stack",
  "titleSlug": "min-stack",
  "content": "<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>\n\n<p>Implement the <code>MinStack</code> class:</p>\n\n<ul>\n\t<li><code>MinStack()</code> initializes the stack object.</li>\n\t<li><code>void push(int val)</code> pushes the element <code>val</code> onto the stack.</li>\n\t<li><code>void pop()</code> removes the element on the top of the stack.</li>\n\t<li><code>int top()</code> gets the top element of the stack.</li>\n\t<li><code>int getMin()</code> retrieves the minimum element in the stack.</li>\n</ul>\n\n<p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]\n[[],[-2],[0],[-3],[],[],[],[]]\n\n<strong>Output</strong>\n[null,null,null,null,-3,null,0,-2]\n\n<strong>Explanation</strong>\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li>\n</ul>\n",
  "likes": 15422,
  "dislikes": 965,
  "stats": {
    "totalAccepted": "2.4M",
    "totalSubmission": "4.1M",
    "totalAcceptedRaw": 2360646,
    "totalSubmissionRaw": 4147492,
    "acRate": "56.9%"
  },
  "topicTags": [
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Design",
      "slug": "design"
    }
  ],
  "metaData": {
    "classname": "MinStack",
    "constructor": {
      "params": []
    },
    "methods": [
      {
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "push"
      },
      {
        "params": [],
        "return": {
          "type": "void"
        },
        "name": "pop"
      },
      {
        "params": [],
        "return": {
          "type": "integer"
        },
        "name": "top"
      },
      {
        "params": [],
        "return": {
          "type": "integer"
        },
        "name": "getMin"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 16
      },
      {
        "taggedByAdmin": true,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 15
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "hyankov",
      "year": 2019,
      "content": "![image](https://assets.leetcode.com/users/hyankov/image_1575252836.png)\\n",
      "voteCount": 1040
    },
    {
      "name": "MOVAPS",
      "year": 2023,
      "content": "With this problem, today I mark the day of solving 100 mediums!",
      "voteCount": 422
    },
    {
      "name": "bikcrum",
      "year": 2022,
      "content": "I would have published a paper if it was possible to retrieve minimum element at O(1). As far as I know the least is log(n) using heap.",
      "voteCount": 368
    },
    {
      "name": "zardo",
      "year": 2023,
      "content": "Am I the only one who thinks the problem should be more clear? They don't say that we do not need to remove the minimun element from the stack, only \"retrieve it\". But how am I suposed to know what \"retrieving an element\" is? It doesn't help that they used \"gets\", \"retrieves\" and \"removes\" in the explanation for three situations. I spent a lot of time trying to figure out a way to remove the minimun element from the stack in constant time.",
      "voteCount": 176
    },
    {
      "name": "lussierjames13",
      "year": 2022,
      "content": "Try associating each value in the stack with a minimum value",
      "voteCount": 124
    },
    {
      "name": "Kreator1",
      "year": 2023,
      "content": "Notice that getMin does not remove it from stack.",
      "voteCount": 119
    },
    {
      "name": "billgewrgoulas",
      "year": 2023,
      "content": "Super happy i could this on my own, excellent problem!",
      "voteCount": 43
    },
    {
      "name": "Dominating_",
      "year": 2023,
      "content": "Stack:             |   MinStack:\\n ---------------------------------------\\n|   4    |           |   -9   |\\n|-------|            |-------|\\n|   0    |           |   -9   |\\n|-------|            |-------|\\n|   -9   |           |   -9   |\\n|-------|            |-------|\\n|   2    |           |   -5   |\\n|-------|            |-------|\\n|   -5   |           |   -5   |\\n|-------|            |-------|\\n|   10   |           |   -5   |\\n|-------|            |-------|\\n|   -2   |           |   -3   |\\n|-------|            |-------|\\n|   8    |           |   -3   |\\n|-------|            |-------|\\n|   -3   |           |   -3   |\\n|-------|            |-------|\\n|   5    |           |   5    |\\n|-------|            |-------|\\n\\nTry implementing using two stacks. One stack keeps track of elements in order, while the other stack keeps track of the minimum elements.\\n\\n LOOK DOWN TO UP ITS A STACK",
      "voteCount": 32
    },
    {
      "name": "felixfunky",
      "year": 2024,
      "content": "What is the point of designing a stack using stack?\nIt's like solving a sorting problem using \"sort()\"",
      "voteCount": 30
    },
    {
      "name": "Rukeith",
      "year": 2018,
      "content": "I submit my solution but get this test fail. I think it is wrong. top should be 0 not -1.\n\n![image](https://s3-lc-upload.s3.amazonaws.com/users/rukeith/image_1519952989.png)\n",
      "voteCount": 16
    }
  ]
}
