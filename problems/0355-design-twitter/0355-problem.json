{
  "category": "",
  "id": "355",
  "name": "Design Twitter",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/design-twitter/",
  "slug": "design-twitter",
  "isPaidOnly": false,
  "tags": [
    "Hash Table",
    "Linked List",
    "Design",
    "Heap (Priority Queue)"
  ],
  "similar_questions": [
    {
      "title": "Design a File Sharing System",
      "difficulty": "Medium",
      "slug": "design-a-file-sharing-system"
    }
  ],
  "questionId": "355",
  "questionFrontendId": "355",
  "title": "Design Twitter",
  "titleSlug": "design-twitter",
  "content": "<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the <code>10</code> most recent tweets in the user&#39;s news feed.</p>\n\n<p>Implement the <code>Twitter</code> class:</p>\n\n<ul>\n\t<li><code>Twitter()</code> Initializes your twitter object.</li>\n\t<li><code>void postTweet(int userId, int tweetId)</code> Composes a new tweet with ID <code>tweetId</code> by the user <code>userId</code>. Each call to this function will be made with a unique <code>tweetId</code>.</li>\n\t<li><code>List&lt;Integer&gt; getNewsFeed(int userId)</code> Retrieves the <code>10</code> most recent tweet IDs in the user&#39;s news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be <strong>ordered from most recent to least recent</strong>.</li>\n\t<li><code>void follow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started following the user with ID <code>followeeId</code>.</li>\n\t<li><code>void unfollow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started unfollowing the user with ID <code>followeeId</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Twitter&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;follow&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;unfollow&quot;, &quot;getNewsFeed&quot;]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\n<strong>Output</strong>\n[null, null, [5], null, null, [6, 5], null, [5]]\n\n<strong>Explanation</strong>\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li>\n\t<li><code>0 &lt;= tweetId &lt;= 10<sup>4</sup></code></li>\n\t<li>All the tweets have <strong>unique</strong> IDs.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>postTweet</code>, <code>getNewsFeed</code>, <code>follow</code>, and <code>unfollow</code>.</li>\n\t<li>A user cannot follow himself.</li>\n</ul>\n",
  "likes": 4431,
  "dislikes": 628,
  "stats": {
    "totalAccepted": "284.5K",
    "totalSubmission": "656.7K",
    "totalAcceptedRaw": 284506,
    "totalSubmissionRaw": 656698,
    "acRate": "43.3%"
  },
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Linked List",
      "slug": "linked-list"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Heap (Priority Queue)",
      "slug": "heap-priority-queue"
    }
  ],
  "metaData": {
    "classname": "Twitter",
    "constructor": {
      "params": []
    },
    "methods": [
      {
        "params": [
          {
            "type": "integer",
            "name": "userId"
          },
          {
            "type": "integer",
            "name": "tweetId"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "postTweet"
      },
      {
        "params": [
          {
            "type": "integer",
            "name": "userId"
          }
        ],
        "return": {
          "type": "list<integer>"
        },
        "name": "getNewsFeed"
      },
      {
        "params": [
          {
            "type": "integer",
            "name": "followerId"
          },
          {
            "type": "integer",
            "name": "followeeId"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "follow"
      },
      {
        "params": [
          {
            "type": "integer",
            "name": "followerId"
          },
          {
            "type": "integer",
            "name": "followeeId"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "unfollow"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true
  },
  "discussion_posts": [
    {
      "name": "Bl4ckBurn",
      "year": 2023,
      "content": "More like design X",
      "voteCount": 253
    },
    {
      "name": "Nurbolatsnk",
      "year": 2023,
      "content": "Is Elon going to hire me if I solve this question?)",
      "voteCount": 212
    },
    {
      "name": "candi-project",
      "year": 2022,
      "content": "This should be hard not medium.\\nA lot of edge cases need to be considered.",
      "voteCount": 179
    },
    {
      "name": "cartesPerforees",
      "year": 2023,
      "content": "Damn I feel like all interview questions should be like that. I loved this problem because:\\n- It is an object oriented design question which is already much closer to what you might actually do in a job than 99% problems \\n- there are so many ways to approach it ! I\\'ve coded 3 different solutions to it which all have different perks and downsides (some of them put all the complexity in the post operation, some of them in the getnewsfeed, etc...). \\n- It lets you use a variety of different data structures (I\\'ve used linked list, queue, heap, and I\\'m sure you could come up with other ways)\\n- it actually feels like a relevant problem that you\\'re farely likely to encounter some variation of when coding real solutions. Not like a goddamn palindrome thing. Why, oh, why are problem makers fetishizing palindromes so much?",
      "voteCount": 178
    },
    {
      "name": "jaykishan_dev",
      "year": 2023,
      "content": "I just stucked after seeing this :\\')\\nhow many of you also....\\n:) :) :)\\n\\n",
      "voteCount": 68
    },
    {
      "name": "LiQuanlai",
      "year": 2016,
      "content": "there is a case where a user unfollows himself, and in the end he should still be seeing his posts.\\nthis case wasted me a long time !",
      "voteCount": 49
    },
    {
      "name": "hatemelseidy",
      "year": 2018,
      "content": "As you may know, there are 2 main approaches for this design:\\n1. The first has some distributed complexity in all the operations and an O(1) getNewsFeed.\\n2. The second is the O(1) for all operations and most of the complexity is the getNewsFeed.\\n\\n**Which is better and why?**\\n\\nI beleive that this is not an algorithmic/design problem this is a UX problem. Regardless of the actual complexities. Let\\'s say that we have 2 users the first has 1M followers (people following him/her), let\\'s call this user **celebrity** and the second user is following 1M other users and let\\'s call this user **normal**.\\n\\n* **Design 1 => The O(1) getNewsFeed.**\\nWhile both of the users will have a very fast and nice getNewsFeed experience let\\'s think about posting a tweet.\\n  * The **celerity** will have a bad experience whenever he is posting a tweet and that\\'s because he/she has a lot of followers and his new tweet will need somehow to be published to all the news feeds of the 1M followers.\\n  * The **normal** user will post a tweet in almost no time because he has very few or no followers.\\n\\n* **Design 2 => The Complex getNewsFeed.**\\nThis time both of the users will enjoy a fantastic O(1) post tweet, but then when it comes to getting the news feed.\\n  * The **celebrity** will is following few others and aggregating his/her news feed won\\'t take long.\\n  * Although the **normal** user who is following 1M users will need sometime to aggregate his very complex news feed.\\n\\nNow, if you took a closer look at the previous comparison you will find that the user who has taken explicit actions to follow lots and lots of people is making his/her feed complex, he/she unfollows people it becomse simpler. Although the celebrity who is not following a lot is getting better experience because he/she has not taken explicit actions to make other people follow him.\\n\\nIn other words, the first design is somehow punishing the celebrities for getting more and more followers while the second design is punishing the users who follow a lot of people.\\n\\n***Which punishment would you choose for your users? :) :)***\\n\\n",
      "voteCount": 39
    },
    {
      "name": "RedHessian",
      "year": 2023,
      "content": "Ok, but is the tweetId that the input adds always going to be bigger than that of the previous input? That\\'s important and not mentioned.",
      "voteCount": 37
    },
    {
      "name": "webguru77777",
      "year": 2023,
      "content": "Some test cases:\n\n```\n[\"Twitter\", \"postTweet\", \"unfollow\", \"getNewsFeed\", \"follow\", \"unfollow\", \"unfollow\", \"follow\", \"postTweet\", \"unfollow\", \"getNewsFeed\"]\n```\n```\n[[], [3, 0], [3, 1], [1], [3, 2], [1, 3], [1, 3], [3, 2], [2, 1], [2, 1], [3]]\n```\n```\n[\"Twitter\", \"follow\", \"getNewsFeed\", \"follow\", \"follow\", \"follow\", \"postTweet\", \"getNewsFeed\", \"follow\", \"unfollow\", \"postTweet\", \"getNewsFeed\", \"follow\", \"getNewsFeed\", \"unfollow\", \"postTweet\", \"follow\", \"follow\", \"postTweet\", \"unfollow\", \"getNewsFeed\"]\n```\n```\n[[], [1, 2], [1], [1, 2], [2, 3], [2, 1], [1, 0], [1], [2, 1], [3, 1], [3, 1], [3], [1, 3], [1], [3, 2], [1, 2], [3, 2], [3, 1], [3, 3], [2, 1], [2]]\n```\n```\n[\"Twitter\", \"postTweet\", \"unfollow\", \"getNewsFeed\", \"unfollow\", \"unfollow\", \"postTweet\", \"follow\", \"follow\", \"postTweet\", \"unfollow\", \"postTweet\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"unfollow\", \"getNewsFeed\", \"follow\", \"getNewsFeed\", \"follow\", \"follow\", \"follow\", \"follow\", \"follow\", \"follow\", \"unfollow\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"unfollow\", \"follow\", \"getNewsFeed\", \"getNewsFeed\", \"follow\", \"postTweet\", \"postTweet\", \"unfollow\", \"unfollow\", \"unfollow\", \"unfollow\", \"unfollow\", \"unfollow\", \"postTweet\", \"follow\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\", \"getNewsFeed\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"unfollow\", \"unfollow\", \"follow\", \"getNewsFeed\", \"getNewsFeed\", \"getNewsFeed\", \"unfollow\", \"follow\", \"postTweet\", \"postTweet\", \"follow\", \"follow\", \"follow\", \"unfollow\", \"getNewsFeed\", \"getNewsFeed\", \"getNewsFeed\", \"postTweet\", \"getNewsFeed\", \"postTweet\", \"unfollow\", \"follow\", \"unfollow\", \"postTweet\", \"unfollow\", \"follow\", \"getNewsFeed\", \"postTweet\", \"follow\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\", \"getNewsFeed\", \"getNewsFeed\", \"getNewsFeed\", \"postTweet\", \"getNewsFeed\", \"getNewsFeed\", \"getNewsFeed\", \"getNewsFeed\", \"getNewsFeed\", \"unfollow\", \"postTweet\", \"follow\", \"unfollow\", \"getNewsFeed\", \"unfollow\", \"unfollow\"]\n```\n```\n[[], [2, 0], [5, 1], [5], [4, 2], [2, 5], [4, 1], [2, 4], [1, 4], [3, 2], [2, 4], [3, 3], [3, 4], [5], [4, 2], [5, 5], [1, 3], [1], [2, 3], [3], [4, 2], [3, 5], [3, 1], [2, 4], [3, 2], [4, 3], [5, 2], [4, 2], [2, 6], [3], [2, 4], [3, 4], [3, 5], [2], [4], [1, 5], [2, 7], [4, 8], [2, 4], [4, 1], [3, 1], [5, 2], [3, 2], [5, 2], [3, 9], [2, 1], [3], [1, 2], [2], [1], [3, 10], [5], [4, 5], [5, 3], [4, 2], [5, 2], [2], [1], [2], [1, 5], [5, 2], [2, 11], [4, 12], [5, 1], [4, 2], [5, 2], [4, 3], [1], [2], [3], [5, 13], [3], [5, 14], [2, 4], [2, 1], [2, 1], [2, 15], [2, 5], [1, 2], [4], [5, 16], [2, 3], [2], [2, 3], [2], [3], [4], [3], [2, 17], [1], [2], [3], [3], [1], [2, 1], [3, 18], [4, 3], [1, 4], [1], [1, 5], [2, 1]]\n```\n\nCode to generate test cases:\n\n```\nmax_user_id = 5\nops_count = 100\nops = [\"Twitter\"]\nargs = [[]]\ntweetId = 0\n\nfor i in range(ops_count):\n    op = random.choice([\"getNewsFeed\", \"follow\", \"unfollow\", \"postTweet\"])\n    ops.append(op)\n\nfor i in range(1, ops_count+1):\n    op = ops[i]\n    if op == \"getNewsFeed\":\n        args.append([random.randint(1, max_user_id)])\n    elif op == \"follow\" or op == \"unfollow\":\n        follower_id = random.randint(1, max_user_id)\n        unfollower_id = follower_id\n        while unfollower_id == follower_id:\n            unfollower_id = random.randint(1, max_user_id)\n        args.append([follower_id, unfollower_id])\n    elif op == \"postTweet\":\n        args.append([random.randint(1, max_user_id), tweetId])\n        tweetId += 1\nprint(json.dumps(ops))\nprint(json.dumps(args))\n```",
      "voteCount": 23
    },
    {
      "name": "bashyal",
      "year": 2023,
      "content": "This is such an amazing problem ? Are there anything similar to this ",
      "voteCount": 21
    }
  ]
}
