{
  "category": "",
  "id": "895",
  "name": "Maximum Frequency Stack",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/maximum-frequency-stack/",
  "slug": "maximum-frequency-stack",
  "isPaidOnly": false,
  "tags": [
    "Hash Table",
    "Stack",
    "Design",
    "Ordered Set"
  ],
  "similar_questions": [],
  "questionId": "931",
  "questionFrontendId": "895",
  "title": "Maximum Frequency Stack",
  "titleSlug": "maximum-frequency-stack",
  "content": "<p>Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.</p>\n\n<p>Implement the <code>FreqStack</code> class:</p>\n\n<ul>\n\t<li><code>FreqStack()</code> constructs an empty frequency stack.</li>\n\t<li><code>void push(int val)</code> pushes an integer <code>val</code> onto the top of the stack.</li>\n\t<li><code>int pop()</code> removes and returns the most frequent element in the stack.\n\t<ul>\n\t\t<li>If there is a tie for the most frequent element, the element closest to the stack&#39;s top is removed and returned.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;FreqStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\n<strong>Output</strong>\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\n\n<strong>Explanation</strong>\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls will be made to <code>push</code> and <code>pop</code>.</li>\n\t<li>It is guaranteed that there will be at least one element in the stack before calling <code>pop</code>.</li>\n</ul>\n",
  "likes": 4860,
  "dislikes": 77,
  "stats": {
    "totalAccepted": "207.5K",
    "totalSubmission": "312.5K",
    "totalAcceptedRaw": 207512,
    "totalSubmissionRaw": 312491,
    "acRate": "66.4%"
  },
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Ordered Set",
      "slug": "ordered-set"
    }
  ],
  "metaData": {
    "classname": "FreqStack",
    "maxbytesperline": 200000,
    "constructor": {
      "params": []
    },
    "methods": [
      {
        "name": "push",
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "pop",
        "params": [],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    }
  },
  "discussion_posts": [
    {
      "name": "him500",
      "year": 2022,
      "content": "After attempting this question I surely can say that only constant in life is suffering.",
      "voteCount": 100
    },
    {
      "name": "kamleshchauhan",
      "year": 2022,
      "content": "It\\'s harder than it looks :) ",
      "voteCount": 18
    },
    {
      "name": "x0fzZhfYXo",
      "year": 2024,
      "content": "This question was easier than I thought ... Protip: just have memory in ass and push everything into heap, everything.",
      "voteCount": 12
    },
    {
      "name": "codeLearner012",
      "year": 2024,
      "content": "Tip - Think towards multiple stacks",
      "voteCount": 11
    },
    {
      "name": "LeetCode",
      "year": 2022,
      "content": "This problem is the Daily LeetCoding Challenge for March, Day 19.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **üìå Do you want to learn the problem thoroughly?**\n  Read [**‚≠ê  LeetCode Official Solution‚≠ê**](https://leetcode.com/problems/maximum-frequency-stack/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Stack of Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
      "voteCount": 10
    },
    {
      "name": "paradoxtown",
      "year": 2024,
      "content": "Simple than expectation if using priority queue (storing val, current freq, and current \"time\").",
      "voteCount": 7
    },
    {
      "name": "Maninder_4",
      "year": 2023,
      "content": "Brute force is accepted, Wow!",
      "voteCount": 6
    },
    {
      "name": "raunakbaliyan1801",
      "year": 2025,
      "content": "Maximum Frequency Stack\\nhere,\\nFrequency = Map\\nStack = Stack\\n\\nSolution is in Title",
      "voteCount": 3
    },
    {
      "name": "jerryji040506",
      "year": 2025,
      "content": "This question is smiliar to LFU cache. ",
      "voteCount": 3
    },
    {
      "name": "Akash124124",
      "year": 2025,
      "content": "Last Testcase Failed---------------------------------->\\n```\\n[\"FreqStack\",\"push\",\"push\",\"push\",\"push\",\"pop\", \"pop\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\"]\\n[[],[1], [1], [1], [2], [], [], [2], [2], [1], [], [], []]\\n```",
      "voteCount": 3
    }
  ]
}
