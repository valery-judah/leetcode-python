{
  "category": "",
  "id": "353",
  "name": "Design Snake Game",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/design-snake-game/",
  "slug": "design-snake-game",
  "isPaidOnly": true,
  "tags": [
    "Array",
    "Hash Table",
    "Design",
    "Queue",
    "Simulation"
  ],
  "similar_questions": [],
  "questionId": "353",
  "questionFrontendId": "353",
  "title": "Design Snake Game",
  "titleSlug": "design-snake-game",
  "content": "<p>Design a <a href=\"https://en.wikipedia.org/wiki/Snake_(video_game)\" target=\"_blank\">Snake game</a> that is played on a device with screen size <code>height x width</code>. <a href=\"http://patorjk.com/games/snake/\" target=\"_blank\">Play the game online</a> if you are not familiar with the game.</p>\n\n<p>The snake is initially positioned at the top left corner <code>(0, 0)</code> with a length of <code>1</code> unit.</p>\n\n<p>You are given an array <code>food</code> where <code>food[i] = (r<sub>i</sub>, c<sub>i</sub>)</code> is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game&#39;s score both increase by <code>1</code>.</p>\n\n<p>Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.</p>\n\n<p>When a piece of food appears on the screen, it is <strong>guaranteed</strong> that it will not appear on a block occupied by the snake.</p>\n\n<p>The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies <strong>after</strong> moving (i.e. a snake of length 4 cannot run into itself).</p>\n\n<p>Implement the <code>SnakeGame</code> class:</p>\n\n<ul>\n\t<li><code>SnakeGame(int width, int height, int[][] food)</code> Initializes the object with a screen of size <code>height x width</code> and the positions of the <code>food</code>.</li>\n\t<li><code>int move(String direction)</code> Returns the score of the game after applying one <code>direction</code> move by the snake. If the game is over, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/13/snake.jpg\" style=\"width: 800px; height: 302px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;SnakeGame&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;, &quot;move&quot;]\n[[3, 2, [[1, 2], [0, 1]]], [&quot;R&quot;], [&quot;D&quot;], [&quot;R&quot;], [&quot;U&quot;], [&quot;L&quot;], [&quot;U&quot;]]\n<strong>Output</strong>\n[null, 0, 0, 1, 1, 2, -1]\n\n<strong>Explanation</strong>\nSnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);\nsnakeGame.move(&quot;R&quot;); // return 0\nsnakeGame.move(&quot;D&quot;); // return 0\nsnakeGame.move(&quot;R&quot;); // return 1, snake eats the first piece of food. The second piece of food appears at (0, 1).\nsnakeGame.move(&quot;U&quot;); // return 1\nsnakeGame.move(&quot;L&quot;); // return 2, snake eats the second food. No more food appears.\nsnakeGame.move(&quot;U&quot;); // return -1, game over because snake collides with border\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= width, height &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= food.length &lt;= 50</code></li>\n\t<li><code>food[i].length == 2</code></li>\n\t<li><code>0 &lt;= r<sub>i</sub> &lt; height</code></li>\n\t<li><code>0 &lt;= c<sub>i</sub> &lt; width</code></li>\n\t<li><code>direction.length == 1</code></li>\n\t<li><code>direction</code> is <code>&#39;U&#39;</code>, <code>&#39;D&#39;</code>, <code>&#39;L&#39;</code>, or <code>&#39;R&#39;</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>move</code>.</li>\n</ul>\n",
  "likes": 1003,
  "dislikes": 349,
  "stats": {
    "totalAccepted": "101K",
    "totalSubmission": "253.6K",
    "totalAcceptedRaw": 100978,
    "totalSubmissionRaw": 253649,
    "acRate": "39.8%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Queue",
      "slug": "queue"
    },
    {
      "name": "Simulation",
      "slug": "simulation"
    }
  ],
  "metaData": {
    "classname": "SnakeGame",
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "width"
        },
        {
          "type": "integer",
          "name": "height"
        },
        {
          "type": "integer[][]",
          "name": "food"
        }
      ]
    },
    "methods": [
      {
        "params": [
          {
            "type": "string",
            "name": "direction"
          }
        ],
        "name": "move",
        "return": {
          "type": "integer"
        }
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true,
    "manual": true
  },
  "discussion_posts": [
    {
      "name": "yavinci",
      "year": 2023,
      "content": "Who also think the snake looks like a tree?",
      "voteCount": 29
    },
    {
      "name": "sunilrajxyz",
      "year": 2023,
      "content": "for the test case [[2,2,[[0,1],[1,1],[1,0],[0,0]]],[\"R\"],[\"D\"],[\"L\"],[\"U\"]], the expected value is [null,1,2,3,4]\\nShouldn\\'t it be [null,1,2,3,-1] ?\\nThere are only 4 blocks and after consuming the third food, the snake size is already 4. ",
      "voteCount": 22
    },
    {
      "name": "maimaihu",
      "year": 2016,
      "content": "Why the output is : [null,0,1,1,1,1,2,2,2,2,3,4,4,4,4,-1] instead of [null,0,1,1,1,1,2,2,2,2,3,4,4,4,4,4]\\nfor case: \\n[\"SnakeGame\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\"]\\n[[3,3,[[2,0],[0,0],[0,2],[0,1],[2,2],[0,1]]],[\"D\"],[\"D\"],[\"R\"],[\"U\"],[\"U\"],[\"L\"],[\"D\"],[\"R\"],[\"R\"],[\"U\"],[\"L\"],[\"L\"],[\"D\"],[\"R\"],[\"U\"]]\\n\\nI think the last return value of move should still be 4, why it is out the boundary??",
      "voteCount": 16
    },
    {
      "name": "pi2019",
      "year": 2023,
      "content": "Fix the bad test case, the following output should result in snake biting itself on last move, hence the out come should be `null,1,2,3,-1]` and NOT `[null,1,2,3,4]`\\n\\n```\\n[\"SnakeGame\", \"move\", \"move\", \"move\", \"move\"]\\n[[2,2,[[0,1],[1,1],[1,0],[0,0]]],[\"R\"],[\"D\"],[\"L\"],[\"U\"]]\\n```",
      "voteCount": 12
    },
    {
      "name": "Tony2018",
      "year": 2023,
      "content": "So many questions on certain cases I wish were provided on here. (As of this comment the constraints or description do not answer these)\n - Is food[i] unique? So food = [[1,2],[0,3],[1,2]] would be invalid?\n- What happens if we run out of food? Are we guaranteed food.length == width*height?\n  - Do we just keep moving until the player loses?\n- What do we do if the next food item lands on an index that is occupied by the snakes body?\n  - Do we skip this food and move to one where the space is unoccupied? \n     - What if all remaining food locations are shared by the snakes body?\n  - So can a space contain both the snake's body and the food?\n - Does the tail move before the head?\n    - So if yes to the last two, then if you time it just right, if the snake's tail end and food share a space and the snake's head moves to the food next turn missing the tail by one space, essentially forming a loop. But then the snake grows by 1, does that mean the tail grew back onto the space it previously occupied?\n       - Does the snake die in this case?\n\nI'm just gonna chuck along and do the problem. I don't even know if the test cases even cover these scenarios but it woulda been nice. If anyone would like to answer these I'm sure it'll help future people tackling this problem.\n",
      "voteCount": 11
    },
    {
      "name": "humblejumbo",
      "year": 2024,
      "content": "They should make it clear if the snake eats the food, then whether it\\'s length increases from front or back?",
      "voteCount": 8
    },
    {
      "name": "concept_drift",
      "year": 2016,
      "content": "Suppose we have the following state:\\n\\n|  S  |  T  | \\n\\n|  S  |  H  |\\n\\nS is the body of the snake, H is the head of the snake, and T is the tail of the snake.\\n\\nIf I want to move the head to the Tail position (i.e. an 'U' move), it is a valid move ONLY IF there is NO food at the tail position.\\ni.e. the snake doesn't remove its tail if it eats food\\n\\nHope this could help anyone who is struggling on the last test case!",
      "voteCount": 5
    },
    {
      "name": "sushantb91",
      "year": 2025,
      "content": "Incorrect Test case #437/446\\nThe test case seems incorrect:\\n[\"SnakeGame\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\"]\\n[[3,3,[[2,0],[0,0],[0,2],[2,2]]],[\"D\"],[\"D\"],[\"R\"],[\"U\"],[\"U\"],[\"L\"],[\"D\"],[\"R\"],[\"R\"],[\"U\"],[\"L\"],[\"D\"]]\\nExpected:\\n[null,0,1,1,1,1,2,2,2,2,3,3,3]\\n\\nOutput from program (all output same except for last, as the snake would bite itself, as the last position evaluates to [1,1] and since its\\'s already in cells [1,1], [1,2],[0,2],[0,1]):\\n[null,0,1,1,1,1,2,2,2,2,3,3,-1]\\n\\nAnyone got passed this test case?\\n\\n",
      "voteCount": 3
    },
    {
      "name": "jacoboy_cmu",
      "year": 2023,
      "content": "The last test case looks wrong\\n `[\"SnakeGame\", \"move\", \"move\", \"move\", \"move\"]`\\n`[[2,2,[[0,1],[1,1],[1,0],[0,0]]],[\"R\"],[\"D\"],[\"L\"],[\"U\"]]`\\n\\nThe final food appears on the snake.\\n\\n",
      "voteCount": 2
    },
    {
      "name": "inversion39",
      "year": 2023,
      "content": "In the given example, after the second to last move, the snake already gets all the eggs. Why does the user still can make moves? Should we just return the number of eggs and end the game?",
      "voteCount": 2
    }
  ]
}
