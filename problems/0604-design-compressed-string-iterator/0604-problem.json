{
  "category": "",
  "id": "604",
  "name": "Design Compressed String Iterator",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/design-compressed-string-iterator/",
  "slug": "design-compressed-string-iterator",
  "isPaidOnly": true,
  "tags": [
    "Array",
    "String",
    "Design",
    "Iterator"
  ],
  "similar_questions": [
    {
      "title": "LRU Cache",
      "difficulty": "Medium",
      "slug": "lru-cache"
    },
    {
      "title": "String Compression",
      "difficulty": "Medium",
      "slug": "string-compression"
    }
  ],
  "questionId": "604",
  "questionFrontendId": "604",
  "title": "Design Compressed String Iterator",
  "titleSlug": "design-compressed-string-iterator",
  "content": "<p>Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.</p>\n\n<p>Implement the&nbsp;StringIterator class:</p>\n\n<ul>\n\t<li><code>next()</code>&nbsp;Returns <strong>the next character</strong> if the original string still has uncompressed characters, otherwise returns a <strong>white space</strong>.</li>\n\t<li><code>hasNext()</code>&nbsp;Returns true if&nbsp;there is any letter needs to be uncompressed in the original string, otherwise returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;StringIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;]\n[[&quot;L1e2t1C1o1d1e1&quot;], [], [], [], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, &quot;L&quot;, &quot;e&quot;, &quot;e&quot;, &quot;t&quot;, &quot;C&quot;, &quot;o&quot;, true, &quot;d&quot;, true]\n\n<strong>Explanation</strong>\nStringIterator stringIterator = new StringIterator(&quot;L1e2t1C1o1d1e1&quot;);\nstringIterator.next(); // return &quot;L&quot;\nstringIterator.next(); // return &quot;e&quot;\nstringIterator.next(); // return &quot;e&quot;\nstringIterator.next(); // return &quot;t&quot;\nstringIterator.next(); // return &quot;C&quot;\nstringIterator.next(); // return &quot;o&quot;\nstringIterator.hasNext(); // return True\nstringIterator.next(); // return &quot;d&quot;\nstringIterator.hasNext(); // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;compressedString.length &lt;= 1000</code></li>\n\t<li><code>compressedString</code> consists of lower-case an upper-case English letters and digits.</li>\n\t<li>The number of a single character repetitions in&nbsp;<code>compressedString</code> is in the range <code>[1, 10^9]</code></li>\n\t<li>At most <code>100</code> calls will be made to <code>next</code> and <code>hasNext</code>.</li>\n</ul>\n",
  "likes": 455,
  "dislikes": 166,
  "stats": {
    "totalAccepted": "37.9K",
    "totalSubmission": "94.3K",
    "totalAcceptedRaw": 37922,
    "totalSubmissionRaw": 94291,
    "acRate": "40.2%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Iterator",
      "slug": "iterator"
    }
  ],
  "metaData": {
    "classname": "StringIterator",
    "maxbytesperline": 200000,
    "constructor": {
      "params": [
        {
          "type": "string",
          "name": "compressedString"
        }
      ]
    },
    "methods": [
      {
        "name": "next",
        "params": [],
        "return": {
          "type": "character"
        }
      },
      {
        "name": "hasNext",
        "params": [],
        "return": {
          "type": "boolean"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    }
  },
  "discussion_posts": [
    {
      "name": "whglamrock",
      "year": 2019,
      "content": "If the requirement doesn\\'t allow to directly load uncompress the string, the question should not be easy level.",
      "voteCount": 9
    },
    {
      "name": "omrocks",
      "year": 2024,
      "content": "Marking easy is to make us fool",
      "voteCount": 6
    },
    {
      "name": "leastcode06",
      "year": 2023,
      "content": "This is Medium level question",
      "voteCount": 6
    },
    {
      "name": "bahbahojo",
      "year": 2017,
      "content": "![0_1501131089532_Screen Shot 2017-07-26 at 9.50.45 PM.png](/assets/uploads/files/1501131090033-screen-shot-2017-07-26-at-9.50.45-pm-resized.png)",
      "voteCount": 4
    },
    {
      "name": "YusenPeng",
      "year": 2023,
      "content": "Did anyone also get \"memory limit Exceeded\"?",
      "voteCount": 3
    },
    {
      "name": "Dattapm",
      "year": 2025,
      "content": "i didnt understand the question at all.  Some example for hasNext() to be False should have been given.",
      "voteCount": 2
    },
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "since at most 100 calls will be made to next, you only have to uncompress the string up to length 100. leave out all the rest ",
      "voteCount": 1
    },
    {
      "name": "Satansoft",
      "year": 2025,
      "content": "It\\'s not just decompressing string with iterating through and it\\'s definitely not **Easy** one, it\\'s operating with letters and its counts on a place, so highly recomment convert string to array, combine counts together as single numbers and reverse array to work in a stack flow.",
      "voteCount": 1
    },
    {
      "name": "thirstysquirtle",
      "year": 2025,
      "content": "fun easy",
      "voteCount": 1
    },
    {
      "name": "tin_le",
      "year": 2024,
      "content": "Hint : use a deque",
      "voteCount": 1
    }
  ]
}
