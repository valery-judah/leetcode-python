{
  "category": "",
  "id": "127",
  "name": "Word Ladder",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/word-ladder/",
  "slug": "word-ladder",
  "isPaidOnly": false,
  "tags": [
    "Hash Table",
    "String",
    "Breadth-First Search"
  ],
  "similar_questions": [
    {
      "title": "Word Ladder II",
      "difficulty": "Hard",
      "slug": "word-ladder-ii"
    },
    {
      "title": "Minimum Genetic Mutation",
      "difficulty": "Medium",
      "slug": "minimum-genetic-mutation"
    },
    {
      "title": "Words Within Two Edits of Dictionary",
      "difficulty": "Medium",
      "slug": "words-within-two-edits-of-dictionary"
    }
  ],
  "questionId": "127",
  "questionFrontendId": "127",
  "title": "Word Ladder",
  "titleSlug": "word-ladder",
  "content": "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>\n\t<li><code>s<sub>k</sub> == endWord</code></li>\n</ul>\n\n<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or </em><code>0</code><em> if no such sequence exists.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> One shortest transformation sequence is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; cog&quot;, which is 5 words long.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beginWord.length &lt;= 10</code></li>\n\t<li><code>endWord.length == beginWord.length</code></li>\n\t<li><code>1 &lt;= wordList.length &lt;= 5000</code></li>\n\t<li><code>wordList[i].length == beginWord.length</code></li>\n\t<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>\n\t<li><code>beginWord != endWord</code></li>\n\t<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>\n</ul>\n",
  "likes": 13042,
  "dislikes": 1944,
  "stats": {
    "totalAccepted": "1.4M",
    "totalSubmission": "3.3M",
    "totalAcceptedRaw": 1440629,
    "totalSubmissionRaw": 3301533,
    "acRate": "43.6%"
  },
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Breadth-First Search",
      "slug": "breadth-first-search"
    }
  ],
  "metaData": {
    "name": "ladderLength",
    "params": [
      {
        "name": "beginWord",
        "type": "string"
      },
      {
        "name": "endWord",
        "type": "string"
      },
      {
        "name": "wordList",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 22
      },
      {
        "taggedByAdmin": true,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 16
      },
      {
        "taggedByAdmin": true,
        "name": "LinkedIn",
        "slug": "linkedin",
        "timesEncountered": 16
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "Margarita00",
      "year": 2015,
      "content": "I got the follow error. I believe the expected answer is wrong. \\nFrom \"a\" to \"c\", only one step is needed: \"a\"->\"c\". Did I misunderstand the problem?\\n\\nInput:\\t\"a\", \"c\", [\"a\",\"b\",\"c\"]\\nOutput:\\t1\\nExpected:\\t2",
      "voteCount": 93
    },
    {
      "name": "dawei2",
      "year": 2015,
      "content": "Two key parts in the BFS algorithms must be taken care of, otherwise it will lead to TLE:\\n\\n 1. Instead of looping through the whole dict, change the testing word character by character will save a lot of time. This is a good trick;\\n\\n 2. Maintaining a hashset to check visited words will result in TLE. Remove the visited nodes from dict will save some running time. I do not like this part. If you did not make a copy of the dict, the algorithm will change the original dict, which make me feel bad. If you made a copy, you did not save any space compare to using a hash set.",
      "voteCount": 70
    },
    {
      "name": "dsapelnikov",
      "year": 2023,
      "content": "It is a complete copy of the problem 433. Minimum Genetic Mutation,\\nbut with a little bit stricter runtime requirements.\\n",
      "voteCount": 54
    },
    {
      "name": "user2531u",
      "year": 2019,
      "content": "What is the intuition to use graph search (BFS) over a recursion/backtracking method?",
      "voteCount": 44
    },
    {
      "name": "wilderfield",
      "year": 2021,
      "content": "I hate this question...\\n\\nThe only difficult part is determining the edge relationships between words.\\n\\nOtherwise its just BFS.",
      "voteCount": 24
    },
    {
      "name": "sijoxavier89",
      "year": 2022,
      "content": "\"leet\"\\n\"code\"\\n[\"lest\",\"leet\",\"lose\",\"code\",\"lode\",\"robe\",\"lost\"]\\n\\nshould the output be 5 or 6?\\n\\nleet -> lest -> lose -> lode -> code\\n\\nleet -> lest -> lost -> lose -> lode -> code ?",
      "voteCount": 21
    },
    {
      "name": "towhid",
      "year": 2017,
      "content": "I think there is a temporary glitch in the system. Anybody from the admin team could please look at the issue. Here is the screen shot of showing the wrong answer of the given example:![0_1487056716578_Screen Shot 2017-02-13 at 11.12.08 PM.png](/uploads/files/1487056720066-screen-shot-2017-02-13-at-11.12.08-pm.png)",
      "voteCount": 21
    },
    {
      "name": "cdeng0",
      "year": 2018,
      "content": "Why the result for the following test case is 2 instead of 1:\\n\"a\"\\n\"c\"\\n[\"a\",\"b\",\"c\"]\\n\\n",
      "voteCount": 19
    },
    {
      "name": "shirleyzlh2010",
      "year": 2015,
      "content": "Did I misunderstand the question? Why the expected output is 2? We can just change char 'a' to 'c' in one step. Shouldn't the output be 1?",
      "voteCount": 19
    },
    {
      "name": "bhoumick",
      "year": 2018,
      "content": "Getting a wrong answer for below input while submitting my solution. \\nInput:\\n\"a\"\\n\"c\"\\n[\"a\",\"b\",\"c\"]\\nOutput:\\n1\\nExpected:\\n2\\n\\nHow the expected 2 ?  Directly transform \"a\"->\"c\". so 1 level.\\n",
      "voteCount": 15
    }
  ]
}
