{
  "category": "",
  "id": "1213",
  "name": "Intersection of Three Sorted Arrays",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/intersection-of-three-sorted-arrays/",
  "slug": "intersection-of-three-sorted-arrays",
  "isPaidOnly": true,
  "tags": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Counting"
  ],
  "similar_questions": [
    {
      "title": "Intersection of Two Arrays",
      "difficulty": "Easy",
      "slug": "intersection-of-two-arrays"
    },
    {
      "title": "Intersection of Multiple Arrays",
      "difficulty": "Easy",
      "slug": "intersection-of-multiple-arrays"
    }
  ],
  "questionId": "1149",
  "questionFrontendId": "1213",
  "title": "Intersection of Three Sorted Arrays",
  "titleSlug": "intersection-of-three-sorted-arrays",
  "content": "<p>Given three integer arrays <code>arr1</code>, <code>arr2</code> and <code>arr3</code>&nbsp;<strong>sorted</strong> in <strong>strictly increasing</strong> order, return a sorted array of <strong>only</strong>&nbsp;the&nbsp;integers that appeared in <strong>all</strong> three arrays.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]\n<strong>Output:</strong> [1,5]\n<strong>Explanation: </strong>Only 1 and 5 appeared in the three arrays.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length, arr3.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr1[i], arr2[i], arr3[i] &lt;= 2000</code></li>\n</ul>\n",
  "likes": 616,
  "dislikes": 26,
  "stats": {
    "totalAccepted": "100.9K",
    "totalSubmission": "126K",
    "totalAcceptedRaw": 100894,
    "totalSubmissionRaw": 126025,
    "acRate": "80.1%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Counting",
      "slug": "counting"
    }
  ],
  "metaData": {
    "name": "arraysIntersection",
    "params": [
      {
        "name": "arr1",
        "type": "integer[]"
      },
      {
        "name": "arr2",
        "type": "integer[]"
      },
      {
        "name": "arr3",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    }
  },
  "discussion_posts": [
    {
      "name": "njbrown180",
      "year": 2024,
      "content": "It may be lost on some, because it was certainly lost on me initially, but the arrays are `strictly increasing`, i.e. there are no duplicate elements in any array.",
      "voteCount": 7
    },
    {
      "name": "0p3r4t0r",
      "year": 2024,
      "content": "I\\'m sure we all feel sometimes that leetcode problems are total trivia and a waste of time, but I really think this is a great problem. There are many ways to solve it, and if you can come up with all the different ways, it demonstrates a lot of algorithm knowledge.",
      "voteCount": 2
    },
    {
      "name": "Satansoft",
      "year": 2025,
      "content": "Forgotten part of constraints `arr1.length == arr2.length == arr3.length`.\\n\\nAs it\\'s pretty standard problem for Hash Map, I\\'m surprized to read about BST and some 3 pointers approaches \\uD83D\\uDE06",
      "voteCount": 1
    },
    {
      "name": "jerryji040506",
      "year": 2024,
      "content": "The 3 pointer approach is eye-opening ... ",
      "voteCount": 1
    },
    {
      "name": "mshoosterman",
      "year": 2024,
      "content": "(This comment contains minor spoilers)\\n\\nSuper easy solution: \\nCombine into 1 array, sort it, and find all elements which occur 3 times. \\n\\nnormal solution: \\n3 pointer. \\n\\nHarder solution: \\nclean 3 pointer. \\n\\nid highly recommend after writing a 3 pointer solution, to try and clean up your code to make it as clean as you can. Try to see if there is a straightforward way of doing it without any nested if statements. ",
      "voteCount": 1
    },
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "beautiful 3 pointer problem here",
      "voteCount": 0
    },
    {
      "name": "am_pm_",
      "year": 2024,
      "content": "nice and easy to play with binary search here",
      "voteCount": 0
    },
    {
      "name": "larzzondev",
      "year": 2024,
      "content": "intersection from Sets will help, at      the end just cast it as a whole array sorted :]",
      "voteCount": 0
    },
    {
      "name": "LIGHTING_GO",
      "year": 2023,
      "content": "\"&\" can be applied  for \"common elements of lists\" in python.",
      "voteCount": 0
    },
    {
      "name": "rabbit2020",
      "year": 2022,
      "content": "return sorted(list(set(arr1) & set(arr2) & set(arr3)))",
      "voteCount": -2
    }
  ]
}
