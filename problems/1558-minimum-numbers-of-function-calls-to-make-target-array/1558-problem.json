{
  "category": "",
  "id": "1558",
  "name": "Minimum Numbers of Function Calls to Make Target Array",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/minimum-numbers-of-function-calls-to-make-target-array/",
  "slug": "minimum-numbers-of-function-calls-to-make-target-array",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Greedy",
    "Bit Manipulation"
  ],
  "similar_questions": [],
  "questionId": "1662",
  "questionFrontendId": "1558",
  "title": "Minimum Numbers of Function Calls to Make Target Array",
  "titleSlug": "minimum-numbers-of-function-calls-to-make-target-array",
  "content": "<p>You are given an integer array <code>nums</code>. You have an integer array <code>arr</code> of the same length with all values set to <code>0</code> initially. You also have the following <code>modify</code> function:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/10/sample_2_1887.png\" style=\"width: 573px; height: 294px;\" />\n<p>You want to use the modify function to convert <code>arr</code> to <code>nums</code> using the minimum number of calls.</p>\n\n<p>Return <em>the minimum number of function calls to make </em><code>nums</code><em> from </em><code>arr</code>.</p>\n\n<p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\nDouble all the elements: [0, 1] -&gt; [0, 2] -&gt; [0, 4] (2 operations).\nIncrement by 1 (both elements)  [0, 4] -&gt; [1, 4] -&gt; <strong>[1, 5]</strong> (2 operations).\nTotal of operations: 1 + 2 + 2 = 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Increment by 1 (both elements) [0, 0] -&gt; [0, 1] -&gt; [1, 1] (2 operations).\nDouble all the elements: [1, 1] -&gt; <strong>[2, 2]</strong> (1 operation).\nTotal of operations: 2 + 1 = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,5]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> (initial)[0,0,0] -&gt; [1,0,0] -&gt; [1,0,1] -&gt; [2,0,2] -&gt; [2,1,2] -&gt; [4,2,4] -&gt; <strong>[4,2,5]</strong>(nums).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
  "likes": 642,
  "dislikes": 38,
  "stats": {
    "totalAccepted": "24.7K",
    "totalSubmission": "39.3K",
    "totalAcceptedRaw": 24664,
    "totalSubmissionRaw": 39329,
    "acRate": "62.7%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    }
  ],
  "metaData": {
    "name": "minOperations",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "BeginnerLearnerLee",
      "year": 2024,
      "content": "Hint 1: Reverse the question. Think about how many steps to make everything to zero.\nHint 2: Be greedy, when, it is odd, you must remove it anyways, if it is even, take the maximum count of division you did. ",
      "voteCount": 2
    },
    {
      "name": "sarpalmadhav",
      "year": 2025,
      "content": "This is what I would call a really good problem. Doesn\\'t need a lot of coding once cracked, and thoroughly checks bit manipulation understanding. \\n\\nAs a hint, just try thinking how even and odd numbers are formed from a binary representation of `0`\\'s and `1`\\'s.  To form 4 i.e `100` we would left shift 1 twice i.e. multiply by 2 twice and get `100`, but to form 6 i.e. `110` we would need to left shift 1, take a pause and add one more 1 and then left shift. \\n\\nOnce we realize this, it is not difficult to see that (spoiler alert) the multiply by 2 operation we have in the problem is left shift and add operation is adding 1 bit. The greedy element is to realize that each 1 bit in numbers costs one operation NO MATTER WHAT but in one left shift operation we can left shift whole array, hence we can \\'time\\' the left shift operations so that the left shifts in the largest element are utilized for all others as well (This can easily be done by delaying introducing first 1 bit in lesser numbers so that they only get left shifted the desired number of times).",
      "voteCount": 1
    },
    {
      "name": "Hihry",
      "year": 2025,
      "content": "just go reverse of it and use greedy and work up those brain cells",
      "voteCount": 1
    },
    {
      "name": "octochet",
      "year": 2023,
      "content": "I solved this question after half hour of cracking my brain. didn\\'t even look at hints. I\\'m proud of myself. Pretty sure there are better solutions out there but,\\n\\nThis question is a good mix of greedy and bit manipulation. A perfect medium question imo.\\n\\nhints:\\n1. try to reverse the operations to reduce nums to arr. \\n2. try to think in terms of binary representation of numbers. \\n3. we must apply the second op as many times as possible.\\n4. if we use op2 greedily when(or how many time) do we have to use op1?\\n\\nif you are still struggling, see my [Solution](https://leetcode.com/problems/minimum-numbers-of-function-calls-to-make-target-array/solutions/4441190/very-easy-to-understand-code-solution-explained-in-detail-beats-80-time)",
      "voteCount": 1
    },
    {
      "name": "mishania1996",
      "year": 2025,
      "content": "this should be easy",
      "voteCount": 0
    },
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "they could have just told us that we can either add 1 to one element or multiply all by 2, not put the whole damn function down ",
      "voteCount": 0
    },
    {
      "name": "darkhorse007d",
      "year": 2025,
      "content": "Flip the question. \\nEach `1st` operation should be done separately.\\n`2nd` operation can be distributed among all elements. So `2nd-operation-count` for maximum number should be considered.",
      "voteCount": 0
    },
    {
      "name": "raj_g07",
      "year": 2024,
      "content": "Hint \\uD83E\\uDDE0 Just do from nums to arr  \\n        \\uD83D\\uDE01 Return if countzero == nums.size() \\n<<<Happy Coding>>> \\n        ",
      "voteCount": 0
    }
  ]
}
