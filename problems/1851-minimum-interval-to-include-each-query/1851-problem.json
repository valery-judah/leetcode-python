{
  "category": "",
  "id": "1851",
  "name": "Minimum Interval to Include Each Query",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/minimum-interval-to-include-each-query/",
  "slug": "minimum-interval-to-include-each-query",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Binary Search",
    "Line Sweep",
    "Sorting",
    "Heap (Priority Queue)"
  ],
  "similar_questions": [
    {
      "title": "Number of Flowers in Full Bloom",
      "difficulty": "Hard",
      "slug": "number-of-flowers-in-full-bloom"
    }
  ],
  "questionId": "1977",
  "questionFrontendId": "1851",
  "title": "Minimum Interval to Include Each Query",
  "titleSlug": "minimum-interval-to-include-each-query",
  "content": "<p>You are given a 2D integer array <code>intervals</code>, where <code>intervals[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> describes the <code>i<sup>th</sup></code> interval starting at <code>left<sub>i</sub></code> and ending at <code>right<sub>i</sub></code> <strong>(inclusive)</strong>. The <strong>size</strong> of an interval is defined as the number of integers it contains, or more formally <code>right<sub>i</sub> - left<sub>i</sub> + 1</code>.</p>\n\n<p>You are also given an integer array <code>queries</code>. The answer to the <code>j<sup>th</sup></code> query is the <strong>size of the smallest interval</strong> <code>i</code> such that <code>left<sub>i</sub> &lt;= queries[j] &lt;= right<sub>i</sub></code>. If no such interval exists, the answer is <code>-1</code>.</p>\n\n<p>Return <em>an array containing the answers to the queries</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]\n<strong>Output:</strong> [3,3,1,4]\n<strong>Explanation:</strong> The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]\n<strong>Output:</strong> [2,-1,4,6]\n<strong>Explanation:</strong> The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>1 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt;= 10<sup>7</sup></code></li>\n\t<li><code>1 &lt;= queries[j] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
  "likes": 1079,
  "dislikes": 45,
  "stats": {
    "totalAccepted": "58.6K",
    "totalSubmission": "110.7K",
    "totalAcceptedRaw": 58568,
    "totalSubmissionRaw": 110675,
    "acRate": "52.9%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Line Sweep",
      "slug": "line-sweep"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    },
    {
      "name": "Heap (Priority Queue)",
      "slug": "heap-priority-queue"
    }
  ],
  "metaData": {
    "name": "minInterval",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      },
      {
        "type": "integer[]",
        "name": "queries"
      }
    ],
    "return": {
      "type": "integer[]"
    }
  },
  "discussion_posts": [
    {
      "name": "bibaboy00",
      "year": 2021,
      "content": "[213. The Skyline Problem](https://leetcode.com/problems/the-skyline-problem/)\\n\\nThe only difference here is that:\\n1. height = width for each building (compared to random height)\\n2. min of all overlapped building (compared to max / skyline of overlapped building)\\n\\nSo remember this type of problem using heap:)",
      "voteCount": 22
    },
    {
      "name": "null41",
      "year": 2024,
      "content": "Horrible question description and example explanation",
      "voteCount": 18
    },
    {
      "name": "Hoppitot",
      "year": 2024,
      "content": "I made a map for every single possible integer and what the shortest interval containing said integer was. \\nTLE is just a hater",
      "voteCount": 10
    },
    {
      "name": "askvij",
      "year": 2021,
      "content": "During the contest Segement Tree and BIT came in my mind while doing the testcases but i wasn\\'t able to implement it(found implementation hard). Can this question be solved using anyone of them ?",
      "voteCount": 7
    },
    {
      "name": "vijpanwa",
      "year": 2023,
      "content": "This problem is just amazing. ",
      "voteCount": 6
    },
    {
      "name": "SG-C",
      "year": 2024,
      "content": "why leetcode tag binary search in this problem its misleading !",
      "voteCount": 4
    },
    {
      "name": "s1ngh_ayush",
      "year": 2024,
      "content": "imo the optimal solution is not intuitive at all, the one i came up with using nested loops couldn\\'t pass the last test case ",
      "voteCount": 3
    },
    {
      "name": "ahan98",
      "year": 2023,
      "content": "I think the Python time constraints for TLE should be updated. It\\'s pretty dumb that segment tree works for C++ and Java, but not Python. Certainly in an interview, implementing a Segment Tree solution is more than sufficient and asymptotically optimal, especially after additional speedup tricks like coordinate compression.",
      "voteCount": 2
    },
    {
      "name": "subhm2003",
      "year": 2025,
      "content": "This question can be solved using Segment Tree Lazy Propagation + Coordinate Compression  \\u2705",
      "voteCount": 1
    },
    {
      "name": "kentoh",
      "year": 2025,
      "content": "Not sure what this question measures. Naive solution is easy, most candidates can come up with it. However, the leap from naive to optimal is quite a leap; there is no step in between. If a company is asking this question and expecting candidates to solve it then they must be expecting super advanced problem solving skills.",
      "voteCount": 1
    }
  ]
}
