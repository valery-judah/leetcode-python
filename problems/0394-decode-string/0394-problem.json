{
  "category": "",
  "id": "394",
  "name": "Decode String",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/decode-string/",
  "slug": "decode-string",
  "isPaidOnly": false,
  "tags": [
    "String",
    "Stack",
    "Recursion"
  ],
  "similar_questions": [
    {
      "title": "Encode String with Shortest Length",
      "difficulty": "Hard",
      "slug": "encode-string-with-shortest-length"
    },
    {
      "title": "Number of Atoms",
      "difficulty": "Hard",
      "slug": "number-of-atoms"
    },
    {
      "title": "Brace Expansion",
      "difficulty": "Medium",
      "slug": "brace-expansion"
    }
  ],
  "questionId": "394",
  "questionFrontendId": "394",
  "title": "Decode String",
  "titleSlug": "decode-string",
  "content": "<p>Given an encoded string, return its decoded string.</p>\n\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n\n<p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p>\n\n<p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a]2[bc]&quot;\n<strong>Output:</strong> &quot;aaabcbc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a2[c]]&quot;\n<strong>Output:</strong> &quot;accaccacc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2[abc]3[cd]ef&quot;\n<strong>Output:</strong> &quot;abcabccdcdcdef&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 30</code></li>\n\t<li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li>\n\t<li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li>\n\t<li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>\n</ul>\n",
  "likes": 13562,
  "dislikes": 677,
  "stats": {
    "totalAccepted": "1.1M",
    "totalSubmission": "1.7M",
    "totalAcceptedRaw": 1065955,
    "totalSubmissionRaw": 1732630,
    "acRate": "61.5%"
  },
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "metaData": {
    "name": "decodeString",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 25
      },
      {
        "taggedByAdmin": false,
        "name": "Bloomberg",
        "slug": "bloomberg",
        "timesEncountered": 13
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "BristolJ",
      "year": 2023,
      "content": "If these are medium, I don\\'t want to see Hard",
      "voteCount": 414
    },
    {
      "name": "daily_coder",
      "year": 2020,
      "content": "Many times I solve some problem and after few hours/days I find amazed of myself that how did I even solved/coded this complex problem earlier!! Had this feeling? Please tell me, so that I can feel no alien.",
      "voteCount": 348
    },
    {
      "name": "dengning1205",
      "year": 2016,
      "content": "Seems to be a lot harder than decode",
      "voteCount": 118
    },
    {
      "name": "alexNotusDev",
      "year": 2023,
      "content": "Simple advise! We adding each char to stack till we get  `]`, in this case, we can start decoding by taking last values from stack, process them (crate string, and multiply to integer) and push back into stack, hope it will help you to find right direction.",
      "voteCount": 99
    },
    {
      "name": "Ronin_Hinokami",
      "year": 2024,
      "content": "no fucking way this is a medium problem",
      "voteCount": 98
    },
    {
      "name": "lucrivdev",
      "year": 2023,
      "content": "This is definitely a hard problem.... ",
      "voteCount": 76
    },
    {
      "name": "JCharante",
      "year": 2023,
      "content": "omg, this was so hard but I knew what to do but getting it to do what you want it to do can be so hard, you know?",
      "voteCount": 48
    },
    {
      "name": "pbindal",
      "year": 2020,
      "content": "This is categorized under graph and trees. Looks like stacks and backtracking algo to me. Please correct if I am wrong",
      "voteCount": 47
    },
    {
      "name": "cOde_Ranvir25",
      "year": 2023,
      "content": "Here is the Approach:-\n\n1.If the character is a closing square bracket ']', we pop characters off the stack until we find the corresponding opening square bracket '['. We then pop the opening bracket, the number before it (which specifies how many times the substring inside the brackets should be repeated), and the characters we just popped off the stack. We repeat this process until we have processed the entire string.\n\n2.Otherwise, if the character is not a closing square bracket ']', we push it onto the stack.",
      "voteCount": 41
    },
    {
      "name": "Mishka_Kosolapiy",
      "year": 2024,
      "content": "Don\\'t be like me and not account for 2-digit and 3-digit numbers... :( ",
      "voteCount": 29
    }
  ]
}
