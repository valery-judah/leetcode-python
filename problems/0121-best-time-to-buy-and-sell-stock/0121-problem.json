{
  "category": "",
  "id": "121",
  "name": "Best Time to Buy and Sell Stock",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/",
  "slug": "best-time-to-buy-and-sell-stock",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Dynamic Programming"
  ],
  "similar_questions": [
    {
      "title": "Maximum Subarray",
      "difficulty": "Medium",
      "slug": "maximum-subarray"
    },
    {
      "title": "Best Time to Buy and Sell Stock II",
      "difficulty": "Medium",
      "slug": "best-time-to-buy-and-sell-stock-ii"
    },
    {
      "title": "Best Time to Buy and Sell Stock III",
      "difficulty": "Hard",
      "slug": "best-time-to-buy-and-sell-stock-iii"
    },
    {
      "title": "Best Time to Buy and Sell Stock IV",
      "difficulty": "Hard",
      "slug": "best-time-to-buy-and-sell-stock-iv"
    },
    {
      "title": "Best Time to Buy and Sell Stock with Cooldown",
      "difficulty": "Medium",
      "slug": "best-time-to-buy-and-sell-stock-with-cooldown"
    },
    {
      "title": "Sum of Beauty in the Array",
      "difficulty": "Medium",
      "slug": "sum-of-beauty-in-the-array"
    },
    {
      "title": "Maximum Difference Between Increasing Elements",
      "difficulty": "Easy",
      "slug": "maximum-difference-between-increasing-elements"
    },
    {
      "title": "Maximum Profit From Trading Stocks",
      "difficulty": "Medium",
      "slug": "maximum-profit-from-trading-stocks"
    },
    {
      "title": "Best Time to Buy and Sell Stock V",
      "difficulty": "Medium",
      "slug": "best-time-to-buy-and-sell-stock-v"
    }
  ],
  "questionId": "121",
  "questionFrontendId": "121",
  "title": "Best Time to Buy and Sell Stock",
  "titleSlug": "best-time-to-buy-and-sell-stock",
  "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p>\n\n<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,1,5,3,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,6,4,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> In this case, no transactions are done and the max profit = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "likes": 34062,
  "dislikes": 1332,
  "stats": {
    "totalAccepted": "6.9M",
    "totalSubmission": "12.4M",
    "totalAcceptedRaw": 6892698,
    "totalSubmissionRaw": 12380439,
    "acRate": "55.7%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "metaData": {
    "name": "maxProfit",
    "params": [
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 67
      },
      {
        "taggedByAdmin": true,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 61
      },
      {
        "taggedByAdmin": false,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 45
      },
      {
        "taggedByAdmin": false,
        "name": "Apple",
        "slug": "apple",
        "timesEncountered": 17
      },
      {
        "taggedByAdmin": true,
        "name": "Microsoft",
        "slug": "microsoft",
        "timesEncountered": 14
      },
      {
        "taggedByAdmin": true,
        "name": "Bloomberg",
        "slug": "bloomberg",
        "timesEncountered": 11
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "Serosidium",
      "year": 2023,
      "content": "I couldn\\'t find any good explanations here and only code, so I will do my best to explain how I solved it without providing code. I am sure there are other possible solutions, but this is how it worked for me.\\n\\nThe brute force method of a double for loop is not necessary here, and this problem is marked with dynamic programming because it requires the [Sliding Window technique](https://algorithm-visualizer.org/dynamic-programming/sliding-window).\\n\\nBased on the fact that we have to sell after we buy and we are trying to maximize profit, we can iterate through the prices and only need to consider two things:\\n1.) **Is this price cheaper than any other price I\\'ve seen before?** \\n2.) If I subtract current price by the cheapest price I\\'ve found, **does this yield a greater profit than what I\\'ve seen so far?**\\n\\n*A fun thing to note is if #1 is true, then #2 cannot be true as well so there isn\\'t a need to check*\\n\\nLet\\'s consider an example of [4,1,5,2,7]\\n- 4 is the cheapest price we see to start, and we can\\'t sell on the first day so maxProfit is 0\\n- 1 is now the cheapest price we\\'ve seen. Selling now would lose us money, so we can\\'t update maxProfit\\n- 5 is not cheaper than 1, but if we sell now we get a maxProfit of 4! Better save that for later\\n- 2 is not cheaper than 1 and if we sell, we only get a profit of 1, no need to do anything here\\n- 7 is not cheaper than 1, but if we sell here, we\\'ll increase maxProfit to 6, making this the best profit to return.\\n\\nHope this helps someone else!\\n",
      "voteCount": 1807
    },
    {
      "name": "ak67",
      "year": 2021,
      "content": "I think this problem should be catogarise as medium level problem\\n",
      "voteCount": 1287
    },
    {
      "name": "Vineet_mittal_007",
      "year": 2023,
      "content": "I am So dumb....",
      "voteCount": 1120
    },
    {
      "name": "leet_code_master",
      "year": 2022,
      "content": "prices = [2, 4, 1]\\n\\nOutput: 0\\nExpected: 2\\n\\nYou buy on day three but cannot sell because it is the last day. Should that not be zero?",
      "voteCount": 288
    },
    {
      "name": "codernoob",
      "year": 2022,
      "content": "how to resolve the time exceeded issue? Mine fails at 203rd test case with a large array",
      "voteCount": 230
    },
    {
      "name": "EXLsunshine",
      "year": 2015,
      "content": "Why is this problem tagged with \"Dynamic programming\"?",
      "voteCount": 222
    },
    {
      "name": "AlgoEngine",
      "year": 2023,
      "content": "Video visualizing an intuitive proof of the O(n) solution:\nhttps://youtube.com/watch?v=ioFPBdChabY",
      "voteCount": 161
    },
    {
      "name": "mingchoi",
      "year": 2023,
      "content": "(creative) A Dynamic Programming approch:\nYou can actually solve this problem with by converting it into [53.Maximum Subarray], here's how:\n\nLet's start with case 1:`prices=[7,1,5,3,6,4]`\nnow loop once to calculate the gain/loss if you buy it then sell it on the next day, \n`prices[i] = prices[i+1] - prices[i]`\ne.g. buy at 7 sell at 1: `1-7=-6`, then you will come up with this array:\n`[-6, +4, -2, +3, -2]`\n\nFor now, you need find the range with maximum profit(sub array) from above. The answer can tell by looking at it, the best range is `+4 -2 +3 = 5`.\nIf the maximum is negative you should return 0 and that's all!\n\nBest part of this approch is you can do it in-place, there will be an empty slot at the end of array, but if you think about that -- you can simply put 0 at that empty slot so you don't have to check negative anymore. Perfect!\n",
      "voteCount": 128
    },
    {
      "name": "shilbabun491",
      "year": 2023,
      "content": "how to resolve the time exceeded issue? Mine fails at 200th test case with a large array",
      "voteCount": 85
    },
    {
      "name": "Promethus",
      "year": 2023,
      "content": "#Intuition#\\n\\nso keep two variables one keeps track of profit and second keeps track of minimum(minCost) value of stock\\n1. initialize profit with zero and minCost to first price\\n2.  then iterate through the array \\n3. we have to check what profit we can get if we sell the stock at that index and is it greater than our previous profits\\n4.  then we need to also check  if current price of stock is less than the minCost we have been keeping track of\\n5. return profit  after iterating overprice array",
      "voteCount": 40
    }
  ]
}
