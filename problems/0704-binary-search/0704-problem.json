{
  "category": "",
  "id": "704",
  "name": "Binary Search",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/binary-search/",
  "slug": "binary-search",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Binary Search"
  ],
  "similar_questions": [
    {
      "title": "Search in a Sorted Array of Unknown Size",
      "difficulty": "Medium",
      "slug": "search-in-a-sorted-array-of-unknown-size"
    },
    {
      "title": "Maximum Count of Positive Integer and Negative Integer",
      "difficulty": "Easy",
      "slug": "maximum-count-of-positive-integer-and-negative-integer"
    }
  ],
  "questionId": "792",
  "questionFrontendId": "704",
  "title": "Binary Search",
  "titleSlug": "binary-search",
  "content": "<p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p>\n\n<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 9\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 9 exists in nums and its index is 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 2 does not exist in nums so return -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt; nums[i], target &lt; 10<sup>4</sup></code></li>\n\t<li>All the integers in <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is sorted in ascending order.</li>\n</ul>\n",
  "likes": 12891,
  "dislikes": 283,
  "stats": {
    "totalAccepted": "3.4M",
    "totalSubmission": "5.7M",
    "totalAcceptedRaw": 3396677,
    "totalSubmissionRaw": 5667473,
    "acRate": "59.9%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    }
  ],
  "metaData": {
    "name": "search",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "AlecLC",
      "year": 2023,
      "content": "We deserve this question after 3 hards in a row lol",
      "voteCount": 219
    },
    {
      "name": "anmolp476",
      "year": 2023,
      "content": "I love this question so much because it actually says ASCENDING and not NON-DESCENDING",
      "voteCount": 211
    },
    {
      "name": "hashimjacobs",
      "year": 2023,
      "content": "Really wish people would stop posting working solutions in Discussion\\u2026.",
      "voteCount": 159
    },
    {
      "name": "Jeetaksh",
      "year": 2022,
      "content": "Constraints not useful\\n1 <= nums.length <= 10^4\\n\\nWhat is the use of this problem with such a small size of array?\\nIt can easily pass linear search with such a less size.\\nIt should be made upto 10^9 so that it only passes binary search and not linear search so that the purpose of the problem to check your binary search abilities gets solved.\\n\\nThankyou",
      "voteCount": 72
    },
    {
      "name": "kortemaki",
      "year": 2019,
      "content": "##### There are a lot of \"python one-liner\" comments in the discussion (see [here](https://leetcode.com/problems/binary-search/discuss/332405/Python-so-simple-solution), [here](https://leetcode.com/problems/binary-search/discuss/307897/smple-python-solve), [here](https://leetcode.com/problems/binary-search/discuss/304065/Python-One-liner), [here](https://leetcode.com/problems/binary-search/discuss/281674/Python-Different-solution-that-doesn\\'t-use-binary-search-but-unsure-of-time-complexity), [...](https://leetcode.com/problems/binary-search/discuss/290671/Python-beats-93-very-concise)) that basically just return nums.index(target), which is not a binary search and takes O(n) time.  Assuming these submissions are getting accepted, the testbench ought to have more rigorous test cases!\\n\\nSure enough, linear time solutions do pass the testbench.  I wrote a solution using binary search (via bisect) that clocked in at 100% for Python3, and a solution using linear search (via nums.index) that clocked in at around 10% for Python3 (though some of the linear search solutions above cite performance in the low 90s).  You can find my implementations at [this playground link](https://leetcode.com/playground/2XGMofZT).\\n\\nThis was disappointing, but I wanted to submit some new test cases that would work for sublinear time search and time out for linear search.  I tried making some arrays with large numbers of elements <1M, but the LeetCode test code button fails on account of the JSON string limit of 2MB.  Testing with ~970K elements works fine for both my solutions and the Expected/reference implementation, but the time performance on 10 attempts was not significantly different (p=.81) and the outlier ranges were comparable.  I suspect the bulk of the time is spent in setting up the python test (list creation is O(n)), which dwarfs the time taken for a single search query.\\n\\nThe real difference between binary and linear search is in their relative performance when repeatedly querying for multiple keys, so maybe this question should be rewritten to search for indices to a list of k queries in the sorted list nums (binary search O(k log n) time vs linear search O(kn) time; both O(k) memory), which would differentiate at n>>k.\\n\\nWithout changing the problem setup or making some question-specific, (and worse, language-specific) code on the LeetCode backend to enable querying the solution multiple times on the same input array, I don\\'t know how realistic it is to try to find a time limit threshold that can accurately discriminate between linear and sublinear implementations.  Maybe we just need a better Binary Search question (or to acknowledge that this isn\\'t a Binary Search question).",
      "voteCount": 47
    },
    {
      "name": "dhruvdd8888",
      "year": 2023,
      "content": "# After streak of hard questions, leetcode lets you relax. Saying happy new month.",
      "voteCount": 26
    },
    {
      "name": "SF26",
      "year": 2020,
      "content": "this video quickly explains how this algorithm works in a real example\\nhttps://youtu.be/Itp19oKCtO8",
      "voteCount": 23
    },
    {
      "name": "LeetCode",
      "year": 2022,
      "content": "This problem is the Daily LeetCoding Challenge for March, Day 26.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **\ud83d\udccc Do you want to learn the problem thoroughly?**\n  Read [**\u2b50  LeetCode Official Solution\u2b50**](https://leetcode.com/problems/binary-search/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Binary Search \n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
      "voteCount": 19
    },
    {
      "name": "KhadimHussainDev",
      "year": 2024,
      "content": "I an really confused when to use `<` , `<=` or `>` , `>=`\\nAlso sometime i got  confused while assigning values like `start = mid + 1` and sometimes `start = mid`\\nSomeone kindly explain this to me. Thanks alot",
      "voteCount": 18
    },
    {
      "name": "cOde_Ranvir25",
      "year": 2023,
      "content": "***Here is the Algo:-)***\\n\\n- Binary search is a search algorithm that works by repeatedly dividing the search interval in half. The algorithm starts by comparing the target value to the middle element of the sorted array. If the target value is equal to the middle element, the search is successful, and the index of the middle element is returned. If the target value is less than the middle element, the search continues in the lower half of the array. If the target value is greater than the middle element, the search continues in the upper half of the array. The process is repeated until the target value is found or the search interval is empty.\\n\\n- The time complexity of binary search is O(log n), where n is the number of elements in the array. This makes it an efficient algorithm for searching large arrays. However, binary search requires the input array to be sorted, which can be a disadvantage if the array is frequently updated.",
      "voteCount": 12
    }
  ]
}
