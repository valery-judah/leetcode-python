{
  "category": "",
  "id": "1098",
  "name": "Unpopular Books",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/unpopular-books/",
  "slug": "unpopular-books",
  "isPaidOnly": true,
  "tags": [
    "Database"
  ],
  "similar_questions": [],
  "questionId": "1198",
  "questionFrontendId": "1098",
  "title": "Unpopular Books",
  "titleSlug": "unpopular-books",
  "content": "<p>Table: <code>Books</code></p>\n\n<pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| book_id        | int     |\n| name           | varchar |\n| available_from | date    |\n+----------------+---------+\nbook_id is the primary key (column with unique values) of this table.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Orders</code></p>\n\n<pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| order_id       | int     |\n| book_id        | int     |\n| quantity       | int     |\n| dispatch_date  | date    |\n+----------------+---------+\norder_id is the primary key (column with unique values) of this table.\nbook_id is a foreign key (reference column) to the Books table.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to report&nbsp;the <strong>books</strong> that have sold <strong>less than </strong><code>10</code> copies in the last year, excluding books that have been available for less than one month from today. <strong>Assume today is </strong><code>2019-06-23</code>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nBooks table:\n+---------+--------------------+----------------+\n| book_id | name               | available_from |\n+---------+--------------------+----------------+\n| 1       | &quot;Kalila And Demna&quot; | 2010-01-01     |\n| 2       | &quot;28 Letters&quot;       | 2012-05-12     |\n| 3       | &quot;The Hobbit&quot;       | 2019-06-10     |\n| 4       | &quot;13 Reasons Why&quot;   | 2019-06-01     |\n| 5       | &quot;The Hunger Games&quot; | 2008-09-21     |\n+---------+--------------------+----------------+\nOrders table:\n+----------+---------+----------+---------------+\n| order_id | book_id | quantity | dispatch_date |\n+----------+---------+----------+---------------+\n| 1        | 1       | 2        | 2018-07-26    |\n| 2        | 1       | 1        | 2018-11-05    |\n| 3        | 3       | 8        | 2019-06-11    |\n| 4        | 4       | 6        | 2019-06-05    |\n| 5        | 4       | 5        | 2019-06-20    |\n| 6        | 5       | 9        | 2009-02-02    |\n| 7        | 5       | 8        | 2010-04-13    |\n+----------+---------+----------+---------------+\n<strong>Output:</strong> \n+-----------+--------------------+\n| book_id   | name               |\n+-----------+--------------------+\n| 1         | &quot;Kalila And Demna&quot; |\n| 2         | &quot;28 Letters&quot;       |\n| 5         | &quot;The Hunger Games&quot; |\n+-----------+--------------------+\n</pre>\n",
  "likes": 215,
  "dislikes": 619,
  "stats": {
    "totalAccepted": "46K",
    "totalSubmission": "105.9K",
    "totalAcceptedRaw": 45950,
    "totalSubmissionRaw": 105898,
    "acRate": "43.4%"
  },
  "topicTags": [
    {
      "name": "Database",
      "slug": "database"
    }
  ],
  "metaData": {
    "mysql": [
      "Create table If Not Exists Books (book_id int, name varchar(50), available_from date)",
      "Create table If Not Exists Orders (order_id int, book_id int, quantity int, dispatch_date date)"
    ],
    "mssql": [
      "Create table Books (book_id int, name varchar(50), available_from date)",
      "Create table Orders (order_id int, book_id int, quantity int, dispatch_date date)"
    ],
    "oraclesql": [
      "Create table Books (book_id int, name varchar(50), available_from date)",
      "Create table Orders (order_id int, book_id int, quantity int, dispatch_date date)",
      "ALTER SESSION SET nls_date_format='YYYY-MM-DD'"
    ],
    "database": true,
    "name": "unpopular_books",
    "pythondata": [
      "Books = pd.DataFrame([], columns=['book_id', 'name', 'available_from']).astype({'book_id':'Int64', 'name':'object', 'available_from':'datetime64[ns]'})",
      "Orders = pd.DataFrame([], columns=['order_id', 'book_id', 'quantity', 'dispatch_date']).astype({'order_id':'Int64', 'book_id':'Int64', 'quantity':'Int64', 'dispatch_date':'datetime64[ns]'})"
    ],
    "postgresql": [
      "\nCreate table If Not Exists Books (book_id int, name varchar(50), available_from date)\n",
      "Create table If Not Exists Orders (order_id int, book_id int, quantity int, dispatch_date date)"
    ],
    "database_schema": {
      "Books": {
        "book_id": "INT",
        "name": "VARCHAR(50)",
        "available_from": "DATE"
      },
      "Orders": {
        "order_id": "INT",
        "book_id": "INT",
        "quantity": "INT",
        "dispatch_date": "DATE"
      }
    }
  },
  "discussion_posts": [
    {
      "name": "zhuhegege",
      "year": 2022,
      "content": "Stupid description...\\nwasted 30 minutes and found I misunderstood last year!\\n\\nvery inaccurate and unclear description!\\n delete this problem right now!",
      "voteCount": 89
    },
    {
      "name": "verirren",
      "year": 2022,
      "content": "spent 10+ minutes trying to figure out why my submission was wrong until i looked at the answers... please update the explanation of \"last year\" as within the last 365 days. I was thinking orders in year 2018 as 1 year before 2019.",
      "voteCount": 32
    },
    {
      "name": "Metahunter",
      "year": 2019,
      "content": "Hunger game not dispatched in last year, how come this is count?",
      "voteCount": 14
    },
    {
      "name": "mirandanathan",
      "year": 2020,
      "content": "The question asks for last year but the test case validates for the last 365 days. Otherwise it is a good question because you can practise everything in this question, particularly in the having() without using cte table or extra joins.\\n\\nFYI:\\n\\nselect Books.book_id, Books.name\\nfrom Books left join Orders on Orders.book_id = Books.book_id\\nwhere available_from < \\'2019-05-23\\'\\ngroup by Books.book_id,Books.name\\nhaving sum(case when dispatch_date >= \\'2018-06-23\\' and dispatch_date < \\'2019-06-23\\' then isnull(quantity,0) when dispatch_date is null then 0 when dispatch_date < \\'2018-06-23\\' or dispatch_date >= \\'2019-06-23\\' then 0 end) < 10\\norder by 1 asc",
      "voteCount": 4
    },
    {
      "name": "thedawnn",
      "year": 2021,
      "content": "\\'\\'\\'\\nSELECT B.book_id, B.name\\n\\nFROM Books B LEFT JOIN Orders O USING(book_id)\\nWHERE available_from <= DATE_SUB(\\'2019-06-23\\', INTERVAL 1 MONTH) \\n\\nGROUP BY B.book_id \\nHAVING SUM(CASE WHEN dispatch_date >= DATE_SUB(\\'2019-06-23\\', INTERVAL 1 YEAR) THEN quantity ELSE 0 END) < 10\\n\\'\\'\\'",
      "voteCount": 3
    },
    {
      "name": "rovingknight",
      "year": 2021,
      "content": "with cte as (select book_id, name from books where available_from not between date_sub(\\'2019-06-23\\', interval 31 day) and \\'2019-06-23\\')\\n\\n\\nselect book_id, name from cte c left join orders o using(book_id) group by book_id having\\n sum(if(dispatch_date between\\'2018-06-23\\' and \\'2019-06-23\\', quantity, 0)) < 10;\\n \\n \\n \\n I tried so many times finally realizing that last year means between\\'2018-06-23\\' and \\'2019-06-23\\', not \\'2018\\'. It\\'s a bit frustrating.",
      "voteCount": 2
    },
    {
      "name": "sophie84",
      "year": 2025,
      "content": "It is a good question to practice `date_sub()` and `left join`. It is better to clarify how we define \"last year\": it refers to `2018`? or it refers to the past `12` months since `2019-06-23`? In addition, how long is `last month`? `30` days or `31` days? how long is `last year`? `365` days or `366` days?  Thank you.",
      "voteCount": 1
    },
    {
      "name": "leetbeans",
      "year": 2024,
      "content": "If we ignore the poorly worded requirements this is one of the best problems to understand SQL operation order in each part. Don\\'t skip, okay to spend lot of time understanding the nuances.",
      "voteCount": 1
    },
    {
      "name": "marwin-ko",
      "year": 2024,
      "content": "terribly worded question",
      "voteCount": 1
    },
    {
      "name": "kxp200007",
      "year": 2023,
      "content": "Please be clear, no company in this world has business users or end users who are this vague in mentioning their requirements, even if they are it is very natural for the developers to ask them and understand the question better. Here, there is no scope to \"ask someone\" so please please stop this nonsense. There is no harm in explaining the question clearly so that we know what needs to be done. Please stop doing this \"vague\" thing for questions",
      "voteCount": 1
    }
  ]
}
