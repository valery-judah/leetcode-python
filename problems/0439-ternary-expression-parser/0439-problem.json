{
  "category": "",
  "id": "439",
  "name": "Ternary Expression Parser",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/ternary-expression-parser/",
  "slug": "ternary-expression-parser",
  "isPaidOnly": true,
  "tags": [
    "String",
    "Stack",
    "Recursion"
  ],
  "similar_questions": [
    {
      "title": "Mini Parser",
      "difficulty": "Medium",
      "slug": "mini-parser"
    },
    {
      "title": "Remove Comments",
      "difficulty": "Medium",
      "slug": "remove-comments"
    },
    {
      "title": "Parse Lisp Expression",
      "difficulty": "Hard",
      "slug": "parse-lisp-expression"
    }
  ],
  "questionId": "439",
  "questionFrontendId": "439",
  "title": "Ternary Expression Parser",
  "titleSlug": "ternary-expression-parser",
  "content": "<p>Given a string <code>expression</code> representing arbitrarily nested ternary expressions, evaluate the expression, and return <em>the result of it</em>.</p>\n\n<p>You can always assume that the given expression is valid and only contains digits, <code>&#39;?&#39;</code>, <code>&#39;:&#39;</code>, <code>&#39;T&#39;</code>, and <code>&#39;F&#39;</code> where <code>&#39;T&#39;</code> is true and <code>&#39;F&#39;</code> is false. All the numbers in the expression are <strong>one-digit</strong> numbers (i.e., in the range <code>[0, 9]</code>).</p>\n\n<p>The conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, <code>&#39;T&#39;</code> or <code>&#39;F&#39;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;T?2:3&quot;\n<strong>Output:</strong> &quot;2&quot;\n<strong>Explanation:</strong> If true, then result is 2; otherwise result is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;F?1:T?4:5&quot;\n<strong>Output:</strong> &quot;4&quot;\n<strong>Explanation:</strong> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n&quot;(F ? 1 : (T ? 4 : 5))&quot; --&gt; &quot;(F ? 1 : 4)&quot; --&gt; &quot;4&quot;\nor &quot;(F ? 1 : (T ? 4 : 5))&quot; --&gt; &quot;(T ? 4 : 5)&quot; --&gt; &quot;4&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;T?T?F:5:3&quot;\n<strong>Output:</strong> &quot;F&quot;\n<strong>Explanation:</strong> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n&quot;(T ? (T ? F : 5) : 3)&quot; --&gt; &quot;(T ? F : 3)&quot; --&gt; &quot;F&quot;\n&quot;(T ? (T ? F : 5) : 3)&quot; --&gt; &quot;(T ? F : 5)&quot; --&gt; &quot;F&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>5 &lt;= expression.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>expression</code> consists of digits, <code>&#39;T&#39;</code>, <code>&#39;F&#39;</code>, <code>&#39;?&#39;</code>, and <code>&#39;:&#39;</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that <code>expression</code> is a valid ternary expression and that each number is a <strong>one-digit number</strong>.</li>\n</ul>\n",
  "likes": 509,
  "dislikes": 74,
  "stats": {
    "totalAccepted": "37.1K",
    "totalSubmission": "59.8K",
    "totalAcceptedRaw": 37128,
    "totalSubmissionRaw": 59752,
    "acRate": "62.1%"
  },
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "metaData": {
    "name": "parseTernary",
    "params": [
      {
        "name": "expression",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    }
  },
  "discussion_posts": [
    {
      "name": "harryyu1994",
      "year": 2020,
      "content": "If we start scanning from right to left (order given by the problem), you will notice that we encounter BOTH operands before we encounter the operator (T? or F?). Reverse Polish Notation!\\nReverse Polish Notation can be evaluated using a stack (https://leetcode.com/problems/evaluate-reverse-polish-notation/)",
      "voteCount": 7
    },
    {
      "name": "MangoTroll34",
      "year": 2024,
      "content": "I am working on this and LC shows 1 other online. Whoever you are... you got this \\uD83D\\uDCAA",
      "voteCount": 3
    },
    {
      "name": "matthew106",
      "year": 2023,
      "content": "String parsing tasks are so annoying...",
      "voteCount": 2
    },
    {
      "name": "badasscodergirl",
      "year": 2025,
      "content": "The problem doesn\\'t take into account validity of ternary expression grammar.\\n\\n`F ? F ? F : T ? 5 : 3`\\nThis test case isn\\'t handled and gives \"Interval Error\" in LC.\\n\\nIf you break it down into step by step -\\nStep 1:\\nT ? 5 : 3 \\u2192 T is true \\u2192 result is \\'5\\' \\u2192 So now we have:\\n\\nStep 2:\\n\"F ? (F ? F : 5)\"\\nNow F ? F : 5 \\u2192 F is false \\u2192 result is \\'5\\'\\n\\nSte 3: Breaks here \\nNow the outermost expression is: F ? 5 : ???\\n\\n",
      "voteCount": 1
    },
    {
      "name": "seredenko99",
      "year": 2024,
      "content": "DO like problem says. Iterate from Right to Left!",
      "voteCount": 1
    },
    {
      "name": "etanila",
      "year": 2024,
      "content": "I like parsing problems, they always get you. :-) I figured out the logic right away but it took some time to actually code it.",
      "voteCount": 0
    },
    {
      "name": "yangwudi398",
      "year": 2023,
      "content": "Nice to learn how nested conditional expressions are parsed.",
      "voteCount": 0
    }
  ]
}
