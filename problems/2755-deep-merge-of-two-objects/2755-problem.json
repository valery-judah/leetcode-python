{
  "category": "",
  "id": "2755",
  "name": "Deep Merge of Two Objects",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/deep-merge-of-two-objects/",
  "slug": "deep-merge-of-two-objects",
  "isPaidOnly": true,
  "tags": [],
  "similar_questions": [],
  "questionId": "2795",
  "questionFrontendId": "2755",
  "title": "Deep Merge of Two Objects",
  "titleSlug": "deep-merge-of-two-objects",
  "content": "<p>Given two values&nbsp;<code>obj1</code> and <code>obj2</code>, return a&nbsp;<strong>deepmerged</strong>&nbsp;value.</p>\n\n<p>Values should be <strong>deepmerged</strong> according to these rules:</p>\n\n<ul>\n\t<li>If the two values are objects, the resulting object should have all the keys that exist on either object.&nbsp;If a key belongs to both objects, <strong>deepmerge</strong> the two associated values. Otherwise, add the key-value pair to the resulting object.</li>\n\t<li>If the two values are arrays, the resulting array should be the same length as the longer array.&nbsp;Apply the same logic as you would with objects, but treat the indices as keys.</li>\n\t<li>Otherwise the resulting value is&nbsp;<code>obj2</code>.</li>\n</ul>\n\n<p>You can assume&nbsp;<code>obj1</code> and <code>obj2</code>&nbsp;are the output of&nbsp;<code>JSON.parse()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> obj1 = {&quot;a&quot;: 1, &quot;c&quot;: 3}, obj2 = {&quot;a&quot;: 2, &quot;b&quot;: 2}\n<strong>Output:</strong> {&quot;a&quot;: 2, &quot;c&quot;: 3, &quot;b&quot;: 2}\n<strong>Explanation:</strong> The value of obj1[&quot;a&quot;] changed to 2 because if both objects have the same key and their value is not an array or object then we change the obj1 value to the obj2 value. Key &quot;b&quot; with value was added to obj1 as it doesn&#39;t exist in obj1. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> obj1 = [{}, 2, 3], obj2 = [[], 5]\n<strong>Output:</strong> [[], 5, 3]\n<strong>Explanation:</strong> result[0] = obj2[0] because obj1[0] and obj2[0] have different types. result[2] = obj1[2] because obj2[2] does not exist.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: [1 , [2, 7], 5], &quot;d&quot;: 2}}, \nobj2 = {&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: [6, [6], [9]], &quot;e&quot;: 3}}\n<strong>Output:</strong> {&quot;a&quot;: 1, &quot;b&quot;: {&quot;c&quot;: [6, [6, 7], [9]], &quot;d&quot;: 2, &quot;e&quot;: 3}}\n<strong>Explanation:</strong> \nArrays obj1[&quot;b&quot;][&quot;c&quot;] and obj2[&quot;b&quot;][&quot;c&quot;] have been merged in way that obj2 values overwrite obj1 values deeply only if they are not arrays or objects.\nobj2[&quot;b&quot;][&quot;c&quot;] has key &quot;e&quot; that obj1 doesn&#39;t have so it&#39;s added to obj1.\n</pre>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> obj1 = true, obj2 = null\n<strong>Output:</strong> null\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>obj1</code> and <code>obj2</code> are valid JSON values</li>\n\t<li><code>1 &lt;= JSON.stringify(obj1).length &lt;= 5&nbsp;* 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= JSON.stringify(obj2).length &lt;= 5&nbsp;* 10<sup>5</sup></code></li>\n</ul>\n",
  "likes": 15,
  "dislikes": 4,
  "stats": {
    "totalAccepted": "805",
    "totalSubmission": "1.2K",
    "totalAcceptedRaw": 805,
    "totalSubmissionRaw": 1242,
    "acRate": "64.8%"
  },
  "topicTags": [],
  "metaData": {
    "name": "deepMerge",
    "params": [
      {
        "name": "obj1",
        "type": "string"
      },
      {
        "type": "string",
        "name": "obj2"
      }
    ],
    "return": {
      "type": "string"
    },
    "languages": [
      "javascript",
      "typescript"
    ],
    "manual": true
  },
  "discussion_posts": [
    {
      "name": "jz516",
      "year": 2023,
      "content": "I almost bang my head into the wall while dealing with type checking in this question",
      "voteCount": 0
    },
    {
      "name": "nika-skybytska",
      "year": 2023,
      "content": "Please specify the expected order of keys in the resulting object.",
      "voteCount": 0
    },
    {
      "name": "calvinchankf",
      "year": 2023,
      "content": "As a dev for years, tbh dealing with null and undefined is always the pain in the ass",
      "voteCount": 0
    }
  ]
}
