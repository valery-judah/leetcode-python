{
  "category": "",
  "id": "8",
  "name": "String to Integer (atoi)",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/string-to-integer-atoi/",
  "slug": "string-to-integer-atoi",
  "isPaidOnly": false,
  "tags": [
    "String"
  ],
  "similar_questions": [
    {
      "title": "Reverse Integer",
      "difficulty": "Medium",
      "slug": "reverse-integer"
    },
    {
      "title": "Valid Number",
      "difficulty": "Hard",
      "slug": "valid-number"
    },
    {
      "title": "Check if Numbers Are Ascending in a Sentence",
      "difficulty": "Easy",
      "slug": "check-if-numbers-are-ascending-in-a-sentence"
    }
  ],
  "questionId": "8",
  "questionFrontendId": "8",
  "title": "String to Integer (atoi)",
  "titleSlug": "string-to-integer-atoi",
  "content": "<p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer.</p>\n\n<p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p>\n\n<ol>\n\t<li><strong>Whitespace</strong>: Ignore any leading whitespace (<code>&quot; &quot;</code>).</li>\n\t<li><strong>Signedness</strong>: Determine the sign by checking if the next character is <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code>, assuming positivity if neither present.</li>\n\t<li><strong>Conversion</strong>: Read the integer by skipping leading zeros&nbsp;until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.</li>\n\t<li><strong>Rounding</strong>: If the integer is out of the 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then round the integer to remain in the range. Specifically, integers less than <code>-2<sup>31</sup></code> should be rounded to <code>-2<sup>31</sup></code>, and integers greater than <code>2<sup>31</sup> - 1</code> should be rounded to <code>2<sup>31</sup> - 1</code>.</li>\n</ol>\n\n<p>Return the integer as the final result.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;42&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">42</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\nThe underlined characters are what is read in and the caret is the current reader position.\nStep 1: &quot;42&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;42&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>42</u>&quot; (&quot;42&quot; is read in)\n           ^\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot; -042&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-42</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\nStep 1: &quot;<u>   </u>-042&quot; (leading whitespace is read and ignored)\n            ^\nStep 2: &quot;   <u>-</u>042&quot; (&#39;-&#39; is read, so the result should be negative)\n             ^\nStep 3: &quot;   -<u>042</u>&quot; (&quot;042&quot; is read in, leading zeros ignored in the result)\n               ^\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;1337c0d3&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1337</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\nStep 1: &quot;1337c0d3&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;1337c0d3&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>1337</u>c0d3&quot; (&quot;1337&quot; is read in; reading stops because the next character is a non-digit)\n             ^\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;0-1&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\nStep 1: &quot;0-1&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;0-1&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>0</u>-1&quot; (&quot;0&quot; is read in; reading stops because the next character is a non-digit)\n          ^\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 5:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;words and 987&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Reading stops at the first non-digit character &#39;w&#39;.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>&#39; &#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;.&#39;</code>.</li>\n</ul>\n",
  "likes": 5680,
  "dislikes": 15058,
  "stats": {
    "totalAccepted": "2.1M",
    "totalSubmission": "10.8M",
    "totalAcceptedRaw": 2121870,
    "totalSubmissionRaw": 10766139,
    "acRate": "19.7%"
  },
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "metaData": {
    "name": "myAtoi",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 20
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "lazur",
      "year": 2019,
      "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?",
      "voteCount": 1306
    },
    {
      "name": "chandrashekar",
      "year": 2018,
      "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you.",
      "voteCount": 1027
    },
    {
      "name": "CoderKorra",
      "year": 2021,
      "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it.",
      "voteCount": 427
    },
    {
      "name": "aeschinder",
      "year": 2020,
      "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements.",
      "voteCount": 414
    },
    {
      "name": "siddhant_arya",
      "year": 2022,
      "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n",
      "voteCount": 146
    },
    {
      "name": "karimo94",
      "year": 2018,
      "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648",
      "voteCount": 144
    },
    {
      "name": "mrn_cp",
      "year": 2021,
      "content": "So many edge cases (feel like stupid).....should have avoid this.....",
      "voteCount": 58
    },
    {
      "name": "shakeels",
      "year": 2022,
      "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top.",
      "voteCount": 53
    },
    {
      "name": "gorelov",
      "year": 2019,
      "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function.",
      "voteCount": 41
    },
    {
      "name": "panhejia",
      "year": 2014,
      "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable.",
      "voteCount": 31
    }
  ]
}
