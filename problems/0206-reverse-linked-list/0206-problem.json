{
  "category": "",
  "id": "206",
  "name": "Reverse Linked List",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/reverse-linked-list/",
  "slug": "reverse-linked-list",
  "isPaidOnly": false,
  "tags": [
    "Linked List",
    "Recursion"
  ],
  "similar_questions": [
    {
      "title": "Reverse Linked List II",
      "difficulty": "Medium",
      "slug": "reverse-linked-list-ii"
    },
    {
      "title": "Binary Tree Upside Down",
      "difficulty": "Medium",
      "slug": "binary-tree-upside-down"
    },
    {
      "title": "Palindrome Linked List",
      "difficulty": "Easy",
      "slug": "palindrome-linked-list"
    },
    {
      "title": "Reverse Nodes in Even Length Groups",
      "difficulty": "Medium",
      "slug": "reverse-nodes-in-even-length-groups"
    },
    {
      "title": "Maximum Twin Sum of a Linked List",
      "difficulty": "Medium",
      "slug": "maximum-twin-sum-of-a-linked-list"
    },
    {
      "title": "Remove Nodes From Linked List",
      "difficulty": "Medium",
      "slug": "remove-nodes-from-linked-list"
    },
    {
      "title": "Insert Greatest Common Divisors in Linked List",
      "difficulty": "Medium",
      "slug": "insert-greatest-common-divisors-in-linked-list"
    }
  ],
  "questionId": "206",
  "questionFrontendId": "206",
  "title": "Reverse Linked List",
  "titleSlug": "reverse-linked-list",
  "content": "<p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [5,4,3,2,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" style=\"width: 182px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2]\n<strong>Output:</strong> [2,1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li>\n\t<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\n",
  "likes": 23520,
  "dislikes": 548,
  "stats": {
    "totalAccepted": "5.6M",
    "totalSubmission": "7M",
    "totalAcceptedRaw": 5599192,
    "totalSubmissionRaw": 7029873,
    "acRate": "79.6%"
  },
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "metaData": {
    "name": "reverseList",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 14
      },
      {
        "taggedByAdmin": true,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 12
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "rajat_171",
      "year": 2023,
      "content": "I believe that this is not an easy problem. ",
      "voteCount": 626
    },
    {
      "name": "Bobzero",
      "year": 2023,
      "content": "The links of this linked list was linking my head to hell.. \\nlesson: small code doesn\\'t mean easy Logic",
      "voteCount": 357
    },
    {
      "name": "Abhay911",
      "year": 2024,
      "content": "Today I completed 300 consecutive days with this problem. ",
      "voteCount": 296
    },
    {
      "name": "austinlimanek",
      "year": 2024,
      "content": "I always enjoy redoing classic algorithm questions like this to see my progression. Three months ago I had to think deeply about this problem and it took 30+ minutes (even after studying it prior). Now I can finish it in less than 2 minutes. Keep up the grind! You will improve!",
      "voteCount": 236
    },
    {
      "name": "erinlau",
      "year": 2023,
      "content": "Hey, I have a question about the input \"head = [1,2,3,4,5]\", Actually in all the linked list questions, the input is given in this array-like format. In my understanding it should represent a linked list with 1 to be the head and next pointing to 2. Why it is written like this? ",
      "voteCount": 86
    },
    {
      "name": "Aditya_A",
      "year": 2021,
      "content": "I code in Python and I am not able to wrap my head around this even after watching a few of the good YouTube videos about reversing the linked list. I am so sad that I am not able understand this easy problem. I don\\'t know what to do with harder problems. Can someone please help...",
      "voteCount": 65
    },
    {
      "name": "Bobzero",
      "year": 2023,
      "content": "I just ran from daily problem coz it was hard and here I am solving the easy question in 30 min.. bruh \\uD83D\\uDE02",
      "voteCount": 60
    },
    {
      "name": "anwendeng",
      "year": 2024,
      "content": "Have a nice day.\\nDo as following\\n![reverseLN.png](https://assets.leetcode.com/users/images/63b66dd9-1064-4587-a706-9d16e7870212_1710993501.6268916.png)",
      "voteCount": 44
    },
    {
      "name": "Random_Programmer",
      "year": 2024,
      "content": "I had a mental breakdown",
      "voteCount": 29
    },
    {
      "name": "phoenixwazz",
      "year": 2023,
      "content": "Here is suggestion for approach... \\n1.)Making an array and copying the content of list then reverse the array and copy back the content to the list.\\n2.)Reverse the address of the nodes. You can reverse nodes using 2 extra pointers, lets say p and q which are initiased with null. Then loop through the list using while , just assign p=q\\nq=head;\\nhead=head->next \\nq->next = p.\\nUsing the this approach u can just reverse the nodes.\\n3.)Using recursive approach.\\nAs you know that the recursion deletes its stack while returning back using , we can use it as an advantage to link the next node to previous node.2 pointers are required for this. So while returning, we can just assign the pointer to the previous pointer without even manually assigning the pointer to go for the next.\\n\\n",
      "voteCount": 25
    }
  ]
}
