{
  "category": "",
  "id": "966",
  "name": "Vowel Spellchecker",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/vowel-spellchecker/",
  "slug": "vowel-spellchecker",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Hash Table",
    "String"
  ],
  "similar_questions": [],
  "questionId": "1006",
  "questionFrontendId": "966",
  "title": "Vowel Spellchecker",
  "titleSlug": "vowel-spellchecker",
  "content": "<p>Given a <code>wordlist</code>, we want to implement a spellchecker that converts a query word into a correct word.</p>\n\n<p>For a given <code>query</code> word, the spell checker handles two categories of spelling mistakes:</p>\n\n<ul>\n\t<li>Capitalization: If the query matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the case in the wordlist.\n\n\t<ul>\n\t\t<li>Example: <code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;YellOw&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t\t<li>Example: <code>wordlist = [&quot;Yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;Yellow&quot;</code></li>\n\t\t<li>Example: <code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>Vowel Errors: If after replacing the vowels <code>(&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;)</code> of the query word with any vowel individually, it matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the match in the wordlist.\n\t<ul>\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yollow&quot;</code>: <code>correct = &quot;YellOw&quot;</code></li>\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yeellow&quot;</code>: <code>correct = &quot;&quot;</code> (no match)</li>\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yllw&quot;</code>: <code>correct = &quot;&quot;</code> (no match)</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>In addition, the spell checker operates under the following precedence rules:</p>\n\n<ul>\n\t<li>When the query exactly matches a word in the wordlist (<strong>case-sensitive</strong>), you should return the same word back.</li>\n\t<li>When the query matches a word up to capitlization, you should return the first such match in the wordlist.</li>\n\t<li>When the query matches a word up to vowel errors, you should return the first such match in the wordlist.</li>\n\t<li>If the query has no matches in the wordlist, you should return the empty string.</li>\n</ul>\n\n<p>Given some <code>queries</code>, return a list of words <code>answer</code>, where <code>answer[i]</code> is the correct word for <code>query = queries[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]\n<strong>Output:</strong> [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> wordlist = [\"yellow\"], queries = [\"YellOw\"]\n<strong>Output:</strong> [\"yellow\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= wordlist.length, queries.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= wordlist[i].length, queries[i].length &lt;= 7</code></li>\n\t<li><code>wordlist[i]</code> and <code>queries[i]</code> consist only of only English letters.</li>\n</ul>\n",
  "likes": 442,
  "dislikes": 824,
  "stats": {
    "totalAccepted": "46.9K",
    "totalSubmission": "90.8K",
    "totalAcceptedRaw": 46920,
    "totalSubmissionRaw": 90831,
    "acRate": "51.7%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "String",
      "slug": "string"
    }
  ],
  "metaData": {
    "name": "spellchecker",
    "params": [
      {
        "name": "wordlist",
        "type": "string[]"
      },
      {
        "name": "queries",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "string[]"
    }
  },
  "discussion_posts": [
    {
      "name": "tin_le",
      "year": 2024,
      "content": "Nothing is worse than an easy task with shitty description",
      "voteCount": 9
    },
    {
      "name": "ashishjain87",
      "year": 2018,
      "content": "Consier being given words = [\"paa\",\"poe\"], and query = [\"pue\"].\\n\\nAlthough both \"poe\" and \"paa\" match \"pue\". However, from a hamming distance perspective \"pue\" is closer to \"poe\" (only \\'u\\' and \\'o\\' are different), and therefore, it should be considered a better match compared to \"paa\" (\\'aa\\' is different from \\'ue\\'). The fact that \"paa\" and \"poe\" are equivalent from the problem\\'s perspective was not made very clear in the problem statement.",
      "voteCount": 9
    },
    {
      "name": "ritzo37",
      "year": 2024,
      "content": "Wasted most of my time understanding this question. Here\\'s my explanation if it helps anyone : \\nSo basically the thing is you need to find the matches of the queries in the wordList . There are only three cases : \\n1) There\\'s an exact match of the word present .\\n2) There\\'s some case error . If that\\'s the case then you gotta return the very first match in the wordList . For eg : \\nKiTe , kite and the query word is KITE you just gotta return the first KiTe by first i mean it\\'s first appearance must me before the next kite . if kite, KiTe were the members of the wordList then the output would have been kite ! \\n3) Here you gotta check for vowel errors and again focus on the first occurence !",
      "voteCount": 7
    },
    {
      "name": "gekz",
      "year": 2024,
      "content": "The human readable version of precedence rules:\\n1. Exact match.\\n2. Only capitalization error.\\n3. Everything else (vowels + optional capitalization error).\\nThe problem statement is poor. I had to submit multiple solution to read the mind of the problem author. ",
      "voteCount": 5
    },
    {
      "name": "lwlt",
      "year": 2025,
      "content": "I hate this.",
      "voteCount": 1
    },
    {
      "name": "atharva1371",
      "year": 2025,
      "content": "Divide the problem in three parts\\n\\n1) exact match : if the exact match thats all,\\n2)  Capitalisation : check if there any string exists making string to lowecase or uppercase,\\n3) vowelError : check how a string can be an invalid ",
      "voteCount": 1
    },
    {
      "name": "notneasd",
      "year": 2025,
      "content": "in case you are wondering how to check for vowel match, you could encode all vowels as \"*\" (a wildcard)",
      "voteCount": 0
    },
    {
      "name": "StefanelStan",
      "year": 2023,
      "content": "The problem sounds quite complicated, but it\\'s quite easy.\\nUse some Maps to put the raw, lowercase and vowel-replaced words and look into them.\\n",
      "voteCount": 0
    },
    {
      "name": "jaiyadav",
      "year": 2023,
      "content": "[\"ae\",\"aa\"]\\nqueries =\\n[\"UU\"]\\nOutput\\n[\"aa\"]\\nExpected\\n[\"ae\"]\\n\\nwhy this is wrong output somebody please tell me",
      "voteCount": 0
    }
  ]
}
