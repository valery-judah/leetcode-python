{
  "category": "",
  "id": "281",
  "name": "Zigzag Iterator",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/zigzag-iterator/",
  "slug": "zigzag-iterator",
  "isPaidOnly": true,
  "tags": [
    "Array",
    "Design",
    "Queue",
    "Iterator"
  ],
  "similar_questions": [
    {
      "title": "Binary Search Tree Iterator",
      "difficulty": "Medium",
      "slug": "binary-search-tree-iterator"
    },
    {
      "title": "Flatten 2D Vector",
      "difficulty": "Medium",
      "slug": "flatten-2d-vector"
    },
    {
      "title": "Peeking Iterator",
      "difficulty": "Medium",
      "slug": "peeking-iterator"
    },
    {
      "title": "Flatten Nested List Iterator",
      "difficulty": "Medium",
      "slug": "flatten-nested-list-iterator"
    },
    {
      "title": "Merge Strings Alternately",
      "difficulty": "Easy",
      "slug": "merge-strings-alternately"
    }
  ],
  "questionId": "281",
  "questionFrontendId": "281",
  "title": "Zigzag Iterator",
  "titleSlug": "zigzag-iterator",
  "content": "<p>Given two vectors of integers <code>v1</code> and <code>v2</code>, implement an iterator to return their elements alternately.</p>\n\n<p>Implement the <code>ZigzagIterator</code> class:</p>\n\n<ul>\n\t<li><code>ZigzagIterator(List&lt;int&gt; v1, List&lt;int&gt; v2)</code> initializes the object with the two vectors <code>v1</code> and <code>v2</code>.</li>\n\t<li><code>boolean hasNext()</code> returns <code>true</code> if the iterator still has elements, and <code>false</code> otherwise.</li>\n\t<li><code>int next()</code> returns the current element of the iterator and moves the iterator to the next element.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> v1 = [1,2], v2 = [3,4,5,6]\n<strong>Output:</strong> [1,3,2,4,5,6]\n<strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> v1 = [1], v2 = []\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> v1 = [], v2 = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= v1.length, v2.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= v1.length + v2.length &lt;= 2000</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= v1[i], v2[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if you are given <code>k</code> vectors? How well can your code be extended to such cases?</p>\n\n<p><strong>Clarification for the follow-up question:</strong></p>\n\n<p>The &quot;Zigzag&quot; order is not clearly defined and is ambiguous for <code>k &gt; 2</code> cases. If &quot;Zigzag&quot; does not look right to you, replace &quot;Zigzag&quot; with &quot;Cyclic&quot;.</p>\n\n<p><strong>Follow-up Example:</strong></p>\n\n<pre>\n<strong>Input:</strong> v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9]\n<strong>Output:</strong> [1,4,8,2,5,9,3,6,7]\n</pre>\n",
  "likes": 704,
  "dislikes": 41,
  "stats": {
    "totalAccepted": "107.3K",
    "totalSubmission": "162.6K",
    "totalAcceptedRaw": 107318,
    "totalSubmissionRaw": 162591,
    "acRate": "66.0%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Queue",
      "slug": "queue"
    },
    {
      "name": "Iterator",
      "slug": "iterator"
    }
  ],
  "metaData": {
    "name": "ZigzagIterator",
    "params": [
      {
        "name": "v1",
        "type": "list<integer>"
      },
      {
        "name": "v2",
        "type": "list<integer>"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "manual": true
  },
  "discussion_posts": [
    {
      "name": "istudy0",
      "year": 2016,
      "content": "This is not directly related to the question but it would be good if C++ interface methods are same as iterator class.\\nWhen this question is asked, the interviewer expects to see those operator methods and thus, it will be good to see different interface requirement for C++ so I can learn from others what exactly I need to implement. ;-)",
      "voteCount": 4
    },
    {
      "name": "jonsneep",
      "year": 2024,
      "content": "There\\'s always that one darn testcase that ruins it. Curse you, `v1=[0] v2=[0]`",
      "voteCount": 1
    },
    {
      "name": "ozgrsvk",
      "year": 2024,
      "content": "I solved it merging two lists one by one into a LinkedList, starting from the first list.",
      "voteCount": 1
    },
    {
      "name": "hi-mark",
      "year": 2022,
      "content": "Intuition for python : \\n1. keep a flag variable which keeps track of which vector should you pop out the result of\\n2. Keep two pointers (1  for each vector)",
      "voteCount": 1
    },
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "its pretty easy if you just merged the lists together at the start ",
      "voteCount": 0
    },
    {
      "name": "CanaanYO",
      "year": 2025,
      "content": "only 6 discussion too less",
      "voteCount": 0
    },
    {
      "name": "midwittery",
      "year": 2025,
      "content": "This is so easy in python if you are aware of `zip_longest...` ",
      "voteCount": 0
    },
    {
      "name": "CodeisLit",
      "year": 2024,
      "content": "Memory limit exceeded anyone lol? I created 4 iterators as class members in C++ to track v1/v2.begin(), end(). Leetcode is kinda dumb for not allowing that",
      "voteCount": 0
    }
  ]
}
