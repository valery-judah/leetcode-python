{
  "category": "",
  "id": "215",
  "name": "Kth Largest Element in an Array",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/kth-largest-element-in-an-array/",
  "slug": "kth-largest-element-in-an-array",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Divide and Conquer",
    "Sorting",
    "Heap (Priority Queue)",
    "Quickselect"
  ],
  "similar_questions": [
    {
      "title": "Wiggle Sort II",
      "difficulty": "Medium",
      "slug": "wiggle-sort-ii"
    },
    {
      "title": "Top K Frequent Elements",
      "difficulty": "Medium",
      "slug": "top-k-frequent-elements"
    },
    {
      "title": "Third Maximum Number",
      "difficulty": "Easy",
      "slug": "third-maximum-number"
    },
    {
      "title": "Kth Largest Element in a Stream",
      "difficulty": "Easy",
      "slug": "kth-largest-element-in-a-stream"
    },
    {
      "title": "K Closest Points to Origin",
      "difficulty": "Medium",
      "slug": "k-closest-points-to-origin"
    },
    {
      "title": "Find the Kth Largest Integer in the Array",
      "difficulty": "Medium",
      "slug": "find-the-kth-largest-integer-in-the-array"
    },
    {
      "title": "Find Subsequence of Length K With the Largest Sum",
      "difficulty": "Easy",
      "slug": "find-subsequence-of-length-k-with-the-largest-sum"
    },
    {
      "title": "K Highest Ranked Items Within a Price Range",
      "difficulty": "Medium",
      "slug": "k-highest-ranked-items-within-a-price-range"
    }
  ],
  "questionId": "215",
  "questionFrontendId": "215",
  "title": "Kth Largest Element in an Array",
  "titleSlug": "kth-largest-element-in-an-array",
  "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>largest element in the array</em>.</p>\n\n<p>Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p>\n\n<p>Can you solve it without sorting?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,1,5,6,4], k = 2\n<strong>Output:</strong> 5\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,3,1,2,4,5,5,6], k = 4\n<strong>Output:</strong> 4\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "likes": 18192,
  "dislikes": 953,
  "stats": {
    "totalAccepted": "3.2M",
    "totalSubmission": "4.7M",
    "totalAcceptedRaw": 3201885,
    "totalSubmissionRaw": 4684442,
    "acRate": "68.4%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Divide and Conquer",
      "slug": "divide-and-conquer"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    },
    {
      "name": "Heap (Priority Queue)",
      "slug": "heap-priority-queue"
    },
    {
      "name": "Quickselect",
      "slug": "quickselect"
    }
  ],
  "metaData": {
    "name": "findKthLargest",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 158
      },
      {
        "taggedByAdmin": false,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 18
      },
      {
        "taggedByAdmin": true,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 13
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "Hemant_kr03",
      "year": 2023,
      "content": "This problem is medium because it has a non intuitive approach to solve it in $$O(n)$$. I also struggle in solving it.\\n\\nAs after reading the problem the only possible solution I had thought of were:\\n1. **sorting**:  which is mention not to use.\\n2. **Mapping**: In this I mapped the frequency of all the number and then find the kth largest number.\\n3. **Binary search**: In this I applied binary search between smallest and largest element and for every mid element I counted the number of larger element if it is equal to k - 1 then the mid element is our solution else update the end and start of the search space.\\n\\nThe problem with all these solution was that all of then have time complexity equal to or nearly $$O(nlogn)$$.\\n\\nGot a tip about \"quick select,\" which sounded like a speedy elevator to coding nirvana. Of course, I didn\\'t know its dance steps, so I turned to the sacred scrolls (aka tutorials) for guidance. Turns out, it\\'s a \"divide and conquer\" gig \\u2013 classic move!\\n\\nBut wait, there\\'s a twist: a worst-case scenario of \\n$$O(n ^ 2)$$ and an average-case superhero mode of \\n$$O(n)$$.\\n\\nThe best solution might be with the use of heap(Priority queue) which I don\\'t know. Lesson learned? LeetCode 1, Me 0. But hey, I learned enough to be dangerous! \\uD83C\\uDF89\\uD83D\\uDCA5",
      "voteCount": 271
    },
    {
      "name": "aDish_21",
      "year": 2023,
      "content": "Whenever we have been given to find position of any kth element then mostly we use priority queue/ heap i.e to find kth smallest element use maxHeap & to find kth largest element we use minHeap. I hope it helpsðŸ™‚",
      "voteCount": 181
    },
    {
      "name": "sb26",
      "year": 2019,
      "content": "Why is this a medium level question ?\\n\\n\\n",
      "voteCount": 177
    },
    {
      "name": "user5075zH",
      "year": 2022,
      "content": "They should specify \"average\" time complexity instead of saying \"O(n)\" in the problem description. I thought of quick select but then when they said O(n) I thought they meant worst case time complexity because they are using big-O notation. Average time complexity is linear time complexity for quick select but worst case is n^2 or O(n^2)\n\nProblem statements need to be more clear :) \n\nLol I was trying to figure out how to do this in O(n) worst case run time and came up with count sort. But this would be largely a waste in memory (to allocate an array of such a large size). ",
      "voteCount": 69
    },
    {
      "name": "YJazz",
      "year": 2023,
      "content": "Quickselect with O(1) extra space will cause tle in the 41st testcase. The editorial answer will pass all of the test cases. This is because the editorial answer uses `mid` to record values that are equal to pivot. All those using quickselect should give attention to this testcase, which contains plenty of same elements.",
      "voteCount": 64
    },
    {
      "name": "codebiz",
      "year": 2023,
      "content": "### How to identify that this question can be solved using Heap?\\n99% on questions in Heap will use the the words : **\"K\"** and **\"smallest/largest/closest\".**\\nSo, whenever you see a question involving these words, always run your mind to Heaps.\\n### Why use Min Heap ?\\nAs a thumb rule : \\n- When asked for **smallest** element, use Max Heap.\\n- When asked for **largest** element, use Min Heap.",
      "voteCount": 62
    },
    {
      "name": "clonyl",
      "year": 2016,
      "content": "You need to use randomized pivot instead of fixed pivot. \\nThere are 2 tests on finding smallest/biggest element given a huge sorted array. If you use fixed pivot the algorithm will exceed time limit.",
      "voteCount": 33
    },
    {
      "name": "menothe",
      "year": 2019,
      "content": "if I have an array [1, 2, 3, 4, 5, 6], N = 6 since there are 6 numbers. If I want to know the k = 2, or 2nd largest number (answer = 5), then that means that according to (N - k), 5 is also the (6 - 2) or 4th smallest number. But isn\\'t 4 the 4th smallest ? Or is the logic applying to only a 0-index based counting system. Can someone please explain?",
      "voteCount": 28
    },
    {
      "name": "GeekyBoringDude",
      "year": 2023,
      "content": "I tried QuickSelect with a randomised pivot and it still didn\\'t work. :/ ",
      "voteCount": 27
    },
    {
      "name": "ssredotime",
      "year": 2023,
      "content": "Recently a test case was added (#40) that causes QuickSelect to TLE unless you use the less common Hoare partitioning scheme. I often come to this problem to quickly practice/refresh Lomuto partitioning scheme (the one that is more commonly taught for QuickSort/QuickSelect for DSA). Could another similar question be added where Lomuto scheme works? Or remove that testcase. It is nice to be able to practice both implementations.",
      "voteCount": 25
    }
  ]
}
