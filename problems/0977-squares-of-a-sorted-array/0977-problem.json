{
  "category": "",
  "id": "977",
  "name": "Squares of a Sorted Array",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/squares-of-a-sorted-array/",
  "slug": "squares-of-a-sorted-array",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Two Pointers",
    "Sorting"
  ],
  "similar_questions": [
    {
      "title": "Merge Sorted Array",
      "difficulty": "Easy",
      "slug": "merge-sorted-array"
    },
    {
      "title": "Sort Transformed Array",
      "difficulty": "Medium",
      "slug": "sort-transformed-array"
    }
  ],
  "questionId": "1019",
  "questionFrontendId": "977",
  "title": "Squares of a Sorted Array",
  "titleSlug": "squares-of-a-sorted-array",
  "content": "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing</strong> order, return <em>an array of <strong>the squares of each number</strong> sorted in non-decreasing order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-4,-1,0,3,10]\n<strong>Output:</strong> [0,1,9,16,100]\n<strong>Explanation:</strong> After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-7,-3,2,3,11]\n<strong>Output:</strong> [4,9,9,49,121]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code><span>1 &lt;= nums.length &lt;= </span>10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Squaring each element and sorting the new array is very trivial, could you find an <code>O(n)</code> solution using a different approach?",
  "likes": 9829,
  "dislikes": 259,
  "stats": {
    "totalAccepted": "2.3M",
    "totalSubmission": "3.2M",
    "totalAcceptedRaw": 2335913,
    "totalSubmissionRaw": 3185552,
    "acRate": "73.3%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    }
  ],
  "metaData": {
    "name": "sortedSquares",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 20
      },
      {
        "taggedByAdmin": false,
        "name": "Uber",
        "slug": "uber",
        "timesEncountered": 16
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "robertocannella",
      "year": 2022,
      "content": "I created this interacitve tool to help me understand visually what is happening behind the code.   It  may help out others as well.  I will continue to build these so if there is interest in a specific algorithm or challenge, just send a note.\\nhttps://robertocannella-f5b4b.web.app/coding-challenges/sorted-squares",
      "voteCount": 333
    },
    {
      "name": "senth",
      "year": 2024,
      "content": "why can\\'t they write INCREASING order, instead of non-decreasing order? what\\'s with that?",
      "voteCount": 78
    },
    {
      "name": "Primusai",
      "year": 2019,
      "content": "Python\\'s builtin sort is timsort which works by aggregating increasing and decreasing runs and then merging them. Since the resultant array after squaring all the terms will be first strictly decreasing and then strictly increasing, timsort reverses the strictly decreasing segment and then merges both runs in O(N).",
      "voteCount": 78
    },
    {
      "name": "anwendeng",
      "year": 2024,
      "content": "Use 2 pointers is the right way.\\nUse sorting is an easy way.\\nHave a nice day.",
      "voteCount": 73
    },
    {
      "name": "puckhog08",
      "year": 2020,
      "content": "In the Arrays 101 Explore card leetcode asks you to solve this problem in-place and in O(n) time:\\n\\n\"This time, you must solve it in O(N) time and O(1) space. No using built-in sort, and no creating a new array.\"\\n\\nHowever, even their own solution doesn\\'t meet these requirements. It doesn\\'t seem possible to stay within O(n) time without using extra space. Has anyone solved it this way?",
      "voteCount": 56
    },
    {
      "name": "psionl0",
      "year": 2024,
      "content": "Extra sorting is not required. The nums array is already sorted in non decreasing order. Therefore, when squared, the largest numbers will be from the beginning or the end of the array.",
      "voteCount": 22
    },
    {
      "name": "IamHazra",
      "year": 2024,
      "content": "Bas har cheez shot kar ne me hi pura zindagi nikal gaya.",
      "voteCount": 17
    },
    {
      "name": "Am_it",
      "year": 2024,
      "content": "HINT for Optimal Solution:\\nIt is a slight modification of merging two already sorted arrays. Here, you have to use two pointers: put the first pointer on the last negative element and put the second pointer on the first non-negative element, then start your traversals.\\n\\nFor example:\\narr = [-4, -3, -1, 0, 2, 3]\\nPut i = 2 (at the 2nd index) -> last negative element index,\\nPut j = 3 (at the 3rd index) -> first non-negative element index.\\nStart traversing i from right to left and j from left to right and compare the values. Take the absolute value of the left side because after squaring, it will become positive.\\n\\nIn the first iteration, it will compare 1 and 0.\\n0 < |(-1)|, so it will push the square of 0 into our result and increment j.\\nNow |(-1)| < 2, so put (-1) * (-1) = 1 into the result and decrement i, and so on...\\n\\nAlso, whenever one pointer is exhausted, don\\'t forget to copy the square of the remaining elements.\\n\\nI hope that helps!",
      "voteCount": 14
    },
    {
      "name": "mstuebs",
      "year": 2024,
      "content": "Let\\'s try some additional testcases :-)\\n```\\n[-5815]\\n[-1868,5061]\\n[-9764,-9613,-8918,-8778,-8747,-8611,-8469,-8434,-7935,-7907,-7713,-7500,-7008,-6398,-6315,-5773,-5479,-5287,-5021,-5018,-4937,-4775,-4533,-4355,-4314,-4290,-4163,-3696,-3692,-3681,-3666,-3638,-3097,-3065,-3039,-2817,-2665,-2655,-2557,-2425,-2284,-2043,-822,-721,-623,-507,-396,-341,-224,-49]\\n[309,381,681,1066,1127,1254,1436,1709,2305,2387,2392,2500,2518,2573,2665,2688,2835,2900,3182,3386,3441,3468,3987,4113,4256,4257,4277,4639,5040,5086,5614,5803,5856,6029,6226,6288,6447,6481,6726,6959,7303,7384,7669,7701,8198,9129,9548,9652,9794,9978]\\n[-9662,-9489,-9264,-9225,-8439,-8177,-7675,-7398,-7379,-6374,-6295,-6199,-5457,-3899,-3762,-3696,-1638,-1316,-341,-76,503,1442,1707,2230,2729,2747,3633,3658,3763,3885,4552,4562,4688,4711,4972,5169,5355,5734,6482,6880,6938,7213,7467,7575,7940,8096,8603,8873,8979,9442]\\n[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\\n[-4280,-4280,-4280,-4280,-4280,-4280,-4280,-4280,-4280,-4280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,3659,3659,3659,3659,3659,3659,3659,3659]\\nn```\\n    # 1. Only 1 element\\n    # 2. Only 2 elements\\n    # 3. Only negative elements\\n    # 4. Only positive elements\\n    # 5. Random elements\\n    # 6. Only identical elements\\n    # 7. Low variance of elements\\n    # 8. High number of elements\\n\\nTo check for TLE, check out this [testcase with 10000 list elements](https://github.com/mquintus/l33tcode-testcase-generator/blob/main/generated/977_Squares_of_a_Sorted_Array.txt)",
      "voteCount": 14
    },
    {
      "name": "milileetcode",
      "year": 2020,
      "content": "![image](https://assets.leetcode.com/users/images/50ed0057-5595-48b7-bfc2-41c60b2f3229_1595280154.602534.png)\\n\\n\\nThis time, you must solve it in O(N) time and O(1) space. No using built-in sort, and no creating a new array.\\n\\nDid anyone work out such a solution?\\n",
      "voteCount": 9
    }
  ]
}
