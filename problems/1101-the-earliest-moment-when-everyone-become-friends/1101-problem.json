{
  "category": "",
  "id": "1101",
  "name": "The Earliest Moment When Everyone Become Friends",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/the-earliest-moment-when-everyone-become-friends/",
  "slug": "the-earliest-moment-when-everyone-become-friends",
  "isPaidOnly": true,
  "tags": [
    "Array",
    "Union Find",
    "Sorting"
  ],
  "similar_questions": [
    {
      "title": "Number of Provinces",
      "difficulty": "Medium",
      "slug": "number-of-provinces"
    }
  ],
  "questionId": "1085",
  "questionFrontendId": "1101",
  "title": "The Earliest Moment When Everyone Become Friends",
  "titleSlug": "the-earliest-moment-when-everyone-become-friends",
  "content": "<p>There are n people in a social group labeled from <code>0</code> to <code>n - 1</code>. You are given an array <code>logs</code> where <code>logs[i] = [timestamp<sub>i</sub>, x<sub>i</sub>, y<sub>i</sub>]</code> indicates that <code>x<sub>i</sub></code> and <code>y<sub>i</sub></code> will be friends at the time <code>timestamp<sub>i</sub></code>.</p>\n\n<p>Friendship is <strong>symmetric</strong>. That means if <code>a</code> is friends with <code>b</code>, then <code>b</code> is friends with <code>a</code>. Also, person <code>a</code> is acquainted with a person <code>b</code> if <code>a</code> is friends with <code>b</code>, or <code>a</code> is a friend of someone acquainted with <code>b</code>.</p>\n\n<p>Return <em>the earliest time for which every person became acquainted with every other person</em>. If there is no such earliest time, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], n = 6\n<strong>Output:</strong> 20190301\n<strong>Explanation:</strong> \nThe first event occurs at timestamp = 20190101, and after 0 and 1 become friends, we have the following friendship groups [0,1], [2], [3], [4], [5].\nThe second event occurs at timestamp = 20190104, and after 3 and 4 become friends, we have the following friendship groups [0,1], [2], [3,4], [5].\nThe third event occurs at timestamp = 20190107, and after 2 and 3 become friends, we have the following friendship groups [0,1], [2,3,4], [5].\nThe fourth event occurs at timestamp = 20190211, and after 1 and 5 become friends, we have the following friendship groups [0,1,5], [2,3,4].\nThe fifth event occurs at timestamp = 20190224, and as 2 and 4 are already friends, nothing happens.\nThe sixth event occurs at timestamp = 20190301, and after 0 and 3 become friends, we all become friends.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> logs = [[0,2,0],[1,0,1],[3,0,3],[4,1,2],[7,3,1]], n = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> At timestamp = 3, all the persons (i.e., 0, 1, 2, and 3) become friends.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= logs.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>logs[i].length == 3</code></li>\n\t<li><code>0 &lt;= timestamp<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>x<sub>i</sub> != y<sub>i</sub></code></li>\n\t<li>All the values <code>timestamp<sub>i</sub></code> are <strong>unique</strong>.</li>\n\t<li>All the pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> occur at most one time in the input.</li>\n</ul>\n",
  "likes": 1101,
  "dislikes": 40,
  "stats": {
    "totalAccepted": "122.9K",
    "totalSubmission": "187K",
    "totalAcceptedRaw": 122870,
    "totalSubmissionRaw": 186990,
    "acRate": "65.7%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Union Find",
      "slug": "union-find"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    }
  ],
  "metaData": {
    "name": "earliestAcq",
    "params": [
      {
        "name": "logs",
        "type": "integer[][]"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "YuYu_online",
      "year": 2024,
      "content": "the problem does not clarify clear if the timestamp is in increasing order",
      "voteCount": 38
    },
    {
      "name": "etanila",
      "year": 2024,
      "content": "The example explanation is a huge hint on Union Find.",
      "voteCount": 13
    },
    {
      "name": "baxterbarlow",
      "year": 2024,
      "content": "Heads up, the logs are not sorted so make sure to do that first (but the author should have definitely specified that)",
      "voteCount": 7
    },
    {
      "name": "nllsdfx",
      "year": 2022,
      "content": "Explain me pls, why my answer (8) is wrong when logs = [[9,3,0],[0,2,1],[8,0,1],[1,3,2],[2,2,0],[3,3,1]], n = 4?\\n\\n3-0, 2-1, 0-1? 0 connected with 1 and 3, and 1 knows about 2, right? Is it a bug?",
      "voteCount": 7
    },
    {
      "name": "parkr96",
      "year": 2023,
      "content": "Took me an embarrassing amount of time to realize logs isn\\'t sorted by timestamp from the start :D lol",
      "voteCount": 6
    },
    {
      "name": "amt93",
      "year": 2024,
      "content": "I should have read the examples closer before starting. This question confused me by using acquaintances and friends interchangeably. I was thinking the acquaintance relation would be a separation of 1 instead of it all being one group. So I may gain someone\\'s friends as my own acquaintances, but I won\\'t gain their acquaintances. That\\'s on me, but better to just use one word imo",
      "voteCount": 4
    },
    {
      "name": "jasperjoe",
      "year": 2019,
      "content": "I am not quite familiar with Union-Find. Hopefully someone could share other ways to solve this kind of problems.",
      "voteCount": 4
    },
    {
      "name": "navaneeth98",
      "year": 2024,
      "content": "Leetcode explore cards on graphs are really great man. I have been doing them and came across this question and was able to solve this in less than 10 mins. From being a noob at graphs to be able to do this, it feels really nice. ",
      "voteCount": 3
    },
    {
      "name": "anujamin01",
      "year": 2024,
      "content": "The interchangeable use of \"acquaintance\" and \"friend\" makes the explanation of this problem way more difficult to understand than it should be.",
      "voteCount": 3
    },
    {
      "name": "DivSar_15",
      "year": 2023,
      "content": "This problem is similar to [Redundant connection](https://leetcode.com/problems/redundant-connection/). We\\'re required to get the timestamp of the last non-redundant connecting edge between two disjoint sets.",
      "voteCount": 2
    }
  ]
}
