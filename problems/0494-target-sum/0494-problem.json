{
  "category": "",
  "id": "494",
  "name": "Target Sum",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/target-sum/",
  "slug": "target-sum",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Dynamic Programming",
    "Backtracking"
  ],
  "similar_questions": [
    {
      "title": "Expression Add Operators",
      "difficulty": "Hard",
      "slug": "expression-add-operators"
    },
    {
      "title": "Ways to Express an Integer as Sum of Powers",
      "difficulty": "Medium",
      "slug": "ways-to-express-an-integer-as-sum-of-powers"
    }
  ],
  "questionId": "494",
  "questionFrontendId": "494",
  "title": "Target Sum",
  "titleSlug": "target-sum",
  "content": "<p>You are given an integer array <code>nums</code> and an integer <code>target</code>.</p>\n\n<p>You want to build an <strong>expression</strong> out of nums by adding one of the symbols <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code> before each integer in nums and then concatenate all the integers.</p>\n\n<ul>\n\t<li>For example, if <code>nums = [2, 1]</code>, you can add a <code>&#39;+&#39;</code> before <code>2</code> and a <code>&#39;-&#39;</code> before <code>1</code> and concatenate them to build the expression <code>&quot;+2-1&quot;</code>.</li>\n</ul>\n\n<p>Return the number of different <strong>expressions</strong> that you can build, which evaluates to <code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1,1], target = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], target = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n</ul>\n",
  "likes": 12043,
  "dislikes": 406,
  "stats": {
    "totalAccepted": "958.6K",
    "totalSubmission": "1.9M",
    "totalAcceptedRaw": 958598,
    "totalSubmissionRaw": 1871904,
    "acRate": "51.2%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ],
  "metaData": {
    "name": "findTargetSumWays",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "Seedhe_Maut",
      "year": 2024,
      "content": "Just a pointless pursuit a career in CS turns out to be a career in solving brainless puzzles",
      "voteCount": 536
    },
    {
      "name": "ruokay",
      "year": 2023,
      "content": "even recursion got accepted :)",
      "voteCount": 171
    },
    {
      "name": "lingarajbal",
      "year": 2020,
      "content": "/**\\n *  Lets first see the concept here.\\n *  The question asked to assign symbols to each interger.In other words we have to \\n *  divide the whole array into two sub sets having sum S1 and S2. S1-S2=S. Lets draw some\\n *  relation here.\\n *  S1 + S2 = TotalSum(sum of all array elements) [ Equation 1]\\n *  S1 - S2 = S (asked in the question)           [Equation  2]\\n *  if we add Equation 1 and 2 we will have. S1 = (TotalSum + S)/2\\n *  Now the number of sub set of having sum S1 should be the answer to the question.\\n * \\n **/",
      "voteCount": 118
    },
    {
      "name": "Dhananjay40",
      "year": 2023,
      "content": "Is it only me who did get the recurrence relation but unable to implement DP? ",
      "voteCount": 113
    },
    {
      "name": "adityakumar8068",
      "year": 2024,
      "content": "TESTCASES------------->(^finally became gaurdian \ud83e\udd73)\n```\n[1,0]\n1\n[100,100]\n-300\n[12,25,42,49,41,15,22,34,28,31]\n35\n[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\n1\n[3,2,3,5,7,11,13,17,19,23,29,2,7,9,13,27,31,37,47,53]\n107\n[0,5,22,39,30,5,40,23,47,43,19,36,10,28,46,14,11,5,50,41]\n48\n[30,29,48,14,29,4,31,12,40,13,30,1,5,32,16,17,13,20,41,38]\n9\n[3,2,3,5,7,11,13,17,19,23,29,2,107,109,113,127,131,137,47,53]\n4",
      "voteCount": 86
    },
    {
      "name": "r0hitm",
      "year": 2023,
      "content": "I think question should have been mentioned that we have to use all the elements of array. if i am wrong please correct me.",
      "voteCount": 71
    },
    {
      "name": "kaiyikang",
      "year": 2019,
      "content": "The idea comes from [this post](https://leetcode.com/explore/learn/card/queue-stack/232/practical-application-stack/1389/discuss/97334/Java-(15-ms)-C++-(3-ms)-O(ns)-iterative-DP-solution-using-subset-sum-with-explanation) and this graph shows my personal understanding of the DP solution.\\n![image](https://assets.leetcode.com/users/kaiyikang/image_1569211092.png)\\n",
      "voteCount": 66
    },
    {
      "name": "sarpalmadhav",
      "year": 2023,
      "content": "For those friends who are worrying about negative target, here\\'s a Hint: That the number of ways to get -x is same as number of ways to get +x (just switch every sign in array). I cant believe even the editorial solution doesn\\'t get this right and solves unnecessarily for `[-x , x]` whereas `[0, x]` is sufficient!!",
      "voteCount": 47
    },
    {
      "name": "ElayMarco",
      "year": 2017,
      "content": "No explanation as to why something works, or even what you are doing. It's not helpful to most people.",
      "voteCount": 47
    },
    {
      "name": "Shashank_1203",
      "year": 2024,
      "content": "200th problem",
      "voteCount": 39
    }
  ]
}
