{
  "category": "",
  "id": "300",
  "name": "Longest Increasing Subsequence",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/longest-increasing-subsequence/",
  "slug": "longest-increasing-subsequence",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Binary Search",
    "Dynamic Programming"
  ],
  "similar_questions": [
    {
      "title": "Increasing Triplet Subsequence",
      "difficulty": "Medium",
      "slug": "increasing-triplet-subsequence"
    },
    {
      "title": "Russian Doll Envelopes",
      "difficulty": "Hard",
      "slug": "russian-doll-envelopes"
    },
    {
      "title": "Maximum Length of Pair Chain",
      "difficulty": "Medium",
      "slug": "maximum-length-of-pair-chain"
    },
    {
      "title": "Number of Longest Increasing Subsequence",
      "difficulty": "Medium",
      "slug": "number-of-longest-increasing-subsequence"
    },
    {
      "title": "Minimum ASCII Delete Sum for Two Strings",
      "difficulty": "Medium",
      "slug": "minimum-ascii-delete-sum-for-two-strings"
    },
    {
      "title": "Minimum Number of Removals to Make Mountain Array",
      "difficulty": "Hard",
      "slug": "minimum-number-of-removals-to-make-mountain-array"
    },
    {
      "title": "Find the Longest Valid Obstacle Course at Each Position",
      "difficulty": "Hard",
      "slug": "find-the-longest-valid-obstacle-course-at-each-position"
    },
    {
      "title": "Minimum Operations to Make the Array K-Increasing",
      "difficulty": "Hard",
      "slug": "minimum-operations-to-make-the-array-k-increasing"
    },
    {
      "title": "Longest Ideal Subsequence",
      "difficulty": "Medium",
      "slug": "longest-ideal-subsequence"
    },
    {
      "title": "Maximum Number of Books You Can Take",
      "difficulty": "Hard",
      "slug": "maximum-number-of-books-you-can-take"
    },
    {
      "title": "Longest Increasing Subsequence II",
      "difficulty": "Hard",
      "slug": "longest-increasing-subsequence-ii"
    },
    {
      "title": "Find the Maximum Length of a Good Subsequence II",
      "difficulty": "Hard",
      "slug": "find-the-maximum-length-of-a-good-subsequence-ii"
    },
    {
      "title": "Find the Maximum Length of a Good Subsequence I",
      "difficulty": "Medium",
      "slug": "find-the-maximum-length-of-a-good-subsequence-i"
    },
    {
      "title": "Find the Maximum Length of Valid Subsequence I",
      "difficulty": "Medium",
      "slug": "find-the-maximum-length-of-valid-subsequence-i"
    },
    {
      "title": "Find the Maximum Length of Valid Subsequence II",
      "difficulty": "Medium",
      "slug": "find-the-maximum-length-of-valid-subsequence-ii"
    },
    {
      "title": "Longest Subsequence With Decreasing Adjacent Difference",
      "difficulty": "Medium",
      "slug": "longest-subsequence-with-decreasing-adjacent-difference"
    }
  ],
  "questionId": "300",
  "questionFrontendId": "300",
  "title": "Longest Increasing Subsequence",
  "titleSlug": "longest-increasing-subsequence",
  "content": "<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing </strong></em><span data-keyword=\"subsequence-array\"><em><strong>subsequence</strong></em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,9,2,5,3,7,101,18]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,3,2,3]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b>&nbsp;Can you come up with an algorithm that runs in&nbsp;<code>O(n log(n))</code> time complexity?</p>\n",
  "likes": 22196,
  "dislikes": 492,
  "stats": {
    "totalAccepted": "2.3M",
    "totalSubmission": "4M",
    "totalAcceptedRaw": 2330142,
    "totalSubmissionRaw": 3994939,
    "acRate": "58.3%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "metaData": {
    "name": "lengthOfLIS",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 14
      },
      {
        "taggedByAdmin": false,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 11
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "pratham2398",
      "year": 2024,
      "content": "I wish everyone who comes across this message attains their dream job in 2024!",
      "voteCount": 1627
    },
    {
      "name": "johnfredricks",
      "year": 2023,
      "content": "This shit is hard as shit",
      "voteCount": 826
    },
    {
      "name": "Ricky0xB7",
      "year": 2024,
      "content": "When I came up with the DP solution by myself: All the hard working finally paid off!\nAfter reading through the binary search solution: I am an idiot. I've learned nothing.",
      "voteCount": 329
    },
    {
      "name": "Androw77",
      "year": 2023,
      "content": "I hate dynamic programming",
      "voteCount": 287
    },
    {
      "name": "bharath914",
      "year": 2024,
      "content": "It\\'s not a solution but check this once. Found in submissions \\uD83D\\uDE02\\uD83E\\uDD23This guy is a genius \\uD83D\\uDE02\\n\\n```java\\nclass Solution {\\n    private static int index = 0;\\n    private static int[] ans = new int[55];\\n\\n    static {\\n        ans[0] = 4;\\n        ans[1] = 4;\\n        ans[2] = 1;\\n        ans[3] = 1;\\n        ans[4] = 1;\\n        ans[5] = 2;\\n        ans[6] = 3;\\n        ans[7] = 2;\\n        ans[8] = 2;\\n        ans[9] = 1;\\n        ans[10] = 1;\\n        ans[11] = 1;\\n        ans[12] = 3;\\n        ans[13] = 3;\\n        ans[14] = 1;\\n        ans[15] = 6;\\n        ans[16] = 3;\\n        ans[17] = 5;\\n        ans[18] = 6;\\n        ans[19] = 6;\\n        ans[20] = 6;\\n        ans[21] = 7;\\n        ans[22] = 2500;\\n        ans[23] = 1;\\n        ans[24] = 2;\\n        ans[25] = 3;\\n        ans[26] = 2;\\n        ans[27] = 3;\\n        ans[28] = 6;\\n        ans[29] = 8;\\n        ans[30] = 4;\\n        ans[31] = 4;\\n        ans[32] = 4;\\n        ans[33] = 10;\\n        ans[34] = 6;\\n        ans[35] = 5;\\n        ans[36] = 25;\\n        ans[37] = 33;\\n        ans[38] = 32;\\n        ans[39] = 43;\\n        ans[40] = 41;\\n        ans[41] = 58;\\n        ans[42] = 53;\\n        ans[43] = 53;\\n        ans[44] = 52;\\n        ans[45] = 57;\\n        ans[46] = 71;\\n        ans[47] = 72;\\n        ans[48] = 74;\\n        ans[49] = 79;\\n        ans[50] = 80;\\n        ans[51] = 88;\\n        ans[52] = 87;\\n        ans[53] = 96;\\n        ans[54] = 1;\\n    }\\n    \\n    public int lengthOfLIS(int[] nums) {\\n        return ans[index++];\\n    }\\n    \\n}\\n\\n```",
      "voteCount": 260
    },
    {
      "name": "MansiDhruv",
      "year": 2024,
      "content": "Sometimes I feel too dumb to not be able to solve questions even after an hour. Learning DSA is the toughest and the most self disciplinary journey I have started and yet it still feels like I suck at it. \\nReminding myself and people like me to trust the process and keep working. ",
      "voteCount": 184
    },
    {
      "name": "theberlinbird",
      "year": 2023,
      "content": "Should be classified as hard",
      "voteCount": 129
    },
    {
      "name": "Santosh_Kumar29",
      "year": 2023,
      "content": "Approches of this problem:\\n\\nInitialization:\\n\\nCreate an array, dp, initialized with all elements as 1. This array will store the length of the longest increasing subsequence ending at each index.\\nInitialize a variable, max_length, to store the maximum length of the subsequence found.\\nIterate through the array:\\n\\nFor each element at index i (from 1 to n-1), compare it with all elements before it (from 0 to i-1).\\nIf nums[j] < nums[i] (where j ranges from 0 to i-1), it means the element at index i can be a part of a longer subsequence.\\nUpdate dp[i] to be the maximum value of dp[i] and dp[j] + 1.\\nFind the maximum length:\\n\\nAfter the iteration, the dp array will hold the length of the longest increasing subsequence ending at each index.\\nFind the maximum value in the dp array, which represents the length of the longest increasing subsequence in the entire array.",
      "voteCount": 86
    },
    {
      "name": "mstuebs",
      "year": 2024,
      "content": "Fresh Testcases :-)\\n```\\n[-86,-60]\\n[-35,27,-71,-24,-13,-13,15,10,45,-75,-53,-75,29,-39,-56,44,5,-39,-16,-18,35,5,-34,47,-62,-56,-59,-72,-40,-70,-68,-25,-9,-11,37,-46,-35,-18,9,-54,3,0,25,-34,-21,-73,-46,-26,-43,-18]\\n[98,42,61,11,-24,-47,83,-9,85,60,-45,-25,14,75,73,-16,-22,-27,-7,-17,16,54,37,81,87,38,18,-17,100,-42,86,45,-40,60,92,39,83,0,65,96,85,-21,97,23,-20,-34,75,53,30,37,-4,6,29,-39,37,-42,-18,69,8,-33,-25,10,-20,74,-47,95,66,-32,84,-3,25,12,-25,60,51,93,81,-10,-28,-34,-22,64,-45,-18,-31,91,39,-10,59,-31,52,12,-39,58,-22,81,69,88,0,95]\\n[73,102,67,137,136,199,190,115,108,147,195,119,107,71,41,94,190,198,80,87,70,180,139,83,137,188,74,115,9,183,39,13,68,136,132,71,196,100,27,0,90,94,170,198,190,199,116,84,189,112,140,170,5,115,29,94,109,23,89,153,168,48,122,40,11,123,173,49,10,113,114,19,127,125,61,28,141,134,82,65,196,152,156,50,74,91,28,117,126,3,63,84,106,144,125,179,121,28,127,187,96,68,176,116,121,59,156,131,109,193,12,75,79,2,160,164,82,105,65,169,165,142,27,121,75,80,199,35,78,23,86,118,124,162,159,98,65,162,149,197,162,196,145,96,200,82,19,74,55,24,181,122,167,165,9,113,176,90,40,88,64,85,175,2,24,105,35,37,159,127,26,3,144,51,18,187,170,107,188,4,84,198,144,80,172,2,23,18,3,37,7,124,118,184,62,41,113,156,194,149]\\n[141,238,170,166,119,203,194,115,280,50,211,135,274,177,249,258,114,269,55,280,175,87,109,101,166,201,56,236,171,57,198,113,215,131,168,51,204,245,55,229,228,124,89,76,229,233,57,69,144,120,202,128,68,96,62,63,98,118,78,177,237,156,76,249,99,168,202,130,189,198,270,86,248,262,62,170,146,210,109,287,229,90,143,157,250,261,186,127,233,137,148,92,149,276,219,58,112,218,245,294,283,171,178,213,108,293,58,157,58,95,202,193,91,107,57,276,139,80,58,262,268,226,173,62,79,195,249,124,266,260,112,277,279,131,85,164,219,292,201,184,216,187,256,108,210,175,245,145,191,204,261,59,57,226,167,194,222,153,210,65,77,85,237,96,65,95,84,273,284,273,172,249,176,276,98,103,262,209,282,70,244,193,220,174,127,240,236,85,212,95,64,194,219,93,246,263,199,239,87,72,75,190,189,143,90,85,267,265,166,72,185,189,287,293,272,230,288,256,209,159,216,161,74,128,100,214,95,127,157,193,93,178,139,187,298,62,134,242,170,142,257,77,160,123,203,249,101,140,218,113,65,222,247,77,93,133,83,296,81,158,81,203,252,145,127,135,124,219,73,228,105,156,198,233,101,175,90,105,274,221,285,288,76,267,66,286,228,248,274,244,290,109,227,73,155,73,214,189,142,261]\\n[389,139,398,331,325,197,151,112,268,217,107,378,279,385,295,291,314,336,188,258,244,199,355,203,261,207,290,239,193,303,346,347,324,183,114,194,229,160,122,149,382,360,261,228,152,343,181,359,335,313,158,255,294,185,102,208,325,340,132,201,181,339,124,240,382,218,301,197,365,206,355,238,251,119,224,207,367,131,270,114,301,260,152,339,361,363,154,295,366,372,193,379,358,363,394,118,384,183,191,366,216,331,336,226,101,363,282,229,384,322,338,209,262,215,205,300,306,329,183,361,252,277,171,148,116,224,273,316,306,269,269,347,361,285,219,390,309,206,180,358,126,340,233,273,351,233,332,167,255,225,146,223,103,120,267,345,180,141,369,141,358,393,190,215,373,274,244,339,179,279,384,391,319,312,327,228,237,158,398,136,324,161,191,210,146,276,129,206,134,310,180,179,193,127,319,276,305,275,276,137,206,247,287,279,276,180,180,299,139,305,297,105,185,337,330,356,170,318,390,396,356,124,132,328,227,344,150,279,340,367,269,247,170,208,370,330,165,169,304,121,257,328,351,253,203,158,268,370,396,213,321,313,139,204,368,392,137,285,347,296,330,322,260,373,367,149,314,394,283,184,384,147,223,197,307,246,246,155,395,323,195,196,299,253,318,196,268,217,373,327,308,100,241,264,352,367,136,322,343,199,294,294,217,118,168,230,113,361,330,185,110,219,354,327,364,283,198,141,389,249,112,135,188,120,314,321,341,367,378,330,312,385,287,226,245,357,356,365,181,216,186,357,341,328,396,277,273,222,310,201,277,212,118,313,340,114,194,305,108,176,297,390,309,109,364,344,141,223,126,150,388,187,254,113,147,365,183,178,200,314,324,113,218,228,285,157,256,145,357,181,188,137,207,350,316,262,238,326,171,286]\\n[-8358,-8357,-8356,-8355,-8354,-8353,-8352,-8351,-8350,-8349,-8348,-8347,-8346,-8345,-8344,-8343,-8342,-8341,-8340,-8339,-8338,-8337,-8336,-8335,-8334,-8333,-8332,-8331,-8330,-8329,-8328,-8327,-8326,-8325,-8324,-8323,-8322,-8321,-8320,-8319,-8318,-8317,-8316,-8315,-8314,-8313,-8312,-8311,-8310,-8309,-8308,-8307,-8306,-8305,-8304,-8303,-8302,-8301,-8300,-8299,-8298,-8297,-8296,-8295,-8294,-8293,-8292,-8291,-8290,-8289,-8288,-8287,-8286,-8285,-8284,-8283,-8282,-8281,-8280,-8279,-8278,-8277,-8276,-8275,-8274,-8273,-8272,-8271,-8270,-8269,-8268,-8267,-8266,-8265,-8264,-8263,-8262,-8261,-8260,-8259,-8258,-8257,-8256,-8255,-8254,-8253,-8252,-8251,-8250,-8249,-8248,-8247,-8246,-8245,-8244,-8243,-8242,-8241,-8240,-8239,-8238,-8237,-8236,-8235,-8234,-8233,-8232,-8231,-8230,-8229,-8228,-8227,-8226,-8225,-8224,-8223,-8222,-8221,-8220,-8219,-8218,-8217,-8216,-8215,-8214,-8213,-8212,-8211,-8210,-8209,-8208,-8207,-8206,-8205,-8204,-8203,-8202,-8201,-8200,-8199,-8198,-8197,-8196,-8195,-8194,-8193,-8192,-8191,-8190,-8189,-8188,-8187,-8186,-8185,-8184,-8183,-8182,-8181,-8180,-8179,-8178,-8177,-8176,-8175,-8174,-8173,-8172,-8171,-8170,-8169,-8168,-8167,-8166,-8165,-8164,-8163,-8162,-8161,-8160,-8159,-8158,-8157,-8156,-8155,-8154,-8153,-8152,-8151,-8150,-8149,-8148,-8147,-8146,-8145,-8144,-8143,-8142,-8141,-8140,-8139,-8138,-8137,-8136,-8135,-8134,-8133,-8132,-8131,-8130,-8129,-8128,-8127,-8126,-8125,-8124,-8123,-8122,-8121,-8120,-8119,-8118,-8117,-8116,-8115,-8114,-8113,-8112,-8111,-8110,-8109,-8108,-8107,-8106,-8105,-8104,-8103,-8102,-8101,-8100,-8099,-8098,-8097,-8096,-8095,-8094,-8093,-8092,-8091,-8090,-8089,-8088,-8087,-8086,-8085,-8084,-8083,-8082,-8081,-8080,-8079,-8078,-8077,-8076,-8075,-8074,-8073,-8072,-8071,-8070,-8069,-8068,-8067,-8066,-8065,-8064,-8063,-8062,-8061,-8060,-8059,-8058,-8057,-8056,-8055,-8054,-8053,-8052,-8051,-8050,-8049,-8048,-8047,-8046,-8045,-8044,-8043,-8042,-8041,-8040,-8039,-8038,-8037,-8036,-8035,-8034,-8033,-8032,-8031,-8030,-8029,-8028,-8027,-8026,-8025,-8024,-8023,-8022,-8021,-8020,-8019,-8018,-8017,-8016,-8015,-8014,-8013,-8012,-8011,-8010,-8009,-8008,-8007,-8006,-8005,-8004,-8003,-8002,-8001,-8000,-7999,-7998,-7997,-7996,-7995,-7994,-7993,-7992,-7991,-7990,-7989,-7988,-7987,-7986,-7985,-7984,-7983,-7982,-7981,-7980,-7979,-7978,-7977,-7976,-7975,-7974,-7973,-7972,-7971,-7970,-7969,-7968,-7967,-7966,-7965,-7964,-7963,-7962,-7961,-7960,-7959,-7958,-7957,-7956,-7955,-7954,-7953,-7952,-7951,-7950,-7949,-7948,-7947,-7946,-7945,-7944,-7943,-7942,-7941,-7940,-7939,-7938,-7937,-7936,-7935,-7934,-7933,-7932,-7931,-7930,-7929,-7928,-7927,-7926,-7925,-7924,-7923,-7922,-7921,-7920,-7919,-7918,-7917,-7916,-7915,-7914,-7913,-7912,-7911,-7910,-7909,-7908,-7907,-7906,-7905,-7904,-7903,-7902,-7901,-7900,-7899,-7898,-7897,-7896,-7895,-7894,-7893,-7892,-7891,-7890,-7889,-7888,-7887,-7886,-7885,-7884,-7883,-7882,-7881,-7880,-7879,-7878,-7877,-7876,-7875,-7874,-7873,-7872,-7871,-7870,-7869,-7868,-7867,-7866,-7865,-7864,-7863,-7862,-7861,-7860,-7859]\\n[-6030,-6031,-6032,-6033,-6034,-6035,-6036,-6037,-6038,-6039,-6040,-6041,-6042,-6043,-6044,-6045,-6046,-6047,-6048,-6049,-6050,-6051,-6052,-6053,-6054,-6055,-6056,-6057,-6058,-6059,-6060,-6061,-6062,-6063,-6064,-6065,-6066,-6067,-6068,-6069,-6070,-6071,-6072,-6073,-6074,-6075,-6076,-6077,-6078,-6079,-6080,-6081,-6082,-6083,-6084,-6085,-6086,-6087,-6088,-6089,-6090,-6091,-6092,-6093,-6094,-6095,-6096,-6097,-6098,-6099,-6100,-6101,-6102,-6103,-6104,-6105,-6106,-6107,-6108,-6109,-6110,-6111,-6112,-6113,-6114,-6115,-6116,-6117,-6118,-6119,-6120,-6121,-6122,-6123,-6124,-6125,-6126,-6127,-6128,-6129,-6130,-6131,-6132,-6133,-6134,-6135,-6136,-6137,-6138,-6139,-6140,-6141,-6142,-6143,-6144,-6145,-6146,-6147,-6148,-6149,-6150,-6151,-6152,-6153,-6154,-6155,-6156,-6157,-6158,-6159,-6160,-6161,-6162,-6163,-6164,-6165,-6166,-6167,-6168,-6169,-6170,-6171,-6172,-6173,-6174,-6175,-6176,-6177,-6178,-6179,-6180,-6181,-6182,-6183,-6184,-6185,-6186,-6187,-6188,-6189,-6190,-6191,-6192,-6193,-6194,-6195,-6196,-6197,-6198,-6199,-6200,-6201,-6202,-6203,-6204,-6205,-6206,-6207,-6208,-6209,-6210,-6211,-6212,-6213,-6214,-6215,-6216,-6217,-6218,-6219,-6220,-6221,-6222,-6223,-6224,-6225,-6226,-6227,-6228,-6229,-6230,-6231,-6232,-6233,-6234,-6235,-6236,-6237,-6238,-6239,-6240,-6241,-6242,-6243,-6244,-6245,-6246,-6247,-6248,-6249,-6250,-6251,-6252,-6253,-6254,-6255,-6256,-6257,-6258,-6259,-6260,-6261,-6262,-6263,-6264,-6265,-6266,-6267,-6268,-6269,-6270,-6271,-6272,-6273,-6274,-6275,-6276,-6277,-6278,-6279,-6280,-6281,-6282,-6283,-6284,-6285,-6286,-6287,-6288,-6289,-6290,-6291,-6292,-6293,-6294,-6295,-6296,-6297,-6298,-6299,-6300,-6301,-6302,-6303,-6304,-6305,-6306,-6307,-6308,-6309,-6310,-6311,-6312,-6313,-6314,-6315,-6316,-6317,-6318,-6319,-6320,-6321,-6322,-6323,-6324,-6325,-6326,-6327,-6328,-6329,-6330,-6331,-6332,-6333,-6334,-6335,-6336,-6337,-6338,-6339,-6340,-6341,-6342,-6343,-6344,-6345,-6346,-6347,-6348,-6349,-6350,-6351,-6352,-6353,-6354,-6355,-6356,-6357,-6358,-6359,-6360,-6361,-6362,-6363,-6364,-6365,-6366,-6367,-6368,-6369,-6370,-6371,-6372,-6373,-6374,-6375,-6376,-6377,-6378,-6379,-6380,-6381,-6382,-6383,-6384,-6385,-6386,-6387,-6388,-6389,-6390,-6391,-6392,-6393,-6394,-6395,-6396,-6397,-6398,-6399,-6400,-6401,-6402,-6403,-6404,-6405,-6406,-6407,-6408,-6409,-6410,-6411,-6412,-6413,-6414,-6415,-6416,-6417,-6418,-6419,-6420,-6421,-6422,-6423,-6424,-6425,-6426,-6427,-6428,-6429,-6430,-6431,-6432,-6433,-6434,-6435,-6436,-6437,-6438,-6439,-6440,-6441,-6442,-6443,-6444,-6445,-6446,-6447,-6448,-6449,-6450,-6451,-6452,-6453,-6454,-6455,-6456,-6457,-6458,-6459,-6460,-6461,-6462,-6463,-6464,-6465,-6466,-6467,-6468,-6469,-6470,-6471,-6472,-6473,-6474,-6475,-6476,-6477,-6478,-6479,-6480,-6481,-6482,-6483,-6484,-6485,-6486,-6487,-6488,-6489,-6490,-6491,-6492,-6493,-6494,-6495,-6496,-6497,-6498,-6499,-6500,-6501,-6502,-6503,-6504,-6505,-6506,-6507,-6508,-6509,-6510,-6511,-6512,-6513,-6514,-6515,-6516,-6517,-6518,-6519,-6520,-6521,-6522,-6523,-6524,-6525,-6526,-6527,-6528,-6529]\\n```",
      "voteCount": 73
    },
    {
      "name": "rwang778",
      "year": 2021,
      "content": "I think the hardest part of dynamic programming here is the initialization of dp array. I just set dp[0] to 1... damn",
      "voteCount": 49
    }
  ]
}
