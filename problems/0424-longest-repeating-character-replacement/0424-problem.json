{
  "category": "",
  "id": "424",
  "name": "Longest Repeating Character Replacement",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/longest-repeating-character-replacement/",
  "slug": "longest-repeating-character-replacement",
  "isPaidOnly": false,
  "tags": [
    "Hash Table",
    "String",
    "Sliding Window"
  ],
  "similar_questions": [
    {
      "title": "Longest Substring with At Most K Distinct Characters",
      "difficulty": "Medium",
      "slug": "longest-substring-with-at-most-k-distinct-characters"
    },
    {
      "title": "Max Consecutive Ones III",
      "difficulty": "Medium",
      "slug": "max-consecutive-ones-iii"
    },
    {
      "title": "Minimum Number of Operations to Make Array Continuous",
      "difficulty": "Hard",
      "slug": "minimum-number-of-operations-to-make-array-continuous"
    },
    {
      "title": "Maximize the Confusion of an Exam",
      "difficulty": "Medium",
      "slug": "maximize-the-confusion-of-an-exam"
    },
    {
      "title": "Longest Substring of One Repeating Character",
      "difficulty": "Hard",
      "slug": "longest-substring-of-one-repeating-character"
    }
  ],
  "questionId": "424",
  "questionFrontendId": "424",
  "title": "Longest Repeating Character Replacement",
  "titleSlug": "longest-repeating-character-replacement",
  "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p>\n\n<p>Return <em>the length of the longest substring containing the same letter you can get after performing the above operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ABAB&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Replace the two &#39;A&#39;s with two &#39;B&#39;s or vice versa.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;AABABBA&quot;, k = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Replace the one &#39;A&#39; in the middle with &#39;B&#39; and form &quot;AABBBBA&quot;.\nThe substring &quot;BBBB&quot; has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only uppercase English letters.</li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n</ul>\n",
  "likes": 12203,
  "dislikes": 687,
  "stats": {
    "totalAccepted": "1.2M",
    "totalSubmission": "2.2M",
    "totalAcceptedRaw": 1248755,
    "totalSubmissionRaw": 2155459,
    "acRate": "57.9%"
  },
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Sliding Window",
      "slug": "sliding-window"
    }
  ],
  "metaData": {
    "name": "characterReplacement",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 18
      },
      {
        "taggedByAdmin": false,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 14
      }
    ],
    "3": [
      {
        "taggedByAdmin": false,
        "name": "TikTok",
        "slug": "tiktok",
        "timesEncountered": 14
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "Petersburg",
      "year": 2020,
      "content": "This feels hard...",
      "voteCount": 764
    },
    {
      "name": "gtfoamzn",
      "year": 2022,
      "content": "Since I feel like many solutions didn\\'t explain clearly why it was called \"sliding window\" (or I was too dumb to understand), here\\'s my attempt to explain in simplest of terms: \\n\\nFirst, if you start from the beginning (first character of string), intuitively you know that we want to keep looking down the string until there are `k` characters that are different from the most popular. This is \"expanding the window until it\\'s not a valid window anymore\". This means moving the right pointer to the right, one by one, until `(length of the substring) - (the \"count of most popular character\") = k`. We monitor the condition by keeping track of the most popular character with `maxCount`. Simply, when we see a character, we increment its count, and check if it\\'s greater than `maxCount`. If it is, we update `maxCount`. \\n\\nAt this point, we have a window from `start` to `end`, and it has `maxCount` + `k` characters in it. We know we can\\'t keep expanding the window (since there are already `k` characters different from our most popular one). So what do we do? We just slide the entire window down. **Why?** Because the window represents our best answer so far, and anything less than this window we don\\'t care about (remember, we\\'re trying to find the largest window in this string). So it doesn\\'t make sense to shrink the window. While we slide the window, we do 2 things: 1) we see a new character at `end`, and add that to the `count` array. 2) We also decrement the count of the character at `start`, which is now out of the window. \\n\\nAt this point, we only need to know whether the total count of the new character at `end` (which represents the accurate count of this character within the window) is greater than our `maxCount`, which represents the most popular character count **for the current window size** that we have seen. If any new character\\'s count exceeds the `maxCount`, that means: we have found a character in the current window that is even more popular for **this given window size**. Which means, we should now expand the window until we have `k` \"weirdos\" again! We do this be extending out `end` by 1, and now we have a bigger window and a new `maxCount`. Any new character we see will have to beat this `maxCount` for us to expand the window again. Every step, you move the `end` pointer down the string. If you can expand the window, then you move the `end` and nothing else. If you can\\'t expand the window without violating the rule, then you slide the window by also moving the `start` forward. \\n\\nDon\\'t forget, the \"size of the window\" is basically the value that we are trying to find the biggest value for. As you slide the window down, you\\'re basically saying something like: \"I have a window of length 4, where 2 of the characters were the same (the `maxCount` characters). Can I find any other window with the same length, but more characters that are the same? If so, then I can expand my window and I\\'ve found a larger window. Save this window length as my current best answer. Now repeat until I get to the end. Then return the largest window I saw in this string.\"",
      "voteCount": 681
    },
    {
      "name": "albertomariapepe",
      "year": 2022,
      "content": "wtf is this\\n",
      "voteCount": 404
    },
    {
      "name": "i_0x6c1_i",
      "year": 2023,
      "content": "I hate sliding window problems. ",
      "voteCount": 379
    },
    {
      "name": "SightVanish",
      "year": 2023,
      "content": "No clue the first time I saw this. This should be marked as hard.",
      "voteCount": 305
    },
    {
      "name": "_Anurag_Singhal_",
      "year": 2023,
      "content": "remember O(26n)=O(n)",
      "voteCount": 257
    },
    {
      "name": "Biswajitdas_sibun",
      "year": 2024,
      "content": "When I see this kind of Questions,I Think to change My carrier.",
      "voteCount": 206
    },
    {
      "name": "billyokra",
      "year": 2022,
      "content": "After watching video, I am more confident on sliding window. Folks, if you need guidance about sliding window, you may watch this video. It gave me the framework to solving this problem.\\n\\n[Sliding Window Technique - Algorithmic Mental Models](https://youtu.be/MK-NZ4hN7rs)",
      "voteCount": 144
    },
    {
      "name": "Joy4fun",
      "year": 2017,
      "content": "Given a string that consists of only uppercase English letters, **you can replace any letter in the string with another letter at most k times.** Find the length of a longest substring containing all repeating letters you can get after performing the above operations.\\n\\nThe bold line above is confusing.\\n\\nInterpretation 1: Does it means to allow us replace every single letter for at most K times? \\nHumm well it's not, if it is then I think just by mentioning 1 times is enough and there's no need to emphasis K times.\\n\\ninterpretation 2: Does it means to allow us replace every unique letter for at most K times?\\nThis interpretation works for both example 1 and 2.\\nInput:\\ns = \"ABAB\", k = 2\\nOutput:\\n4\\nWe change letter A in this string for 2 times/We can change letter B in this string for 2 times\\n\\nBut when I was thinking how about the input is:\\ns = \"ACBABBE\", k = 1\\nThen I was thinking we can change letter C to B for once and change A to B for once and finally E to B for once to get \"ABBBBBB\", the output is 6. \\n\\nHowever I was wrong again...\\n\\nAnd after seeing other posts here, I finally realized that this question actually wants you **to replace at most k letters in this string** , that's it:)\\n\\nI strongly advice to avoid ambiguous definition/interpretation using broken english in question description.",
      "voteCount": 120
    },
    {
      "name": "tianxin117",
      "year": 2021,
      "content": "I\\'ve read so many explanations for this problem but I\\'m still confused. I understand that we want to subtract the count of the most frequent repeating character in the window from the total length of the window. However, in all of the optimal solutions, we keep track of the _global_ maximum instead of the maximum in the current window. Why are we able to do that?",
      "voteCount": 44
    }
  ]
}
