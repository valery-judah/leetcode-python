{
  "category": "",
  "id": "1522",
  "name": "Diameter of N-Ary Tree",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/diameter-of-n-ary-tree/",
  "slug": "diameter-of-n-ary-tree",
  "isPaidOnly": true,
  "tags": [
    "Tree",
    "Depth-First Search"
  ],
  "similar_questions": [
    {
      "title": "Diameter of Binary Tree",
      "difficulty": "Easy",
      "slug": "diameter-of-binary-tree"
    }
  ],
  "questionId": "1665",
  "questionFrontendId": "1522",
  "title": "Diameter of N-Ary Tree",
  "titleSlug": "diameter-of-n-ary-tree",
  "content": "<p>Given a <code>root</code> of an <code>N-ary tree</code>, you need to compute the length of the diameter of the tree.</p>\n\n<p>The diameter of an N-ary tree is the length of the <strong>longest</strong> path between any two nodes in the tree. This path may or may not pass through the root.</p>\n\n<p>(<em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/19/sample_2_1897.png\" style=\"width: 324px; height: 173px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Diameter is shown in red color.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/19/sample_1_1897.png\" style=\"width: 253px; height: 246px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,null,3,4,null,5,null,6]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/19/sample_3_1897.png\" style=\"width: 369px; height: 326px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> 7\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li>\n\t<li>The total number of nodes is between <code>[1, 10<sup>4</sup>]</code>.</li>\n</ul>\n",
  "likes": 638,
  "dislikes": 9,
  "stats": {
    "totalAccepted": "59K",
    "totalSubmission": "78.4K",
    "totalAcceptedRaw": 59027,
    "totalSubmissionRaw": 78369,
    "acRate": "75.3%"
  },
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Depth-First Search",
      "slug": "depth-first-search"
    }
  ],
  "metaData": {
    "name": "diameter",
    "params": [
      {
        "name": "root",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "manual": true,
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "typescript",
      "php",
      "golang",
      "scala",
      "kotlin",
      "ruby",
      "swift",
      "c"
    ],
    "typescriptCustomType": "class _Node {\n    val: number\n    children: _Node[]\n\n    constructor(val?: number, children?: _Node[]) {\n        this.val = (val===undefined ? 0 : val)\n        this.children = (children===undefined ? [] : children)\n    }\n}\n"
  },
  "discussion_posts": [
    {
      "name": "software-is-life",
      "year": 2023,
      "content": "I think this is a great question, I initially with an more brute force approach where I tracked all the children node\\'s traversals / length. Then, I applied I iterated every possible height combination between two distinct nodes. This approach was a lot less efficient than the official editorial solution.\\n\\nI really like how, with visualizing the tree with a diagram, you can see you only need to keep track of the top two heights. That drastically improves the runtime complexity. \\n\\nIf you don\\'t know the DFS traversal, first start off with the Easy \"Diameter of a binary tree\" problem.",
      "voteCount": 2
    },
    {
      "name": "LeetCode",
      "year": 2021,
      "content": "This problem is the Daily LeetCoding Challenge for November, Week 3.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **\ud83d\udccc Do you want to learn the problem thoroughly?**\n  Read [**\u2b50  LeetCode Official Solution\u2b50**](https://leetcode.com/problems/diameter-of-n-ary-tree/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Distance with Height\n\n  \n**Approach 2:** Distance with Depth\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
      "voteCount": 2
    },
    {
      "name": "krobzh",
      "year": 2024,
      "content": "This question is almost the same as [1245. Tree Diameter](https://leetcode.com/problems/tree-diameter/description/?envType=company&envId=tiktok&favoriteSlug=tiktok-three-months).\n\nThe key point is that the `longest path between any two nodes` is equal to the `largest path` plus second `largest path` (start from any node and ended in a leaf node).",
      "voteCount": 1
    },
    {
      "name": "the_it_guy",
      "year": 2020,
      "content": "I solved problem #1245 Tree Diameter using 2 BFS. However, when I ran the same code on this problem it failed for a case. Can anyone please explain what is the difference between these two problems and why they can\\'t share the same solution?\\nThanks",
      "voteCount": 1
    },
    {
      "name": "Bryanmiller760",
      "year": 2025,
      "content": "Can use graph to solve problem even though nodes are not unique. Instead of assigning values to node directly, append to list for that node, then sort after to find max diameter for that node.  ",
      "voteCount": 0
    },
    {
      "name": "BlackStallion456",
      "year": 2024,
      "content": "**NOTE**: The values of the nodes in the tree are NOT unique.  I.e. there can be multiple distinct nodes in the tree that all have the same `node.val`, meaning it is NOT a unique identifier. \n\nIf you approach this problem using a graph algo, that could give you some issues.",
      "voteCount": 0
    },
    {
      "name": "bali-ibrahim",
      "year": 2024,
      "content": "Why isn\\'t the path of 5-3-1-3-6 considered in the example 1  to have a result greater than 3, 4? Is there a requirement in a \"path\" to visit each node only once or something?",
      "voteCount": 0
    }
  ]
}
