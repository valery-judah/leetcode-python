{
  "category": "",
  "id": "1164",
  "name": "Product Price at a Given Date",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/product-price-at-a-given-date/",
  "slug": "product-price-at-a-given-date",
  "isPaidOnly": false,
  "tags": [
    "Database"
  ],
  "similar_questions": [],
  "questionId": "1278",
  "questionFrontendId": "1164",
  "title": "Product Price at a Given Date",
  "titleSlug": "product-price-at-a-given-date",
  "content": "<p>Table: <code>Products</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| new_price     | int     |\n| change_date   | date    |\n+---------------+---------+\n(product_id, change_date) is the primary key (combination of columns with unique values) of this table.\nEach row of this table indicates that the price of some product was changed to a new price at some date.</pre>\n\n<p>Initially, all products have price 10.</p>\n\n<p>Write a solution to find the prices of all products on the date <code>2019-08-16</code>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nProducts table:\n+------------+-----------+-------------+\n| product_id | new_price | change_date |\n+------------+-----------+-------------+\n| 1          | 20        | 2019-08-14  |\n| 2          | 50        | 2019-08-14  |\n| 1          | 30        | 2019-08-15  |\n| 1          | 35        | 2019-08-16  |\n| 2          | 65        | 2019-08-17  |\n| 3          | 20        | 2019-08-18  |\n+------------+-----------+-------------+\n<strong>Output:</strong> \n+------------+-------+\n| product_id | price |\n+------------+-------+\n| 2          | 50    |\n| 1          | 35    |\n| 3          | 10    |\n+------------+-------+\n</pre>\n",
  "likes": 1244,
  "dislikes": 299,
  "stats": {
    "totalAccepted": "275.6K",
    "totalSubmission": "478.9K",
    "totalAcceptedRaw": 275641,
    "totalSubmissionRaw": 478935,
    "acRate": "57.6%"
  },
  "topicTags": [
    {
      "name": "Database",
      "slug": "database"
    }
  ],
  "metaData": {
    "mysql": [
      "Create table If Not Exists Products (product_id int, new_price int, change_date date)"
    ],
    "mssql": [
      "Create table Products (product_id int, new_price int, change_date date)"
    ],
    "oraclesql": [
      "Create table Products (product_id int, new_price int, change_date date)",
      "ALTER SESSION SET nls_date_format='YYYY-MM-DD'"
    ],
    "database": true,
    "name": "price_at_given_date",
    "pythondata": [
      "Products = pd.DataFrame([], columns=['product_id', 'new_price', 'change_date']).astype({'product_id':'Int64', 'new_price':'Int64', 'change_date':'datetime64[ns]'})"
    ],
    "postgresql": [
      "\nCreate table If Not Exists Products (product_id int, new_price int, change_date date)"
    ],
    "database_schema": {
      "Products": {
        "product_id": "INT",
        "new_price": "INT",
        "change_date": "DATE"
      }
    }
  },
  "discussion_posts": [
    {
      "name": "District_12",
      "year": 2023,
      "content": "Easy, It took me just a few hours. lol",
      "voteCount": 310
    },
    {
      "name": "ankush20386",
      "year": 2023,
      "content": "Can anyone help me out with the explanation of this question, question is not  explained properly",
      "voteCount": 132
    },
    {
      "name": "Karan_optimizer",
      "year": 2023,
      "content": "Language used in question is quite confusing",
      "voteCount": 100
    },
    {
      "name": "samza",
      "year": 2023,
      "content": "I agree with most commenter here that is is a terribly worded question. It\\'s hard to understand based on the description and ambiguous even with the given example. Don\\'t feel bad if you don\\'t get the question.  ",
      "voteCount": 60
    },
    {
      "name": "user3602g",
      "year": 2022,
      "content": "#We want to filter out only the date before \\'2019-08-16\\' inclusively, and rank the price based on latest date using window function rank() over (). We could use first_value() over () as well. We rank the price grouped by product_id, so we use \\'partition by product_id\\', and we want to keep the latest record only, so we use order by change_date desc.\\nWe can further filter out the latest price by saying that we want only the price who is ranked #1.\\n\\nThen we need to consider whether there\\'s product changed price after \\'2019-08-16\\'. We can make sure of that by using union function. We want to find out which product changed price at the first time after \\'2019-08-16\\', and set the original price at $10.\\n\\nwith rk as\\n(\\nselect distinct product_id, new_price as price, rank() over (partition by product_id order by change_date desc) as rk\\nfrom products p \\nwhere change_date <= \\'2019-08-16\\'\\n)\\n\\nselect product_id, price from rk\\nwhere rk =1\\n\\nunion \\n\\nselect distinct product_id, 10 as price\\nfrom products\\nwhere product_id not in \\n(select product_id \\n from products \\n where change_date <= \\'2019-08-16\\'\\n)",
      "voteCount": 37
    },
    {
      "name": "elijeldres",
      "year": 2023,
      "content": "HELP! \\nCan someone help me to understand the question here said  \"Write an SQL query to find the prices of all products on 2019-08-16.\" for me this is find the prices for all the products on that exact date ... then follows \"Assume the price of all products before any change is 10.\" what that even means ?? that all the products have an starting price of 10? \\nI don\\'t understand why the output are all the last prices on products before and on the date, and for product_id 3 that is not present in the date range is 10. \\n\\nor the original query must say something like :Write an SQL query to find the prices of all products until 2019-08-16 inclusive.  If a product is not present in the range, assume the price as 10.",
      "voteCount": 27
    },
    {
      "name": "saccade",
      "year": 2020,
      "content": "\\'\\'\\'\\nselect distinct product_id, new_price as price\\nfrom Products\\nwhere (product_id, change_date)\\nin \\n(select product_id, max(change_date) \\nfrom Products\\nwhere change_date <= \\'2019-08-16\\' \\ngroup by product_id)\\nunion\\nselect product_id, 10 as price\\nfrom Products \\ngroup by product_id\\nhaving min(change_date) > \\'2019-08-16\\' \\n\\'\\'\\'",
      "voteCount": 16
    },
    {
      "name": "bbwxnl",
      "year": 2022,
      "content": "WITH t1 AS\\n    (SELECT DISTINCT product_id, MAX(change_date) over (PARTITION BY product_id)            last_day\\n    FROM Products\\n    WHERE change_date<=\\'2019-08-16\\' )\\n\\nSELECT t1.product_id, p.new_price price\\nFROM t1\\nJOIN Products p\\nON t1.product_id=p.product_id AND t1.last_day=p.change_date\\n\\nUNION \\n\\nSELECT product_id, 10 price\\nFROM Products\\nWHERE product_id NOT IN (SELECT product_id FROM t1)\\n",
      "voteCount": 16
    },
    {
      "name": "Rupal_Sharma",
      "year": 2023,
      "content": "Whats wrong with this query? and can leetcode please update the description of this problem. It is not understandable clearly\n\n\nselect distinct product_id,\ncase \nwhen change_date ='2019-08-16' then new_price \nwhen change_date < '2019-08-16' then new_price\nelse '10'\nend as price \nfrom Products \ngroup by product_id",
      "voteCount": 15
    },
    {
      "name": "koki111",
      "year": 2024,
      "content": "1.) Find the last occurrence of all ids before 2019-08-16 (inclusive) \\n2.) Set the price of all distinct ids that didn\\'t appear in the first part to 10\\n\\nHint: Union ",
      "voteCount": 13
    }
  ]
}
