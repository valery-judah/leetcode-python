{
  "category": "",
  "id": "4",
  "name": "Median of Two Sorted Arrays",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/median-of-two-sorted-arrays/",
  "slug": "median-of-two-sorted-arrays",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Binary Search",
    "Divide and Conquer"
  ],
  "similar_questions": [
    {
      "title": "Median of a Row Wise Sorted Matrix",
      "difficulty": "Medium",
      "slug": "median-of-a-row-wise-sorted-matrix"
    }
  ],
  "questionId": "4",
  "questionFrontendId": "4",
  "title": "Median of Two Sorted Arrays",
  "titleSlug": "median-of-two-sorted-arrays",
  "content": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n\n<p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3], nums2 = [2]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> merged array = [1,2,3] and median is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 2.50000\n<strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
  "likes": 30813,
  "dislikes": 3461,
  "stats": {
    "totalAccepted": "3.7M",
    "totalSubmission": "8.2M",
    "totalAcceptedRaw": 3660139,
    "totalSubmissionRaw": 8206177,
    "acRate": "44.6%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Divide and Conquer",
      "slug": "divide-and-conquer"
    }
  ],
  "metaData": {
    "name": "findMedianSortedArrays",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "double"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 43
      },
      {
        "taggedByAdmin": false,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 33
      },
      {
        "taggedByAdmin": false,
        "name": "Goldman Sachs",
        "slug": "goldman-sachs",
        "timesEncountered": 24
      },
      {
        "taggedByAdmin": true,
        "name": "Microsoft",
        "slug": "microsoft",
        "timesEncountered": 14
      },
      {
        "taggedByAdmin": false,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 13
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "kevin_125",
      "year": 2023,
      "content": "I got this exact question in an interview last week. I almost gave up because I knew I\\'m unable to come up with the optimal `O(log(n+m))` solution. I quickly did a naive `median(sorted(nums1 + nums2))` function and briefly mentioned the optimal approach. The interviewers laughed and said they don\\'t even expect people can implement this within 45 min. \\n\\nToday I received a call telling me I\\'ve passed the interview. What a relief!",
      "voteCount": 2263
    },
    {
      "name": "moonlight16",
      "year": 2019,
      "content": "Ok, sorry.  I\\'m trying to bottle up my disgust for the interviewing process in the silicon valley.  But I couldn\\'t help it after looking at the solution for this one... \\n\\nI actually was asked this question in an interview with VMware.  And after reviewing the solution I\\'m astonished at how/why this question is ever asked.  Isn\\'t it insane to ask this sort of question in a 20-50min interview?  And in the end, does it really tell you anything about the candidate?  Either you get a) a stumped candidate or b) someone who remembers how to solve it because they\\'ve seen it before.  \\n\\nI\\'m trying to review the overall approach in my head.  I find myself just memorizing the solution.  I\\'m pretty certain this process isn\\'t just about memorizing the solutions.  But if you\\'ve seen the solution, it becomes somewhat familiar.  10 or 20 years down the road and you\\'ll never encounter it in industry and will have forgotten the solution.  So you end up just having to recall how its solved, i.e. \"oh yeah, i remember how this one is solved in O(logn) complexity\".   I doubt most candidates could solve this in a short 20-50 min interview.",
      "voteCount": 869
    },
    {
      "name": "quinn-dougherty",
      "year": 2020,
      "content": "the description says a `log(n+m)` solution exists, but many of us did a naive `median(sorted(nums1 + nums2))` function which worked great even tho it\\'s way worse than `log(n+m)`. \\n\\nTest cases should be harder to force us to think harder, or it should be marked easy or medium.",
      "voteCount": 467
    },
    {
      "name": "alexkyllo",
      "year": 2015,
      "content": "I submitted two solutions, one with O(m+n) complexity (merge the entire arrays first and then find the median), and one with O(log(m+n)) complexity (divide-and-conquer to find K smallest element of the two arrays and then calculate median) and latter was only 2ms faster. Suggest providing a test case that's sufficiently large to make the difference between logarithmic and linear runtime performance obvious.",
      "voteCount": 316
    },
    {
      "name": "honey-grapes",
      "year": 2022,
      "content": "Hi, \\n\\nI am wondering why .sort() is used in most of the solutions when the time complexity requirement is O(log(m+n))?",
      "voteCount": 307
    },
    {
      "name": "rudrakshjadhav",
      "year": 2023,
      "content": "Interviewer: Can you tell me how can we find the median of two sorted arrays in logarithmic TC?\\nMe: (Call disconnected)",
      "voteCount": 250
    },
    {
      "name": "SnorlaxNYC",
      "year": 2021,
      "content": "Rating: 3. This is marked as Hard problem, as you will find that the expected time compelxity is O(ln(m+n)). Therefore, you can\\'t merge the two sorted arrays into one sorted array and find the median. As the merging operation it self takes O(m + n). I give this problem a low rating, for reason that in reality, you barely need to optimize a solution like this, and the expected solution adds too much cognitive load to a problem than can be addressed pretty easily with a little sacrifice on space. \\n\\nWhat can you learn from solving this problem? Nothing.\\n\\nThis should not be used for interview.",
      "voteCount": 224
    },
    {
      "name": "hing_liu",
      "year": 2021,
      "content": "Let try to interate the algorithm first:\\n\\nIt is basically a k-th smallest element problem between two sorted arrays, let assume we have the following two arrays:\\n\\n5,7,8,11\\n4,9,12,14\\n\\nk = 4 (expected ans = 8 because when it is sorted: 4,5,7,**8**,9,11,12,14)\\n\\nStep 1: Cut the two arrays into two pieces such that the left side will have total items of 4 (i.e. the **K=4**)\\n5,7 | 8, 11\\n4,9 | 12, 14\\n\\nStep 2: We remove [5,7] because its end index at the left side is smaller (7. v.s 9) and we update K = 2 (since we removed 2 item=> K - 2 = 4 - 2 = 2), it will becomes:\\n8,11 <-- removed [5,7]\\n4,9,12,14\\n\\n(basically the rest of the steps below is to repeat 1 and 2 until K = 1)\\n\\nStep 3: Repeat Step 1, Cut into two half base on **K = 2**\\n8 | 11\\n4 | 9 12 14\\n\\nStep 4: Repeat Step 2, that is remove 4 and update **K = 1** (since we removed 1 item=>K-1 = 2-1 1)\\n\\nStep 5: Repeat Step 1, Cut into two half base on K = 1, since K = 1 is not able to split (we have two arrays, don\\'t know how to split), we conclude the solution as the minimum of the first item of the two array, that is min(8,9) = 8\\n8,11\\n9,12,14\\n\\nWe are all done, how about K = 3 initially? Basically the point of \\'cut\\' is K/2 - 1, therefore when K = 3, the cutting point is index=0, let us go though this again quickly for this:\\n\\nK=3\\n5|7,8,11\\n4|9,12,14\\n\\nK=2\\n5|7,8,11\\n9|12,14\\n\\nK=1\\n7|8,11\\n9|12,14 \\nAns=min(7,9) = 7\\n\\nThere is some edge case not tell here, this is just a general idea. We want to have the first K-th item, so, the first target is to collect the first K item from the two array, so we fairly cut them at K/2 - 1 and remove the smaller list until K = 1.\\n\\nThis might be still hard to understand, consider we are not greedy, we do it one by one (we don\\'t cut base on K, but always cut by two):\\n\\nK=4\\n5 | 7 8 11\\n4 | 9 12 14\\n\\nAt this point, we remove the smaller one and have:\\nK=3\\n5 | 7 8 11\\n9 | 12 14\\n\\nKeep doing this until K = 1\\nK=2\\n7 | 8 11\\n9 | 12 14\\n\\nK = 1\\n8 | 11\\n9 | 12 14\\n(at this point, all done)\\n\\nWe are now reaching the answer = 8 by doing this in one-by-one manner, the cutting point at this \\'slow-version\\' is always [0], and the faster version is doing the cutting point at [k/2 - 1], that still work because they are sorted, it is safe to jump further and remove the whole preceding items rather than doing this one-by-one manner.\\n\\nAgain, this might still be hard to convince yourself why the \\'faster-version\\' has no issue, just hope this can help you understand more.\\n\\nGoing back to tell why it is a k-th minimum issue, consider when we have ths int kth(arr1, arr2, k) function, we can put k to be the middle of sizeof(arr1) and sizeof(arr2), if it is even number of size we just get the adjacent (run kth function two times) so we can get the middle two and divide it by 2, so the answer ...",
      "voteCount": 127
    },
    {
      "name": "sarpalmadhav",
      "year": 2023,
      "content": "God save the person getting this question in an interview.",
      "voteCount": 85
    },
    {
      "name": "dpinto",
      "year": 2019,
      "content": "The problem statement in the description states that we can assume there are no empty arrays but the test case inputs includes few examples with empty arrays.",
      "voteCount": 65
    }
  ]
}
