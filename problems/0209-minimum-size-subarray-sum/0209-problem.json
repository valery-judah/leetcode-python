{
  "category": "",
  "id": "209",
  "name": "Minimum Size Subarray Sum",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/minimum-size-subarray-sum/",
  "slug": "minimum-size-subarray-sum",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Binary Search",
    "Sliding Window",
    "Prefix Sum"
  ],
  "similar_questions": [
    {
      "title": "Minimum Window Substring",
      "difficulty": "Hard",
      "slug": "minimum-window-substring"
    },
    {
      "title": "Maximum Size Subarray Sum Equals k",
      "difficulty": "Medium",
      "slug": "maximum-size-subarray-sum-equals-k"
    },
    {
      "title": "Maximum Length of Repeated Subarray",
      "difficulty": "Medium",
      "slug": "maximum-length-of-repeated-subarray"
    },
    {
      "title": "Minimum Operations to Reduce X to Zero",
      "difficulty": "Medium",
      "slug": "minimum-operations-to-reduce-x-to-zero"
    },
    {
      "title": "K Radius Subarray Averages",
      "difficulty": "Medium",
      "slug": "k-radius-subarray-averages"
    },
    {
      "title": "Maximum Product After K Increments",
      "difficulty": "Medium",
      "slug": "maximum-product-after-k-increments"
    },
    {
      "title": "Shortest Subarray With OR at Least K I",
      "difficulty": "Easy",
      "slug": "shortest-subarray-with-or-at-least-k-i"
    },
    {
      "title": "Minimum Positive Sum Subarray ",
      "difficulty": "Easy",
      "slug": "minimum-positive-sum-subarray"
    }
  ],
  "questionId": "209",
  "questionFrontendId": "209",
  "title": "Minimum Size Subarray Sum",
  "titleSlug": "minimum-size-subarray-sum",
  "content": "<p>Given an array of positive integers <code>nums</code> and a positive integer <code>target</code>, return <em>the <strong>minimal length</strong> of a </em><span data-keyword=\"subarray-nonempty\"><em>subarray</em></span><em> whose sum is greater than or equal to</em> <code>target</code>. If there is no such subarray, return <code>0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 7, nums = [2,3,1,2,4,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The subarray [4,3] has the minimal length under the problem constraint.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 4, nums = [1,4,4]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 11, nums = [1,1,1,1,1,1,1,1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution of which the time complexity is <code>O(n log(n))</code>.",
  "likes": 13734,
  "dislikes": 514,
  "stats": {
    "totalAccepted": "1.6M",
    "totalSubmission": "3.2M",
    "totalAcceptedRaw": 1579171,
    "totalSubmissionRaw": 3160560,
    "acRate": "50.0%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Sliding Window",
      "slug": "sliding-window"
    },
    {
      "name": "Prefix Sum",
      "slug": "prefix-sum"
    }
  ],
  "metaData": {
    "name": "minSubArrayLen",
    "params": [
      {
        "name": "target",
        "type": "integer"
      },
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "iryan",
      "year": 2015,
      "content": "\\n\\nFor array [1,2,3,4,5],  obviously, there is no sub array  whose sum equal 11.\\n\\nSo I think there answer is 0. \\n\\n\\nconsecutive sub array , right ?",
      "voteCount": 521
    },
    {
      "name": "adarsh_sgh",
      "year": 2023,
      "content": ">  Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).\\n\\nThis is follow up or follow down ?",
      "voteCount": 397
    },
    {
      "name": "jonathanlamheihung",
      "year": 2021,
      "content": "![image](https://assets.leetcode.com/users/images/6321d165-cf53-4546-a74b-347324d48399_1615043089.1968756.png)\\nCould anyone tell me why the answer is 8 instead of 7?\\n\\nThanks so much!",
      "voteCount": 231
    },
    {
      "name": "alksjdf12384",
      "year": 2023,
      "content": "Isn\\'t O(n) linear better then O(nlogn) ?\\nWhy should the follow up be more slower then the previous solution?",
      "voteCount": 124
    },
    {
      "name": "glebuzheg",
      "year": 2023,
      "content": "i have wrong answer after tests\\nInput\\ntarget =213\\nnums =[12,28,83,4,25,26,25,2,25,25,25,12]\\nUse Testcase\\nOutput 7\\nExpected 8\\n\\nmy algorithm found subarray (12, 28, 83, 25, 26, 25, 25) sum = 224 which >= 213 and have 7 elemets.\\nI dont understend why is it wrong",
      "voteCount": 57
    },
    {
      "name": "anwendeng",
      "year": 2023,
      "content": "Using sliding window is more intuitive than using binary search to solve this problem.\\nThere are many approaches!",
      "voteCount": 50
    },
    {
      "name": "vishalmangalassery",
      "year": 2021,
      "content": "for input \\n11\\n[1,2,3,4,5]\\n\\nThe expected answer is 3. But my solution is giving the answer as 0 since there is no such **contiguous sub array**  of length 3 that can sum to 11\\n\\n1+2+3 = 6\\n2+3+4 = 9\\n3+4+5 = 12\\n\\ncan someone help me understand this?",
      "voteCount": 47
    },
    {
      "name": "zenzen5",
      "year": 2018,
      "content": "If I was the interviewer, I would probably ask this next to make sure the answer is not memorized/ templated. Having an intuitive understanding also helps me personally in remembering and applying it in some other problem.\\n\\nFrom my understanding the O(N) sliding window approach where neither pointer is ever decremented works because:\\n1. Increasing the size of the window keeps or breaks the \"constraint\" in one direction (the new sum can only be >= previous window)\\n2. Decreasing the size of the window keeps or breaks the constraint in the opposite direction of increasing it (the new sum can only be <= previous window)\\n\\nIf any of those don\\'t apply the solution wont work, which is the case for negative numbers (anything could happen with the sum depending on specific values). So for negative windows we must reset the end of the window to start of the window (so try window size 1,2,...n at each index) each time we increment start for an O(N^2) solution.\\n\\nDo you have a better way to articulate this?",
      "voteCount": 40
    },
    {
      "name": "pete88pete",
      "year": 2023,
      "content": "Wait if we found the solution in 0(n) time why would we want to do it in O(n log(n)) time?",
      "voteCount": 34
    },
    {
      "name": "GoCarl",
      "year": 2023,
      "content": "Hint for those codes that seem to be O(n) but TLE: \\n1. Don\\'t compute the sum of the sliding window, try accumulation instead: sum += arr[right] or sum -= arr[left]. \\n2. Don\\'t compute the length of the sliding window, try (right - left) instead",
      "voteCount": 30
    }
  ]
}
