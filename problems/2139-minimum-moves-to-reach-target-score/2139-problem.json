{
  "category": "",
  "id": "2139",
  "name": "Minimum Moves to Reach Target Score",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/minimum-moves-to-reach-target-score/",
  "slug": "minimum-moves-to-reach-target-score",
  "isPaidOnly": false,
  "tags": [
    "Math",
    "Greedy"
  ],
  "similar_questions": [
    {
      "title": "Number of Steps to Reduce a Number to Zero",
      "difficulty": "Easy",
      "slug": "number-of-steps-to-reduce-a-number-to-zero"
    },
    {
      "title": "Number of Steps to Reduce a Number in Binary Representation to One",
      "difficulty": "Medium",
      "slug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one"
    }
  ],
  "questionId": "1303",
  "questionFrontendId": "2139",
  "title": "Minimum Moves to Reach Target Score",
  "titleSlug": "minimum-moves-to-reach-target-score",
  "content": "<p>You are playing a game with integers. You start with the integer <code>1</code> and you want to reach the integer <code>target</code>.</p>\n\n<p>In one move, you can either:</p>\n\n<ul>\n\t<li><strong>Increment</strong> the current integer by one (i.e., <code>x = x + 1</code>).</li>\n\t<li><strong>Double</strong> the current integer (i.e., <code>x = 2 * x</code>).</li>\n</ul>\n\n<p>You can use the <strong>increment</strong> operation <strong>any</strong> number of times, however, you can only use the <strong>double</strong> operation <strong>at most</strong> <code>maxDoubles</code> times.</p>\n\n<p>Given the two integers <code>target</code> and <code>maxDoubles</code>, return <em>the minimum number of moves needed to reach </em><code>target</code><em> starting with </em><code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 5, maxDoubles = 0\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Keep incrementing by 1 until you reach target.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 19, maxDoubles = 2\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 10, maxDoubles = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong><b> </b>Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= maxDoubles &lt;= 100</code></li>\n</ul>\n",
  "likes": 1046,
  "dislikes": 26,
  "stats": {
    "totalAccepted": "54K",
    "totalSubmission": "104.4K",
    "totalAcceptedRaw": 53988,
    "totalSubmissionRaw": 104396,
    "acRate": "51.7%"
  },
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    }
  ],
  "metaData": {
    "name": "minMoves",
    "params": [
      {
        "name": "target",
        "type": "integer"
      },
      {
        "type": "integer",
        "name": "maxDoubles"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "ASWINNATH123",
      "year": 2024,
      "content": "reverse the process \nsubtract 1\nDivide by 2",
      "voteCount": 11
    },
    {
      "name": "adityy",
      "year": 2023,
      "content": "no way this is a medium. it should be tagged as \"easy\" ",
      "voteCount": 11
    },
    {
      "name": "schatterjee380",
      "year": 2024,
      "content": "Personally, I felt this was a medium hard question. I believe that if you have never encountered this question beforehand you would not be able to solve it quickly.\\n\\nTip: Think about it in reverse, instead of from x to y, think of it going from y to x. \\nIf you ever tried solving a maze,  the \"cheating\" way would be to go from the destintation to the source.",
      "voteCount": 5
    },
    {
      "name": "code__HARD",
      "year": 2024,
      "content": "This question is same as [Broken Calculator](https://leetcode.com/problems/broken-calculator/description/) with just an additional constraint. \\n",
      "voteCount": 3
    },
    {
      "name": "Buzzy2",
      "year": 2025,
      "content": "SPOILER \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nWhy does this TLE at \\ntarget = 1; maxDoubles = 1?\\nIt works completely fine using \"Run\" but TLEs using \"Submit\"\\nI feel my submission rate scammed\\n\\nclass Solution {\\npublic:\\n    int minMoves(int target, int maxDoubles) {\\n        int ans = 0;\\n        while(target > 1) {\\n            ans++;\\n            if(maxDoubles) {\\n                ans += target%2;\\n                target/=2;\\n                maxDoubles--;\\n            }\\n            else target--;\\n        }\\n        \\n        return ans;\\n    }\\n};",
      "voteCount": 2
    },
    {
      "name": "Ajay_787",
      "year": 2024,
      "content": "we can solve this using dp also na?",
      "voteCount": 2
    },
    {
      "name": "StefanelStan",
      "year": 2023,
      "content": "For those confused about solution, try to reverse: reach 1 from your target. If target is odd, can you reach it by division or by adding 1? If your target is even, then you reach it by multiplication (18 can be reached by 9 * 2).\\nShould you stop when you are out of allowed division steps or when you reach 1? Or maybe both?\\n",
      "voteCount": 2
    },
    {
      "name": "badasscodergirl",
      "year": 2025,
      "content": "This felt easy for someone who usually struggles a lot with mediums :)",
      "voteCount": 1
    },
    {
      "name": "chibi_chihiro",
      "year": 2023,
      "content": "A greedy greedy problem ;)",
      "voteCount": 1
    },
    {
      "name": "Pratik______26",
      "year": 2025,
      "content": "class Solution:\\n\\n    def __init__(self):\\n        self.steps = 0\\n    def minMoves(self, n: int, maxDoubles: int) -> int:\\n        if n == 1:\\n            return self.steps\\n        if n % 2 == 0 and maxDoubles > 0:\\n            maxDoubles -= 1\\n            self.steps += 1\\n            self.minMoves(n // 2, maxDoubles)\\n        \\n        else:\\n            self.steps += 1\\n            self.minMoves(n - 1, maxDoubles)\\n    \\n        return self.steps\\n\\n\\ntried using recursion but broke when a larger input was given!\\nWill change the approach!\\n\\nPlease feel free to suggest if you have any improvisations for this one!",
      "voteCount": 0
    }
  ]
}
