{
  "category": "",
  "id": "1706",
  "name": "Where Will the Ball Fall",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/where-will-the-ball-fall/",
  "slug": "where-will-the-ball-fall",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Matrix",
    "Simulation"
  ],
  "similar_questions": [],
  "questionId": "1324",
  "questionFrontendId": "1706",
  "title": "Where Will the Ball Fall",
  "titleSlug": "where-will-the-ball-fall",
  "content": "<p>You have a 2-D <code>grid</code> of size <code>m x n</code> representing a box, and you have <code>n</code> balls. The box is open on the top and bottom sides.</p>\n\n<p>Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.</p>\n\n<ul>\n\t<li>A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as <code>1</code>.</li>\n\t<li>A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as <code>-1</code>.</li>\n</ul>\n\n<p>We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a &quot;V&quot; shaped pattern between two boards or if a board redirects the ball into either wall of the box.</p>\n\n<p>Return <em>an array </em><code>answer</code><em> of size </em><code>n</code><em> where </em><code>answer[i]</code><em> is the column that the ball falls out of at the bottom after dropping the ball from the </em><code>i<sup>th</sup></code><em> column at the top, or <code>-1</code><em> if the ball gets stuck in the box</em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/26/ball.jpg\" style=\"width: 500px; height: 385px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]\n<strong>Output:</strong> [1,-1,-1,-1,-1]\n<strong>Explanation:</strong> This example is shown in the photo.\nBall b0 is dropped at column 0 and falls out of the box at column 1.\nBall b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\nBall b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\nBall b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\nBall b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[-1]]\n<strong>Output:</strong> [-1]\n<strong>Explanation:</strong> The ball gets stuck against the left wall.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]\n<strong>Output:</strong> [0,1,2,3,4,-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>grid[i][j]</code> is <code>1</code> or <code>-1</code>.</li>\n</ul>\n",
  "likes": 3151,
  "dislikes": 181,
  "stats": {
    "totalAccepted": "146.7K",
    "totalSubmission": "203.5K",
    "totalAcceptedRaw": 146739,
    "totalSubmissionRaw": 203472,
    "acRate": "72.1%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Matrix",
      "slug": "matrix"
    },
    {
      "name": "Simulation",
      "slug": "simulation"
    }
  ],
  "metaData": {
    "name": "findBall",
    "params": [
      {
        "type": "integer[][]",
        "name": "grid"
      }
    ],
    "return": {
      "type": "integer[]"
    }
  },
  "discussion_posts": [
    {
      "name": "cheungtriedtocode",
      "year": 2023,
      "content": "wtf",
      "voteCount": 40
    },
    {
      "name": "Rishin1",
      "year": 2022,
      "content": "can anyone just explain me the question\\n",
      "voteCount": 14
    },
    {
      "name": "kushalnagwanshicloud",
      "year": 2022,
      "content": "Try to see a pattern of how the balls are moving in the grid !!\n\nAnd how they are moving in relation to grid's cells.\n\nYou will find the intuition for solving this question.",
      "voteCount": 8
    },
    {
      "name": "rahulrauki",
      "year": 2023,
      "content": "Even though these kind of problems are straightforward and easy to understand. Coding them can be trippy.",
      "voteCount": 7
    },
    {
      "name": "brijKhajuria",
      "year": 2023,
      "content": "\ud83d\udca1Hint\ud83d\udca1 \nWhat if there were only the top row? Which balls will get stuck? Which balls will move and to which cell?\nDetermine this information and use it for the next row. \n\nHere's the [solution](https://leetcode.com/problems/where-will-the-ball-fall/solutions/3023710/fast-iterative-o-m-x-n-solution-in-c-easy-to-understand/) if you need more help.",
      "voteCount": 5
    },
    {
      "name": "vanshdhawan60",
      "year": 2024,
      "content": "Excellent question!",
      "voteCount": 3
    },
    {
      "name": "vlde_lc",
      "year": 2023,
      "content": "I can\\'t see any ways for balls to fall into the same box. This makes the dynamic programming approach lose its benefits because we need to perform new computations for every ball, and we cannot effectively reuse previous computations",
      "voteCount": 3
    },
    {
      "name": "noahkester",
      "year": 2022,
      "content": "Passing 61/64 with the dynamic programming approach. Anyone have any clue why its failing just the last few ones?\\n        \\n        int[] dp = new int[m];\\n        for (int c = 0; c < m; c++) {\\n            dp[c] = c;\\n        }\\n        int nc;\\n        for (int r = 0; r < n; r++) {\\n            for (int c = 0; c < m; c++) {\\n                if (dp[c] == -1) {\\n                    continue;\\n                }\\n                nc = dp[c] + grid[r][c];\\n                if (nc >= 0 && nc < m) {\\n                    if (grid[r][c] == grid[r][nc]) {\\n                        dp[c] = nc;\\n                    }\\n                    else {\\n                        dp[c] = -1;\\n                    }\\n\\n                }\\n                else {\\n                    dp[c] = -1;\\n                }\\n            }\\n        }\\n        return dp;\\n\\nINPUT\\n[[1,-1,-1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,1],[-1,1,1,1,-1,-1,-1,-1,1,1,1,-1,-1,-1,1,-1,-1,1,1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,1,-1,1,1],[1,-1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,-1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,-1,1,1,-1,1,-1]]\\n\\nOUTPUT\\n[-1,-1,1,-1,-1,-1,-1,8,11,-1,-1,12,13,-1,-1,-1,-1,-1,17,-1,-1,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,38,-1,-1,-1,-1]\\nEXPECTED\\n[-1,-1,1,-1,-1,-1,-1,10,11,-1,-1,12,13,-1,-1,-1,-1,-1,17,-1,-1,20,-1,-1,-1,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]\\n\\nSo close :(",
      "voteCount": 3
    },
    {
      "name": "Satansoft",
      "year": 2025,
      "content": "Track ball\\'s row, column and consider `grid[row][col]` as `x` offset of fall, `y` always the same. \\n\\nThe ball can\\'t reach final row in 3 cases:\\n- ball moved outside the left boundary of row `col < 0`;\\n- ball moved outside the right boundary of row `(col >=  grid[0].length`;\\n- current cell of ball\\'s drop unequal adjacent right;",
      "voteCount": 1
    },
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "very fun question",
      "voteCount": 1
    }
  ]
}
