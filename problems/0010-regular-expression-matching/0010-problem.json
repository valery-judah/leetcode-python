{
  "category": "",
  "id": "10",
  "name": "Regular Expression Matching",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/regular-expression-matching/",
  "slug": "regular-expression-matching",
  "isPaidOnly": false,
  "tags": [
    "String",
    "Dynamic Programming",
    "Recursion"
  ],
  "similar_questions": [
    {
      "title": "Wildcard Matching",
      "difficulty": "Hard",
      "slug": "wildcard-matching"
    }
  ],
  "questionId": "10",
  "questionFrontendId": "10",
  "title": "Regular Expression Matching",
  "titleSlug": "regular-expression-matching",
  "content": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.​​​​</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 20</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n",
  "likes": 12925,
  "dislikes": 2329,
  "stats": {
    "totalAccepted": "1.2M",
    "totalSubmission": "4.1M",
    "totalAcceptedRaw": 1222091,
    "totalSubmissionRaw": 4130201,
    "acRate": "29.6%"
  },
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ],
  "metaData": {
    "name": "isMatch",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 14
      },
      {
        "taggedByAdmin": true,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 12
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "shawnForsythe",
      "year": 2013,
      "content": "In the given examples, the last one `isMatch(\"aab\", \"c*a*b\") \\u2192 true`; don't understand why these two strings matches?\\nCan someone please help me understand this example?",
      "voteCount": 718
    },
    {
      "name": "pratt06",
      "year": 2020,
      "content": "Test case\\ns = \"ab\"\\np =  .*\\n\\n.* is equivalent to \"\", \".\", \"..\", \"...\" so on. And then each \".\" can be replaced with a different character.\\n\\nThat\\'s why for this test case output is: true",
      "voteCount": 247
    },
    {
      "name": "neizod",
      "year": 2023,
      "content": "what the fuck is the pattern: a***abc ??? thet\\'s not even in the specification !!!",
      "voteCount": 98
    },
    {
      "name": "hakula_1234567",
      "year": 2023,
      "content": "Case 355:\n\"abc\"\n\"a***abc\"\n\nWhy is this case valid?\nNote that: It is guaranteed for each appearance of the character '\\*', there will be a previous valid character to match. While the second '\\*' is not a valid character since it is a special character.",
      "voteCount": 47
    },
    {
      "name": "wonderflow",
      "year": 2015,
      "content": "I'm not very understand why?\\n\\nCould someone explain for me? Thanks!\\n\\n383 / 445 test cases passed.\\n\\nInput:\\t\"aaa\", \"ab\\\\*ac\\\\*a\"\\nOutput:\\tfalse\\nExpected:\\ttrue",
      "voteCount": 44
    },
    {
      "name": "JayFang1993",
      "year": 2014,
      "content": "In the problem example case:\\nisMatch(\"ab\", \".*\") \\u2192 true\\n\\nwhile the Input (\"ab\", \".*c\") Expected output is false??",
      "voteCount": 42
    },
    {
      "name": "cherry.cheng.3720",
      "year": 2015,
      "content": "Here is the output:\\n\\nInput:\\t\"ab\", \".*\"\\nOutput:\\tfalse\\nExpected:\\ttrue",
      "voteCount": 36
    },
    {
      "name": "weindiancoders",
      "year": 2022,
      "content": "Input:\\n\"mississippi\"\\n\"mis* is * p *. \"\\nOutput:\\ntrue\\nExpected:\\nfalse\\n\\n\\nCan anyone explain me please , why expected output is false here.",
      "voteCount": 29
    },
    {
      "name": "Francesyfy",
      "year": 2021,
      "content": "Input:\\n\"aab\"\\n\"c\\\\*a\\\\*b\"\\nOutput:\\nfalse\\nExpected:\\ntrue",
      "voteCount": 24
    },
    {
      "name": "rocket_wind",
      "year": 2018,
      "content": "s = \"ab\"\\np = \".*\"\\n\\n\".\" means it matches any single character and \" * \" means it matches 0 or more occurence of the preceding character.\\nSo, if we take the value of \".\" as \"a\", then \\np = \"a *\" => p = \"aaaaa....\"\\np is a sequence of same characters. there cant be separate characters in p.\\nso, p wont have s as its substring.",
      "voteCount": 21
    }
  ]
}
