{
  "category": "",
  "id": "311",
  "name": "Sparse Matrix Multiplication",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/sparse-matrix-multiplication/",
  "slug": "sparse-matrix-multiplication",
  "isPaidOnly": true,
  "tags": [
    "Array",
    "Hash Table",
    "Matrix"
  ],
  "similar_questions": [],
  "questionId": "311",
  "questionFrontendId": "311",
  "title": "Sparse Matrix Multiplication",
  "titleSlug": "sparse-matrix-multiplication",
  "content": "<p>Given two <a href=\"https://en.wikipedia.org/wiki/Sparse_matrix\" target=\"_blank\">sparse matrices</a> <code>mat1</code> of size <code>m x k</code> and <code>mat2</code> of size <code>k x n</code>, return the result of <code>mat1 x mat2</code>. You may assume that multiplication is always possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/12/mult-grid.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]\n<strong>Output:</strong> [[7,0,0],[-7,0,3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat1 = [[0]], mat2 = [[0]]\n<strong>Output:</strong> [[0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat1.length</code></li>\n\t<li><code>k == mat1[i].length == mat2.length</code></li>\n\t<li><code>n == mat2[i].length</code></li>\n\t<li><code>1 &lt;= m, n, k &lt;= 100</code></li>\n\t<li><code>-100 &lt;= mat1[i][j], mat2[i][j] &lt;= 100</code></li>\n</ul>\n",
  "likes": 1112,
  "dislikes": 371,
  "stats": {
    "totalAccepted": "213.4K",
    "totalSubmission": "309.2K",
    "totalAcceptedRaw": 213438,
    "totalSubmissionRaw": 309207,
    "acRate": "69.0%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Matrix",
      "slug": "matrix"
    }
  ],
  "metaData": {
    "name": "multiply",
    "params": [
      {
        "name": "mat1",
        "type": "integer[][]"
      },
      {
        "name": "mat2",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[][]",
      "rowsize": "size_1",
      "colsize": "*col_size_2",
      "dealloc": true
    }
  },
  "discussion_posts": [
    {
      "name": "xuewei4d",
      "year": 2016,
      "content": "It should be a data structure design problem. \\n\\nYou should give a reasonable data structure to present sparse matrix and multiplication method.",
      "voteCount": 100
    },
    {
      "name": "Noah492",
      "year": 2023,
      "content": "Example is pretty awful if you don't know how to multiply a matrix in the first place.\nFor those who are also struggling to understand where the result comes from, here is how it is derived: \n\nFor the i'th row, take the j'th column.\nNow multiply the first in the row with the first in the column.\nAdd that result with the next index in the row multiplied by the next index in the column.\n\nSo in the example:\n\nmat 1\n\n[1,0,0]\n[-1,0,3]\n\nmat 2\n[7,0,0]\n[0,0,0]\n[0,0,1]\n\nTake the first row in mat1 and the first column in mat 2:\nRow in mat 1: [1,0,0]\nColumn in Mat 2: [7,0,0]\n\nMultiply and add (1 * 7) + (0 * 0) + (0 * 0) = 7\nSo this is our first [0,0] index in the result array.\n\nWe do this for the rest. \nTake first row and now the second column\nMultiply and add (1 * 0) + (0 * 0) + (0 * 0) = 0\n\nTake first row and now the third column\nMultiply and add (1 * 0) + (0 * 0) + (0 * 1) = 0\n\nTake second row and now the first column\nMultiply and add (-1 * 7) + (0 * 0) + (3 * 0) = -7\n\nTake second row and now the first column\nMultiply and add (-1 * 0) + (0 * 0) + (3 * 0) = 0\n\nTake second row and now the first column\nMultiply and add (-1 * 0) + (0 * 0) + (3 * 1) = 3\n\nNow our result array is\n\n[7,0,0]\n[-7,0,3]\n\nHope this clarifies how to multiply a matrix! :)\n\n",
      "voteCount": 78
    },
    {
      "name": "pzhang15",
      "year": 2019,
      "content": "The facebook interviewer asked me to design a data strucutures to save space and time for sparse matrix multiplication.",
      "voteCount": 60
    },
    {
      "name": "mo_hit4u",
      "year": 2017,
      "content": "I encountered this question in an interview. First, I coded the easiest answer given here \\nhttps://discuss.leetcode.com/topic/30625/easiest-java-solution/5. I thought if that can pass OJ then it should be good enough.\\nBut, I was told to code the more efficient one (using tables) and it should compile and run with test cases. I managed to write the code and test case for the efficient one but the timer went off just before running the code. However, the interviewer acknowledged that later solution is the most efficient and that he was expecting that first. Hence, if you see this question then don't code the easiest solution but do the more efficient one as that is what people expect and you will also save time by not writing the easiest and less efficient code.",
      "voteCount": 24
    },
    {
      "name": "lacrimae",
      "year": 2025,
      "content": "I don\\u2019t understand why anyone would ask this question in an interview. Sure, if you\\'re a recent graduate, it might seem easy. But I completed my degree about seven years ago, and it took me 15 minutes just to remember how matrix multiplication works before I could even start solving it..",
      "voteCount": 5
    },
    {
      "name": "gmbharath25",
      "year": 2025,
      "content": "tag this as a hard question",
      "voteCount": 3
    },
    {
      "name": "zloig",
      "year": 2023,
      "content": "Knowing the expected two pointer solution for sparse vector dot product, sparse matrix multiplication should be marked as a Hard problem.",
      "voteCount": 3
    },
    {
      "name": "certifiedpandaboy",
      "year": 2024,
      "content": "we can get faster than n x m x k if we utilize strassen\\'s algorithm for matrix multiplication which yields n ^ {~2.87} ; however the algorithm is beyond the scope of a LC problem",
      "voteCount": 2
    },
    {
      "name": "alt909",
      "year": 2023,
      "content": "The more practical a problem is the more difficult it is to manage, the optimized solution for this is the perfect example.",
      "voteCount": 2
    },
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "sparse?? whats that?? im just doing regular matrix multiplication ",
      "voteCount": 0
    }
  ]
}
