{
  "category": "",
  "id": "1618",
  "name": "Maximum Font to Fit a Sentence in a Screen",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/maximum-font-to-fit-a-sentence-in-a-screen/",
  "slug": "maximum-font-to-fit-a-sentence-in-a-screen",
  "isPaidOnly": true,
  "tags": [
    "Array",
    "String",
    "Binary Search",
    "Interactive"
  ],
  "similar_questions": [],
  "questionId": "1384",
  "questionFrontendId": "1618",
  "title": "Maximum Font to Fit a Sentence in a Screen",
  "titleSlug": "maximum-font-to-fit-a-sentence-in-a-screen",
  "content": "<p>You are given a string <code>text</code>. We want to display <code>text</code> on a screen of width <code>w</code> and height <code>h</code>. You can choose any font size from array <code>fonts</code>, which contains the available font sizes <strong>in ascending order</strong>.</p>\r\n\r\n<p>You can use the <code>FontInfo</code> interface to get the width and height of any character at any available font size.</p>\r\n\r\n<p>The <code>FontInfo</code> interface is defined as such:</p>\r\n\r\n<pre>\r\ninterface FontInfo {\r\n  // Returns the width of character ch on the screen using font size fontSize.\r\n  // O(1) per call\r\n  public int getWidth(int fontSize, char ch);\r\n\r\n  // Returns the height of any character on the screen using font size fontSize.\r\n  // O(1) per call\r\n  public int getHeight(int fontSize);\r\n}</pre>\r\n\r\n<p>The calculated width of <code>text</code> for some <code>fontSize</code> is the <strong>sum</strong> of every <code>getWidth(fontSize, text[i])</code> call for each <code>0 &lt;= i &lt; text.length</code> (<strong>0-indexed</strong>). The calculated height of <code>text</code> for some <code>fontSize</code> is <code>getHeight(fontSize)</code>. Note that <code>text</code> is displayed on a <strong>single line</strong>.</p>\r\n\r\n<p>It is guaranteed that <code>FontInfo</code> will return the same value if you call <code>getHeight</code> or <code>getWidth</code> with the same parameters.</p>\r\n\r\n<p>It is also guaranteed that for any font size <code>fontSize</code> and any character <code>ch</code>:</p>\r\n\r\n<ul>\r\n\t<li><code>getHeight(fontSize) &lt;= getHeight(fontSize+1)</code></li>\r\n\t<li><code>getWidth(fontSize, ch) &lt;= getWidth(fontSize+1, ch)</code></li>\r\n</ul>\r\n\r\n<p>Return <em>the maximum font size you can use to display </em><code>text</code><em> on the screen</em>. If <code>text</code> cannot fit on the display with any font size, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> text = &quot;helloworld&quot;, w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]\r\n<strong>Output:</strong> 6\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> text = &quot;leetcode&quot;, w = 1000, h = 50, fonts = [1,2,4]\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> text = &quot;easyquestion&quot;, w = 100, h = 100, fonts = [10,15,20,25]\r\n<strong>Output:</strong> -1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= text.length &lt;= 50000</code></li>\r\n\t<li><code>text</code> contains only lowercase English letters.</li>\r\n\t<li><code>1 &lt;= w &lt;= 10<sup>7</sup></code></li>\r\n\t<li><code>1 &lt;= h &lt;= 10<sup>4</sup></code></li>\r\n\t<li><code>1 &lt;= fonts.length &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>1 &lt;= fonts[i] &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>fonts</code> is sorted in ascending order and does not contain duplicates.</li>\r\n</ul>",
  "likes": 113,
  "dislikes": 22,
  "stats": {
    "totalAccepted": "7.3K",
    "totalSubmission": "11.8K",
    "totalAcceptedRaw": 7285,
    "totalSubmissionRaw": 11839,
    "acRate": "61.5%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Interactive",
      "slug": "interactive"
    }
  ],
  "metaData": {
    "name": "maxFont",
    "params": [
      {
        "name": "text",
        "type": "string"
      },
      {
        "type": "integer",
        "name": "w"
      },
      {
        "type": "integer",
        "name": "h"
      },
      {
        "type": "integer[]",
        "name": "fonts"
      }
    ],
    "return": {
      "type": "integer"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3"
    ],
    "manual": true
  },
  "discussion_posts": [
    {
      "name": "matthewjinmp",
      "year": 2025,
      "content": "a very complicated way to ask a binary search question",
      "voteCount": 1
    },
    {
      "name": "penny5283",
      "year": 2025,
      "content": "simple one, boost confidence",
      "voteCount": 0
    },
    {
      "name": "nikhilreddydev",
      "year": 2022,
      "content": "can someone please tell me whats wrong with my code?\\n\\nint maxFont(string text, int w, int h, vector<int>& fonts, FontInfo fontInfo) {\\n        int freq[26] = {0};\\n        for(auto &ch: text)\\n            ++freq[ch - \\'a\\'];\\n\\n        int left = 0, right = fonts.size() - 1;\\n        while(left < right) {\\n            int mid = left + (right - left) / 2;\\n            if(canDisplay(freq, w, h, fontInfo, mid))\\n                left = mid + 1;\\n            else\\n                right = mid;\\n        }\\n\\n        return left - 1 == -1 ? -1 : fonts[left - 1];\\n    }\\nint maxFont(string text, int w, int h, vector<int>& fonts, FontInfo fontInfo) {\\n        int freq[26] = {0};\\n        for(auto &ch: text)\\n            ++freq[ch - \\'a\\'];\\n\\n        int left = 0, right = fonts.size() - 1;\\n        while(left < right) {\\n            int mid = left + (right - left) / 2;\\n            if(canDisplay(freq, w, h, fontInfo, mid))\\n                left = mid + 1;\\n            else\\n                right = mid;\\n        }\\n\\n        return left - 1 == -1 ? -1 : fonts[left - 1];\\n    }",
      "voteCount": 0
    }
  ]
}
