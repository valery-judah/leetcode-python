{
  "category": "",
  "id": "1391",
  "name": "Check if There is a Valid Path in a Grid",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid/",
  "slug": "check-if-there-is-a-valid-path-in-a-grid",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Matrix"
  ],
  "similar_questions": [
    {
      "title": " Check if There Is a Valid Parentheses String Path",
      "difficulty": "Hard",
      "slug": "check-if-there-is-a-valid-parentheses-string-path"
    }
  ],
  "questionId": "1507",
  "questionFrontendId": "1391",
  "title": "Check if There is a Valid Path in a Grid",
  "titleSlug": "check-if-there-is-a-valid-path-in-a-grid",
  "content": "<p>You are given an <code>m x n</code> <code>grid</code>. Each cell of <code>grid</code> represents a street. The street of <code>grid[i][j]</code> can be:</p>\n\n<ul>\n\t<li><code>1</code> which means a street connecting the left cell and the right cell.</li>\n\t<li><code>2</code> which means a street connecting the upper cell and the lower cell.</li>\n\t<li><code>3</code> which means a street connecting the left cell and the lower cell.</li>\n\t<li><code>4</code> which means a street connecting the right cell and the lower cell.</li>\n\t<li><code>5</code> which means a street connecting the left cell and the upper cell.</li>\n\t<li><code>6</code> which means a street connecting the right cell and the upper cell.</li>\n</ul>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/03/05/main.png\" style=\"width: 450px; height: 708px;\" />\n<p>You will initially start at the street of the upper-left cell <code>(0, 0)</code>. A valid path in the grid is a path that starts from the upper left cell <code>(0, 0)</code> and ends at the bottom-right cell <code>(m - 1, n - 1)</code>. <strong>The path should only follow the streets</strong>.</p>\n\n<p><strong>Notice</strong> that you are <strong>not allowed</strong> to change any street.</p>\n\n<p>Return <code>true</code><em> if there is a valid path in the grid or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/03/05/e1.png\" style=\"width: 455px; height: 311px;\" />\n<pre>\n<strong>Input:</strong> grid = [[2,4,3],[6,5,2]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/03/05/e2.png\" style=\"width: 455px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2,1],[1,2,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,2]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 6</code></li>\n</ul>\n",
  "likes": 866,
  "dislikes": 323,
  "stats": {
    "totalAccepted": "35K",
    "totalSubmission": "71K",
    "totalAcceptedRaw": 35016,
    "totalSubmissionRaw": 70994,
    "acRate": "49.3%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Depth-First Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Breadth-First Search",
      "slug": "breadth-first-search"
    },
    {
      "name": "Union Find",
      "slug": "union-find"
    },
    {
      "name": "Matrix",
      "slug": "matrix"
    }
  ],
  "metaData": {
    "name": "hasValidPath",
    "params": [
      {
        "name": "grid",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "boolean"
    }
  },
  "discussion_posts": [
    {
      "name": "ctlang",
      "year": 2023,
      "content": "Knowledge Complexity: O(easy)\\nTime Complexity: O(hard)",
      "voteCount": 16
    },
    {
      "name": "TanmaY0411",
      "year": 2024,
      "content": "You can check your keyboard quality by doing this question.",
      "voteCount": 12
    },
    {
      "name": "jbrad",
      "year": 2020,
      "content": "The description explicitly says:\\n * A<b> valid</b> path in the grid is a path which starts from the upper left cell (0,0) and <b>ends at the bottom-right cell</b> (m - 1, n - 1).*\\n  \\nHowever, it requires these two cases to pass: \\n*    {{6,1,3}, {4,1,5}},    which ends in the <b>bottom left</b> corner \\n*    {{3,4,3,4},{2,2,2,2},{6,5,6,5 }},   which ends in the <b>top right</b> corner\\n\\nWhile requiring this case to fail, which also ends in the bottom left corner.\\n *  {{2,6}},    which also ends in the <b>bottom left</b> corner as\\n   \\nI haven\\'t checked too many other solutions, but my version (which just followed the path) ended up with lots of code to check these extra edge cases.\\n",
      "voteCount": 10
    },
    {
      "name": "legiatuan1998",
      "year": 2024,
      "content": "this question has no learning value, it's just very implementation-based. I'll leave the directions and valid map here for folks who will stumble upon this problem after.\n\n         directions = {\n            1: [(0, -1), (0, 1)],  # Street 1: Horizontal (left, right)\n            2: [(1, 0), (-1, 0)],  # Street 2: Vertical (down, up)\n            3: [(0, -1), (1, 0)],  # Street 3: Left-Down (left, down)\n            4: [(0, 1), (1, 0)],   # Street 4: Right-Down (right, down)\n            5: [(0, -1), (-1, 0)], # Street 5: Left-Up (left, up)\n            6: [(0, 1), (-1, 0)]   # Street 6: Right-Up (right, up)\n        }\n\n        valid = {\n            1: [(1, 4, 6), (1, 3, 5)],  # Street 1: Valid connections for right and left\n            2: [(2, 5, 6), (2, 3, 4)],  # Street 2: Valid connections for down and up\n            3: [(1, 4, 6), (2, 5, 6)],  # Street 3: Valid connections for left and down\n            4: [(1, 3, 5), (2, 5, 6)],  # Street 4: Valid connections for right and down\n            5: [(1, 4, 6), (2, 3, 4)],  # Street 5: Valid connections for left and up\n            6: [(1, 3, 5), (2, 3, 4)]   # Street 6: Valid connections for right and up\n        }",
      "voteCount": 7
    },
    {
      "name": "legiatuan1998",
      "year": 2024,
      "content": "wtf is this",
      "voteCount": 6
    },
    {
      "name": "AlexPG",
      "year": 2023,
      "content": "One of the worst tasks I've seen so far-_-. Nothing hard in terms of algorithms but a lot of hardcoding with frustrating debug. You can easily stuck here debugging for a lot of time. I would recommend to skip that task and not even try to do it. Don't waste your time.",
      "voteCount": 5
    },
    {
      "name": "Sam_OR",
      "year": 2025,
      "content": "u get nothing from solving this question",
      "voteCount": 2
    },
    {
      "name": "dinakarrajkotipalli",
      "year": 2024,
      "content": "can someone pls help me with [[4,1],[6,1]] my doubt was i start at 4 it will make me to go 1 from 1 is there any way to reach its exact down 1 no right then why or am i missing something",
      "voteCount": 2
    },
    {
      "name": "yetong_li",
      "year": 2024,
      "content": "I hate reading long descriptions...... :(",
      "voteCount": 2
    },
    {
      "name": "d42jh",
      "year": 2020,
      "content": "The expected result for this case is true, but I thought the valid path should be from upper left to bottom right? In this graph the path is upper left to bottom left...\\nCould anyone explain this to me? Thanks",
      "voteCount": 1
    }
  ]
}
