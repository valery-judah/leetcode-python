{
  "category": "",
  "id": "94",
  "name": "Binary Tree Inorder Traversal",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/binary-tree-inorder-traversal/",
  "slug": "binary-tree-inorder-traversal",
  "isPaidOnly": false,
  "tags": [
    "Stack",
    "Tree",
    "Depth-First Search",
    "Binary Tree"
  ],
  "similar_questions": [
    {
      "title": "Validate Binary Search Tree",
      "difficulty": "Medium",
      "slug": "validate-binary-search-tree"
    },
    {
      "title": "Binary Tree Preorder Traversal",
      "difficulty": "Easy",
      "slug": "binary-tree-preorder-traversal"
    },
    {
      "title": "Binary Tree Postorder Traversal",
      "difficulty": "Easy",
      "slug": "binary-tree-postorder-traversal"
    },
    {
      "title": "Binary Search Tree Iterator",
      "difficulty": "Medium",
      "slug": "binary-search-tree-iterator"
    },
    {
      "title": "Kth Smallest Element in a BST",
      "difficulty": "Medium",
      "slug": "kth-smallest-element-in-a-bst"
    },
    {
      "title": "Closest Binary Search Tree Value II",
      "difficulty": "Hard",
      "slug": "closest-binary-search-tree-value-ii"
    },
    {
      "title": "Inorder Successor in BST",
      "difficulty": "Medium",
      "slug": "inorder-successor-in-bst"
    },
    {
      "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
      "difficulty": "Medium",
      "slug": "convert-binary-search-tree-to-sorted-doubly-linked-list"
    },
    {
      "title": "Minimum Distance Between BST Nodes",
      "difficulty": "Easy",
      "slug": "minimum-distance-between-bst-nodes"
    }
  ],
  "questionId": "94",
  "questionFrontendId": "94",
  "title": "Binary Tree Inorder Traversal",
  "titleSlug": "binary-tree-inorder-traversal",
  "content": "<p>Given the <code>root</code> of a binary tree, return <em>the inorder traversal of its nodes&#39; values</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">root = [1,null,2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,3,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/29/screenshot-2024-08-29-202743.png\" style=\"width: 200px; height: 264px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">root = [1,2,3,4,5,null,8,null,null,6,7,9]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[4,2,6,5,7,1,3,9,8]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/29/tree_2.png\" style=\"width: 350px; height: 286px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">root = []</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">root = [1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?",
  "likes": 14418,
  "dislikes": 863,
  "stats": {
    "totalAccepted": "3.3M",
    "totalSubmission": "4.2M",
    "totalAcceptedRaw": 3311400,
    "totalSubmissionRaw": 4188348,
    "acRate": "79.1%"
  },
  "topicTags": [
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Depth-First Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Binary Tree",
      "slug": "binary-tree"
    }
  ],
  "metaData": {
    "name": "inorderTraversal",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    }
  },
  "discussion_posts": [
    {
      "name": "adityagarg96",
      "year": 2021,
      "content": "Since this is one of the very fundamental questions about trees (and its marked easy) I expect it to have 5-6 interesting tree examples so beginners can get an intuitive feel for how inorder traversal works. \\n\\nOtherwise they can come up with a solution that passes the test cases and be confused why their solution is not correct",
      "voteCount": 531
    },
    {
      "name": "raj73",
      "year": 2022,
      "content": "I wish this get\\'s easier for me someday. I am working on it, putting in my honest efforts every single day. Hope this hardwork pays off. :( :)",
      "voteCount": 457
    },
    {
      "name": "bwpge",
      "year": 2023,
      "content": "The examples are not helpful for beginners. I already know the different traversal methods so I don\\'t really care for myself. However, having the same single branch be the only visual example for preorder, inorder, and postorder traversals is just pure laziness. Changing the trees and adding enough branches with arrows to follow so a beginner can visualize what is happening would be the minimum effort I expect.",
      "voteCount": 224
    },
    {
      "name": "nickthekey",
      "year": 2017,
      "content": "I've spent a few hours trying to understand what \"inorder\" traversal means, and I can't figure it out!\\n\\nDoes it mean from left most to right most? \\nDoes it mean from least to greatest?\\nDoes it mean the order they were added?\\nI can't figure it out.",
      "voteCount": 84
    },
    {
      "name": "dLENS",
      "year": 2023,
      "content": "I don\\'t even get the example. Why is root = [1, null, 2, 3]? There is nothing in the given tree diagram that translates into an array of  [1, null, 2, 3]? Why isn\\'t it just [1, 2, 3]? Where does the null come from and why is it just thrown in randomly between the 1 and the 2???",
      "voteCount": 57
    },
    {
      "name": "b27022602",
      "year": 2023,
      "content": "Am I the only one who cant not even understand the description of the question?\\nI feel the problem is easy, but some concept are not. ",
      "voteCount": 48
    },
    {
      "name": "shingcao",
      "year": 2014,
      "content": "Can anyone explain why this problem have a hash table tag?",
      "voteCount": 29
    },
    {
      "name": "Dirk41",
      "year": 2019,
      "content": "Why root value is visited first in the test case ? If the root value is visisted first, I believe that\\'s preorder traversial. \\nPlease enlight me !",
      "voteCount": 21
    },
    {
      "name": "strmrdr123",
      "year": 2023,
      "content": "Why are the examples for this question so bad...? Maybe give a larger example so people can understand what is required?",
      "voteCount": 20
    },
    {
      "name": "zelgit",
      "year": 2020,
      "content": "I\\'m trying to use the remove() function in ArrayUtils (ArrayUtils.remove(container, element) but it seems that LeetCode is not recognizing it. So I\\'m unable to use the function with or without importing import org.apache.commons.lang3.ArrayUtils; (which it didn\\'t recognize). Pls help! :)",
      "voteCount": 18
    }
  ]
}
