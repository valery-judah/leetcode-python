{
  "category": "",
  "id": "642",
  "name": "Design Search Autocomplete System",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/design-search-autocomplete-system/",
  "slug": "design-search-autocomplete-system",
  "isPaidOnly": true,
  "tags": [
    "String",
    "Depth-First Search",
    "Design",
    "Trie",
    "Sorting",
    "Heap (Priority Queue)",
    "Data Stream"
  ],
  "similar_questions": [
    {
      "title": "Implement Trie (Prefix Tree)",
      "difficulty": "Medium",
      "slug": "implement-trie-prefix-tree"
    }
  ],
  "questionId": "642",
  "questionFrontendId": "642",
  "title": "Design Search Autocomplete System",
  "titleSlug": "design-search-autocomplete-system",
  "content": "<p>Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character <code>&#39;#&#39;</code>).</p>\n\n<p>You are given a string array <code>sentences</code> and an integer array <code>times</code> both of length <code>n</code> where <code>sentences[i]</code> is a previously typed sentence and <code>times[i]</code> is the corresponding number of times the sentence was typed. For each input character except <code>&#39;#&#39;</code>, return the top <code>3</code> historical hot sentences that have the same prefix as the part of the sentence already typed.</p>\n\n<p>Here are the specific rules:</p>\n\n<ul>\n\t<li>The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.</li>\n\t<li>The returned top <code>3</code> hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same hot degree, use ASCII-code order (smaller one appears first).</li>\n\t<li>If less than <code>3</code> hot sentences exist, return as many as you can.</li>\n\t<li>When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.</li>\n</ul>\n\n<p>Implement the <code>AutocompleteSystem</code> class:</p>\n\n<ul>\n\t<li><code>AutocompleteSystem(String[] sentences, int[] times)</code> Initializes the object with the <code>sentences</code> and <code>times</code> arrays.</li>\n\t<li><code>List&lt;String&gt; input(char c)</code> This indicates that the user typed the character <code>c</code>.\n\t<ul>\n\t\t<li>Returns an empty array <code>[]</code> if <code>c == &#39;#&#39;</code> and stores the inputted sentence in the system.</li>\n\t\t<li>Returns the top <code>3</code> historical hot sentences that have the same prefix as the part of the sentence already typed. If there are fewer than <code>3</code> matches, return them all.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;AutocompleteSystem&quot;, &quot;input&quot;, &quot;input&quot;, &quot;input&quot;, &quot;input&quot;]\n[[[&quot;i love you&quot;, &quot;island&quot;, &quot;iroman&quot;, &quot;i love leetcode&quot;], [5, 3, 2, 2]], [&quot;i&quot;], [&quot; &quot;], [&quot;a&quot;], [&quot;#&quot;]]\n<strong>Output</strong>\n[null, [&quot;i love you&quot;, &quot;island&quot;, &quot;i love leetcode&quot;], [&quot;i love you&quot;, &quot;i love leetcode&quot;], [], []]\n\n<strong>Explanation</strong>\nAutocompleteSystem obj = new AutocompleteSystem([&quot;i love you&quot;, &quot;island&quot;, &quot;iroman&quot;, &quot;i love leetcode&quot;], [5, 3, 2, 2]);\nobj.input(&quot;i&quot;); // return [&quot;i love you&quot;, &quot;island&quot;, &quot;i love leetcode&quot;]. There are four sentences that have prefix &quot;i&quot;. Among them, &quot;ironman&quot; and &quot;i love leetcode&quot; have same hot degree. Since &#39; &#39; has ASCII code 32 and &#39;r&#39; has ASCII code 114, &quot;i love leetcode&quot; should be in front of &quot;ironman&quot;. Also we only need to output top 3 hot sentences, so &quot;ironman&quot; will be ignored.\nobj.input(&quot; &quot;); // return [&quot;i love you&quot;, &quot;i love leetcode&quot;]. There are only two sentences that have prefix &quot;i &quot;.\nobj.input(&quot;a&quot;); // return []. There are no sentences that have prefix &quot;i a&quot;.\nobj.input(&quot;#&quot;); // return []. The user finished the input, the sentence &quot;i a&quot; should be saved as a historical sentence in system. And the following input will be counted as a new search.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == sentences.length</code></li>\n\t<li><code>n == times.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= sentences[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= times[i] &lt;= 50</code></li>\n\t<li><code>c</code> is a lowercase English letter, a hash <code>&#39;#&#39;</code>, or space <code>&#39; &#39;</code>.</li>\n\t<li>Each tested sentence will be a sequence of characters <code>c</code> that end with the character <code>&#39;#&#39;</code>.</li>\n\t<li>Each tested sentence will have a length in the range <code>[1, 200]</code>.</li>\n\t<li>The words in each input sentence are separated by single spaces.</li>\n\t<li>At most <code>5000</code> calls will be made to <code>input</code>.</li>\n</ul>\n",
  "likes": 2161,
  "dislikes": 195,
  "stats": {
    "totalAccepted": "158.3K",
    "totalSubmission": "320K",
    "totalAcceptedRaw": 158330,
    "totalSubmissionRaw": 319954,
    "acRate": "49.5%"
  },
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Depth-First Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Trie",
      "slug": "trie"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    },
    {
      "name": "Heap (Priority Queue)",
      "slug": "heap-priority-queue"
    },
    {
      "name": "Data Stream",
      "slug": "data-stream"
    }
  ],
  "metaData": {
    "classname": "AutocompleteSystem",
    "maxbytesperline": 200000,
    "constructor": {
      "params": [
        {
          "type": "string[]",
          "name": "sentences"
        },
        {
          "type": "integer[]",
          "name": "times"
        },
        {
          "type": "integer",
          "name": "sentencesSize",
          "lang": "c",
          "value": "size_1"
        },
        {
          "type": "integer",
          "name": "timesSize",
          "lang": "c",
          "value": "size_2"
        }
      ]
    },
    "methods": [
      {
        "name": "input",
        "params": [
          {
            "type": "character",
            "name": "c"
          }
        ],
        "return": {
          "type": "list<string>"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    }
  },
  "discussion_posts": [
    {
      "name": "AntonBorzenko",
      "year": 2023,
      "content": "Understanding the task description is a whole subtask.",
      "voteCount": 79
    },
    {
      "name": "kun_10",
      "year": 2023,
      "content": "Request to problem writers: Please describe clearly what you want. Sometimes, I feel like we are taking English comprehension tests rather than algorithmic problems.",
      "voteCount": 43
    },
    {
      "name": "sacso",
      "year": 2024,
      "content": "If someone asks me this in a 45m interview I'm ending the call",
      "voteCount": 27
    },
    {
      "name": "jchoubankai",
      "year": 2023,
      "content": "bruh this problem description is so bad I had to read the editorial to understand the question.\n\nfor anyone who doesn't understand input:\n- it only takes in 1 char at a time, you need to keep track of the current total input (prefix)\n- calling input adds 1 char at a time to the prefix\n- calling input with '#' means that you reset the input and add the total input as a sentence",
      "voteCount": 26
    },
    {
      "name": "_noexcuses",
      "year": 2018,
      "content": "If so, what kind of interview was it; phone, on-site? How much time were you given?\\nThanks!",
      "voteCount": 13
    },
    {
      "name": "aronzx",
      "year": 2024,
      "content": "If they ask you this question in the interview, you must be interviewing for the CEO\\'s post.",
      "voteCount": 9
    },
    {
      "name": "PhantomGhost",
      "year": 2023,
      "content": "The way the question is worded is very hard to understand.",
      "voteCount": 5
    },
    {
      "name": "Rimberse",
      "year": 2023,
      "content": "If they were to ask me this question during interview, I would waste all the alloted time trying to understand it.",
      "voteCount": 4
    },
    {
      "name": "mystiquecoder",
      "year": 2023,
      "content": "what a ruthless question.",
      "voteCount": 4
    },
    {
      "name": "Syed_Bilal",
      "year": 2024,
      "content": "This question is generally asked in System design HLD round where you are not required to code.",
      "voteCount": 2
    }
  ]
}
