{
  "category": "",
  "id": "188",
  "name": "Best Time to Buy and Sell Stock IV",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/",
  "slug": "best-time-to-buy-and-sell-stock-iv",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Dynamic Programming"
  ],
  "similar_questions": [
    {
      "title": "Best Time to Buy and Sell Stock",
      "difficulty": "Easy",
      "slug": "best-time-to-buy-and-sell-stock"
    },
    {
      "title": "Best Time to Buy and Sell Stock II",
      "difficulty": "Medium",
      "slug": "best-time-to-buy-and-sell-stock-ii"
    },
    {
      "title": "Best Time to Buy and Sell Stock III",
      "difficulty": "Hard",
      "slug": "best-time-to-buy-and-sell-stock-iii"
    },
    {
      "title": "Maximum Profit From Trading Stocks",
      "difficulty": "Medium",
      "slug": "maximum-profit-from-trading-stocks"
    }
  ],
  "questionId": "188",
  "questionFrontendId": "188",
  "title": "Best Time to Buy and Sell Stock IV",
  "titleSlug": "best-time-to-buy-and-sell-stock-iv",
  "content": "<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>k</code>.</p>\n\n<p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions: i.e. you may buy at most <code>k</code> times and sell at most <code>k</code> times.</p>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [2,4,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [3,2,6,5,0,3]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>1 &lt;= prices.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n",
  "likes": 7843,
  "dislikes": 219,
  "stats": {
    "totalAccepted": "635.6K",
    "totalSubmission": "1.3M",
    "totalAcceptedRaw": 635572,
    "totalSubmissionRaw": 1320325,
    "acRate": "48.1%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "metaData": {
    "name": "maxProfit",
    "params": [
      {
        "name": "k",
        "type": "integer"
      },
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "elison",
      "year": 2015,
      "content": "It seemed ambiguous to me, but I am going off the assumption that buy and sell together is 1 transaction. Am I correct?",
      "voteCount": 61
    },
    {
      "name": "whshph",
      "year": 2020,
      "content": "Why every solution is bottom up solution? Looking for top-down variant. Actually, I\\'m looking for gradual improvement from brute-force to better brute-force (if any) to top-down dp to bottom up dp. This kind of incremental learning strongly imprints concepts and make it easy to understand the complexity in increments. Please share if there\\'s any such post.",
      "voteCount": 44
    },
    {
      "name": "deft235",
      "year": 2020,
      "content": "After having finished this four problems and having read some others\\' answers, I think maybe it will help someone to provide a somehow clear explanation. That\\'s why I wrote this summary. If you find it useful, a like will be appreciated.\\n\\nI will introduce IV before III, as III is actually a special case. However, there exists a different solution for III as well.\\n\\nI,II\\nDefine a peak as a local maximum, a valley as a local minimum.\\n\\nThe essence of these first two problems is to find 1) largest difference between a peak and a valley in an array; 2) the sum of all peak-valley-differences that exist.(as there is no limit of the number of transactions, which makes things easier compared to problem[3,4]).\\n\\nfor (1), keeps track of minimum until current position and records maximum possible profit; for (2), add all positive gaps suffices. Remember, a valley-peak-valley-peak will make profit greater rather than a merged valley-peak though the absolute difference may be greater for the latter one. See the graph explanation on Leetcode solution.\\n\\nIV\\nProblem 4 actually generalises all cases in this scenario. However, as k becomes larger, the problem 4 degrades to problem 2. It is important to note that the dynamic programming solution works when k is less than the maximum possible number of transactions.\\n\\nDP Solution: split the problem hierarchically. Consider the case where we make i transactions, i = 1, 2, ... k.\\n\\nOn each day, there are two states: hold stocks(H) or not hold stocks(NH). Three possible options for the operator: buy, sell or None.\\n\\nDenote the number of days by j. The transition formula for dp here is:\\n\\nH[i][j] = max(NH[i-1][j-1]-prices[j],H[i][j-1]) NH[i][j] = max(H[i][j]+prices[j],NH[i][j-1])\\n\\nExplaination for the first formula: on each day j, either we 1)buy the stock, which begins a new transaction, thus the profit is NH[i-1][j-1] minus current stock price; either 2)None, and the profit keeps the same as on day j-1.\\n\\nFor implementation, note that updating H concerns previous NH and current H, while updating NH concerns both current NH and current NH. Thus, update firstly H, then NH, a one-dimensional dp array suffices.\\n\\nIII\\nProblem 3 can be solved using the solution for 4, but in the case of at most 2 transactions permitted, there exists a simpler solution. As we can find the two(if existed) maximum profit seperately, until day i and after day i.\\n\\nOn day i, we calculate two maximum, in forward and backward ways respectively. Record the sum of these two maximums for each day, and pick the largest one.\\n\\nI\\'ve uploaded my solutions for III and IV on my Github. If you are confused about implementation, visit:\\nhttps://github.com/Maple177/Leetcode/tree/master/typical%20questions/Best%20Time%20to%20Buy%20and%20Sell%20Stock",
      "voteCount": 33
    },
    {
      "name": "Vucibatina",
      "year": 2015,
      "content": "This does not make sense.  Is there a  charity based stock exchange that gives out stocks for free?",
      "voteCount": 26
    },
    {
      "name": "dengzj2014",
      "year": 2020,
      "content": "when K > prices.length/2, the problem becomes to any transation problem, and it becomes to O(N) problem",
      "voteCount": 26
    },
    {
      "name": "No_one_can_stop_me",
      "year": 2023,
      "content": "192 / 210 testcases passed and I died.... \\uD83D\\uDE2D",
      "voteCount": 18
    },
    {
      "name": "a4amado",
      "year": 2024,
      "content": "I hope tabulation was never a thing",
      "voteCount": 14
    },
    {
      "name": "goeasy",
      "year": 2024,
      "content": "Got this in my actual FAANG interview and was completely blown away. Couldn\\'t understand the k transaction first. I came up with some solution but that was wrong. I still need to learn DP.",
      "voteCount": 14
    },
    {
      "name": "siddharth_208",
      "year": 2025,
      "content": "I wish everyone who comes across this message attains their dream job in 2024!",
      "voteCount": 6
    },
    {
      "name": "gvinaycr",
      "year": 2015,
      "content": "Can anyone explain the expected result?\\n\\nInput:\\t2, [6,1,3,2,4,7]\\nOutput:\\t6\\nExpected:\\t7",
      "voteCount": 6
    }
  ]
}
