{
  "category": "",
  "id": "17",
  "name": "Letter Combinations of a Phone Number",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/letter-combinations-of-a-phone-number/",
  "slug": "letter-combinations-of-a-phone-number",
  "isPaidOnly": false,
  "tags": [
    "Hash Table",
    "String",
    "Backtracking"
  ],
  "similar_questions": [
    {
      "title": "Generate Parentheses",
      "difficulty": "Medium",
      "slug": "generate-parentheses"
    },
    {
      "title": "Combination Sum",
      "difficulty": "Medium",
      "slug": "combination-sum"
    },
    {
      "title": "Binary Watch",
      "difficulty": "Easy",
      "slug": "binary-watch"
    },
    {
      "title": "Count Number of Texts",
      "difficulty": "Medium",
      "slug": "count-number-of-texts"
    },
    {
      "title": "Minimum Number of Pushes to Type Word I",
      "difficulty": "Easy",
      "slug": "minimum-number-of-pushes-to-type-word-i"
    },
    {
      "title": "Minimum Number of Pushes to Type Word II",
      "difficulty": "Medium",
      "slug": "minimum-number-of-pushes-to-type-word-ii"
    }
  ],
  "questionId": "17",
  "questionFrontendId": "17",
  "title": "Letter Combinations of a Phone Number",
  "titleSlug": "letter-combinations-of-a-phone-number",
  "content": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\" style=\"width: 300px; height: 243px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;23&quot;\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;2&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\n</ul>\n",
  "likes": 20196,
  "dislikes": 1102,
  "stats": {
    "totalAccepted": "2.7M",
    "totalSubmission": "4.2M",
    "totalAcceptedRaw": 2691462,
    "totalSubmissionRaw": 4177847,
    "acRate": "64.4%"
  },
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ],
  "metaData": {
    "name": "letterCombinations",
    "params": [
      {
        "name": "digits",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 18
      },
      {
        "taggedByAdmin": true,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 17
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "Aditya_Rawat23",
      "year": 2023,
      "content": "really emotional rn ,was not able to stick around with recursion even after watching tons of videos....\\nafter giving some time patiently,was able to understand the flow of recursion..\\ndid this complete problem by myself without any help. This maybe not that big thing for others but i am really really happy and satisfied rn",
      "voteCount": 1571
    },
    {
      "name": "jesse-sravya",
      "year": 2024,
      "content": "I got asked this in an interview. Solved it first in the interview itself. I got hired :\\')",
      "voteCount": 284
    },
    {
      "name": "AasheeshLikePanner",
      "year": 2023,
      "content": "Why people are spamming Solutions in Discussion tab? ",
      "voteCount": 192
    },
    {
      "name": "aerraj",
      "year": 2023,
      "content": "I am so happy today, I solved a problem of recursion on my own from beginning to end.Also thanks to [@Aditya Rawat](/Aditya_Rawat23) his comment made me feel like , Instead of getting afraid I should give it a try and voila I solved it by myself. Absolutely happy. Those who are not able to solve it , give it a try guys take your copy and formulate the answer think how it would be possible by drawing a diagram , write some pseudocode, do a dry run of it and It will be done.",
      "voteCount": 140
    },
    {
      "name": "sh1n0b1n0m0n0",
      "year": 2023,
      "content": "letterCombinations(\"234\") \\nWrong:\\n[\\'ad\\', \\'ae\\', \\'af\\', \\'ag\\', \\'ah\\', \\'ai\\', \\'bd\\', \\'be\\', \\'bf\\', \\'bg\\', \\'bh\\', \\'bi\\', \\'cd\\', \\'ce\\', \\'cf\\', \\'cg\\', \\'ch\\', \\'ci\\', \\'dg\\', \\'dh\\', \\'di\\', \\'eg\\', \\'eh\\', \\'ei\\', \\'fg\\', \\'fh\\', \\'fi\\']\\n\\nRight:\\n[\"adg\", \"adh\", \"adi\", \"aeg\", \"aeh\", \"aei\", \"afg\", \"afh\", \"afi\", \"bdg\", \"bdh\", \"bdi\", \"beg\", \"beh\", \"bei\", \"bfg\", \"bfh\", \"bfi\", \"cdg\", \"cdh\", \"cdi\", \"ceg\", \"ceh\", \"cei\", \"cfg\", \"cfh\", \"cfi\"]",
      "voteCount": 102
    },
    {
      "name": "sy_chen",
      "year": 2018,
      "content": "Obviously the empty character string **can** be represented by an empty digit string.",
      "voteCount": 91
    },
    {
      "name": "spookyflame",
      "year": 2023,
      "content": "C++:  ```unordered_map<char, string> mp = {{'2', \"abc\"},{'3', \"def\"},{'4', \"ghi\"},{'5', \"jkl\"},{'6', \"mno\"},{'7', \"pqrs\"},{'8', \"tuv\"},{'9', \"wxyz\"}};```\n\nTo access: ```mp[digits[indice]]```\n\nfaster version: ```vector<string> mp = {\"\",\"\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"} ;```\n\nTo access: ```mp[digits[indice]-48]```",
      "voteCount": 48
    },
    {
      "name": "ctnFenix",
      "year": 2018,
      "content": "I\\'ve encountered a test case where the input string is an empty string and the expected out put is an empty vector (representing empty set). However, I consider the set containing empty string should be a more appropriate result for this. Empty string should map to one possibility, that is empty string, instead of zero possibility, right? ",
      "voteCount": 41
    },
    {
      "name": "tragicallyfun",
      "year": 2023,
      "content": "Leetcode is trying its level best to teach me backtracking",
      "voteCount": 35
    },
    {
      "name": "suige",
      "year": 2015,
      "content": "is \"\" still considered a combination?",
      "voteCount": 21
    }
  ]
}
