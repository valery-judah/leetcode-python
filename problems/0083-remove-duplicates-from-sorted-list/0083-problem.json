{
  "category": "",
  "id": "83",
  "name": "Remove Duplicates from Sorted List",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/remove-duplicates-from-sorted-list/",
  "slug": "remove-duplicates-from-sorted-list",
  "isPaidOnly": false,
  "tags": [
    "Linked List"
  ],
  "similar_questions": [
    {
      "title": "Remove Duplicates from Sorted List II",
      "difficulty": "Medium",
      "slug": "remove-duplicates-from-sorted-list-ii"
    },
    {
      "title": "Remove Duplicates From an Unsorted Linked List",
      "difficulty": "Medium",
      "slug": "remove-duplicates-from-an-unsorted-linked-list"
    }
  ],
  "questionId": "83",
  "questionFrontendId": "83",
  "title": "Remove Duplicates from Sorted List",
  "titleSlug": "remove-duplicates-from-sorted-list",
  "content": "<p>Given the <code>head</code> of a sorted linked list, <em>delete all duplicates such that each element appears only once</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list1.jpg\" style=\"width: 302px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,2,3,3]\n<strong>Output:</strong> [1,2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>\n</ul>\n",
  "likes": 9469,
  "dislikes": 346,
  "stats": {
    "totalAccepted": "2.1M",
    "totalSubmission": "3.7M",
    "totalAcceptedRaw": 2070202,
    "totalSubmissionRaw": 3739230,
    "acRate": "55.4%"
  },
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    }
  ],
  "metaData": {
    "name": "deleteDuplicates",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    }
  },
  "discussion_posts": [
    {
      "name": "M1dn1ght",
      "year": 2023,
      "content": "if this was easy i dont even want to see a medium linked list problem",
      "voteCount": 162
    },
    {
      "name": "leetcancode",
      "year": 2023,
      "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]",
      "voteCount": 57
    },
    {
      "name": "anlunx",
      "year": 2019,
      "content": "Why give a null test case?",
      "voteCount": 27
    },
    {
      "name": "samiksha_9",
      "year": 2022,
      "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n",
      "voteCount": 25
    },
    {
      "name": "Aaryan_0001",
      "year": 2023,
      "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values.",
      "voteCount": 22
    },
    {
      "name": "rostikcode15",
      "year": 2025,
      "content": "FIRST TIME, solved some easy leetcode problem in less then 20 minutes, i am so proud of myself, lezzgo ",
      "voteCount": 18
    },
    {
      "name": "rashmi_jain18",
      "year": 2022,
      "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        ",
      "voteCount": 10
    },
    {
      "name": "yixing",
      "year": 2013,
      "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here.",
      "voteCount": 8
    },
    {
      "name": "shivamsharmap97",
      "year": 2024,
      "content": "Move to the next node only when data in the next node is not equal.\\nThis will be helpful test cases like [1, 1, 1].",
      "voteCount": 7
    },
    {
      "name": "yuushima",
      "year": 2025,
      "content": "Linked lists aint real \\n",
      "voteCount": 4
    }
  ]
}
