{
  "category": "",
  "id": "1084",
  "name": "Sales Analysis III",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/sales-analysis-iii/",
  "slug": "sales-analysis-iii",
  "isPaidOnly": false,
  "tags": [
    "Database"
  ],
  "similar_questions": [
    {
      "title": "Sales Analysis II",
      "difficulty": "Easy",
      "slug": "sales-analysis-ii"
    }
  ],
  "questionId": "1174",
  "questionFrontendId": "1084",
  "title": "Sales Analysis III",
  "titleSlug": "sales-analysis-iii",
  "content": "<p>Table: <code>Product</code></p>\n\n<pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| product_id   | int     |\n| product_name | varchar |\n| unit_price   | int     |\n+--------------+---------+\nproduct_id is the primary key (column with unique values) of this table.\nEach row of this table indicates the name and the price of each product.\n</pre>\n\n<p>Table: <code>Sales</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| seller_id   | int     |\n| product_id  | int     |\n| buyer_id    | int     |\n| sale_date   | date    |\n| quantity    | int     |\n| price       | int     |\n+-------------+---------+\nThis table can have duplicate rows.\nproduct_id is a foreign key (reference column) to the Product table.\nEach row of this table contains some information about one sale.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to&nbsp;report&nbsp;the <strong>products</strong> that were <strong>only</strong> sold in the first quarter of <code>2019</code>. That is, between <code>2019-01-01</code> and <code>2019-03-31</code> inclusive.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nProduct table:\n+------------+--------------+------------+\n| product_id | product_name | unit_price |\n+------------+--------------+------------+\n| 1          | S8           | 1000       |\n| 2          | G4           | 800        |\n| 3          | iPhone       | 1400       |\n+------------+--------------+------------+\nSales table:\n+-----------+------------+----------+------------+----------+-------+\n| seller_id | product_id | buyer_id | sale_date  | quantity | price |\n+-----------+------------+----------+------------+----------+-------+\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\n| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |\n| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |\n+-----------+------------+----------+------------+----------+-------+\n<strong>Output:</strong> \n+-------------+--------------+\n| product_id  | product_name |\n+-------------+--------------+\n| 1           | S8           |\n+-------------+--------------+\n<strong>Explanation:</strong> \nThe product with id 1 was only sold in the spring of 2019.\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\nThe product with id 3 was sold after spring 2019.\nWe return only product 1 as it is the product that was only sold in the spring of 2019.\n</pre>\n",
  "likes": 809,
  "dislikes": 162,
  "stats": {
    "totalAccepted": "190.2K",
    "totalSubmission": "405.8K",
    "totalAcceptedRaw": 190165,
    "totalSubmissionRaw": 405753,
    "acRate": "46.9%"
  },
  "topicTags": [
    {
      "name": "Database",
      "slug": "database"
    }
  ],
  "metaData": {
    "mysql": [
      "Create table If Not Exists Product (product_id int, product_name varchar(10), unit_price int)",
      "Create table If Not Exists Sales (seller_id int, product_id int, buyer_id int, sale_date date, quantity int, price int)"
    ],
    "mssql": [
      "Create table Product (product_id int, product_name varchar(10), unit_price int)",
      "Create table Sales (seller_id int, product_id int, buyer_id int, sale_date date, quantity int, price int)"
    ],
    "oraclesql": [
      "Create table Product (product_id int, product_name varchar(10), unit_price int)",
      "Create table Sales (seller_id int, product_id int, buyer_id int, sale_date date, quantity int, price int)",
      "ALTER SESSION SET nls_date_format='YYYY-MM-DD'"
    ],
    "database": true,
    "name": "sales_analysis",
    "pythondata": [
      "Product = pd.DataFrame([], columns=['product_id', 'product_name', 'unit_price']).astype({'product_id':'Int64', 'product_name':'object', 'unit_price':'Int64'})",
      "Sales = pd.DataFrame([], columns=['seller_id', 'product_id', 'buyer_id', 'sale_date', 'quantity', 'price']).astype({'seller_id':'Int64', 'product_id':'Int64', 'buyer_id':'Int64', 'sale_date':'datetime64[ns]', 'quantity':'Int64', 'price':'Int64'})"
    ],
    "postgresql": [
      "Create table If Not Exists Product (product_id int, product_name varchar(10), unit_price int)\n",
      "Create table If Not Exists Sales (seller_id int, product_id int, buyer_id int, sale_date date, quantity int, price int)"
    ],
    "database_schema": {
      "Product": {
        "product_id": "INT",
        "product_name": "VARCHAR(10)",
        "unit_price": "INT"
      },
      "Sales": {
        "seller_id": "INT",
        "product_id": "INT",
        "buyer_id": "INT",
        "sale_date": "DATE",
        "quantity": "INT",
        "price": "INT"
      }
    }
  },
  "discussion_posts": [
    {
      "name": "AshleyMeow",
      "year": 2020,
      "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !",
      "voteCount": 52
    },
    {
      "name": "rohitahuja823",
      "year": 2022,
      "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'",
      "voteCount": 24
    },
    {
      "name": "Chloe4max",
      "year": 2022,
      "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n",
      "voteCount": 16
    },
    {
      "name": "Gensun",
      "year": 2020,
      "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')",
      "voteCount": 9
    },
    {
      "name": "nynptel",
      "year": 2022,
      "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`",
      "voteCount": 8
    },
    {
      "name": "jyothidundi91",
      "year": 2020,
      "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?",
      "voteCount": 7
    },
    {
      "name": "vashdevl",
      "year": 2019,
      "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800",
      "voteCount": 6
    },
    {
      "name": "ssuresh1999",
      "year": 2021,
      "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer",
      "voteCount": 6
    },
    {
      "name": "Sachi12345",
      "year": 2021,
      "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n",
      "voteCount": 5
    },
    {
      "name": "weizhao5",
      "year": 2021,
      "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'",
      "voteCount": 4
    }
  ]
}
