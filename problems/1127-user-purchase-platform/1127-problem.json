{
  "category": "",
  "id": "1127",
  "name": "User Purchase Platform",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/user-purchase-platform/",
  "slug": "user-purchase-platform",
  "isPaidOnly": true,
  "tags": [
    "Database"
  ],
  "similar_questions": [],
  "questionId": "1226",
  "questionFrontendId": "1127",
  "title": "User Purchase Platform",
  "titleSlug": "user-purchase-platform",
  "content": "<p>Table: <code>Spending</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| user_id     | int     |\n| spend_date  | date    |\n| platform    | enum    | \n| amount      | int     |\n+-------------+---------+\nThe table logs the history of the spending of users that make purchases from an online shopping website that has a desktop and a mobile application.\n(user_id, spend_date, platform) is the primary key (combination of columns with unique values) of this table.\nThe platform column is an ENUM (category) type of (&#39;desktop&#39;, &#39;mobile&#39;).\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find the total number of users and the total amount spent using the mobile only, the desktop only, and both mobile and desktop together for each date.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nSpending table:\n+---------+------------+----------+--------+\n| user_id | spend_date | platform | amount |\n+---------+------------+----------+--------+\n| 1       | 2019-07-01 | mobile   | 100    |\n| 1       | 2019-07-01 | desktop  | 100    |\n| 2       | 2019-07-01 | mobile   | 100    |\n| 2       | 2019-07-02 | mobile   | 100    |\n| 3       | 2019-07-01 | desktop  | 100    |\n| 3       | 2019-07-02 | desktop  | 100    |\n+---------+------------+----------+--------+\n<strong>Output:</strong> \n+------------+----------+--------------+-------------+\n| spend_date | platform | total_amount | total_users |\n+------------+----------+--------------+-------------+\n| 2019-07-01 | desktop  | 100          | 1           |\n| 2019-07-01 | mobile   | 100          | 1           |\n| 2019-07-01 | both     | 200          | 1           |\n| 2019-07-02 | desktop  | 100          | 1           |\n| 2019-07-02 | mobile   | 100          | 1           |\n| 2019-07-02 | both     | 0            | 0           |\n+------------+----------+--------------+-------------+ \n<strong>Explanation:</strong> \nOn 2019-07-01, user 1 purchased using <strong>both</strong> desktop and mobile, user 2 purchased using mobile <strong>only</strong> and user 3 purchased using desktop <strong>only</strong>.\nOn 2019-07-02, user 2 purchased using mobile <strong>only</strong>, user 3 purchased using desktop <strong>only</strong> and no one purchased using <strong>both</strong> platforms.\n</pre>\n",
  "likes": 187,
  "dislikes": 137,
  "stats": {
    "totalAccepted": "18.6K",
    "totalSubmission": "39.5K",
    "totalAcceptedRaw": 18609,
    "totalSubmissionRaw": 39535,
    "acRate": "47.1%"
  },
  "topicTags": [
    {
      "name": "Database",
      "slug": "database"
    }
  ],
  "metaData": {
    "mysql": [
      "Create table If Not Exists Spending (user_id int, spend_date date, platform ENUM('desktop', 'mobile'), amount int)"
    ],
    "mssql": [
      "create table Spending (user_id int, spend_date date, platform VARCHAR(10) NOT NULL CHECK (platform IN ('desktop', 'mobile')), amount int)"
    ],
    "oraclesql": [
      "create table Spending (user_id int, spend_date date, platform VARCHAR(10) NOT NULL CHECK (platform IN ('desktop', 'mobile')), amount int)",
      "ALTER SESSION SET nls_date_format='YYYY-MM-DD'"
    ],
    "database": true,
    "name": "user_purchase",
    "pythondata": [
      "Spending = pd.DataFrame([], columns=['user_id', 'spend_date', 'platform', 'amount']).astype({'user_id':'Int64', 'spend_date':'datetime64[ns]', 'platform':'object', 'amount':'Int64'})\n"
    ],
    "postgresql": [
      "Create table If Not Exists Spending (user_id int, spend_date date, platform VARCHAR(10) CHECK (platform IN ('desktop', 'mobile')), amount int)\n"
    ],
    "database_schema": {
      "Spending": {
        "user_id": "INT",
        "spend_date": "DATE",
        "platform": "ENUM('desktop', 'mobile')",
        "amount": "INT"
      }
    }
  },
  "discussion_posts": [
    {
      "name": "wxdtony",
      "year": 2023,
      "content": "Considering the requirement --- \\'Return the result table in any order.\\' my solution using window function get same result set in different order been rejected, seems a bug of this \\'problem\\', who can  help to fix this bug?",
      "voteCount": 5
    },
    {
      "name": "Agupta93",
      "year": 2024,
      "content": "bad wording, took a while to understand what the question is asking",
      "voteCount": 2
    },
    {
      "name": "DaniilDukat",
      "year": 2024,
      "content": "The reason some of the testcases are not accepted might be the situation when you have users with \"both\" and \"desktop\", but no \"mobile\". Check that you have all combinations of dates and platforms (possible cross join)",
      "voteCount": 1
    },
    {
      "name": "JCharante",
      "year": 2023,
      "content": "This took a while... got TLE and then optimized down to 5000ms & accepted, then optimized down to 2500ms. A tip is that you are counting ONLY mobile users and ONLY desktop users and ONLY BOTH users and same goes for amount spent",
      "voteCount": 1
    },
    {
      "name": "karangupta121",
      "year": 2025,
      "content": "there is an issue with how the test case after the 9th are being resolved. I checked the test case output against mine, everything matches, but the test case is still not passing.",
      "voteCount": 0
    },
    {
      "name": "Daddydanny",
      "year": 2024,
      "content": "\nI trial with some numeric checkpoint to filter the category value of paltform when doing aggregation, but the final query would never return the date without a 'both' purchasing. Anyone know if there is a way to only fix this issue without restructuring the whole query?\n\nQuery:\nwith rank_both as (select user_id,spend_date,platform,amount,\nrow_number() OVER (PARTITION BY user_id,spend_date order by platform) AS rank_id\nFROM Spending),\nsum_rank as (\nselect *,\nsum(rank_id) OVER (PARTITION BY user_id,spend_date) AS sum_id\n from rank_both\n),\ndesktop_count as (\nselect spend_date,platform,count(user_id) AS total_users, sum(amount) AS total_amount\nFROM sum_rank \nwhere platform = 'desktop' and rank_id = 1 and sum_id = 1\ngroup by spend_date\n),\nmobile_count as (\nselect spend_date,platform,count(user_id) AS total_users, sum(amount) AS total_amount\nFROM sum_rank \nwhere platform = 'mobile' and rank_id = 1 and sum_id = 1\ngroup by spend_date\n),\nboth_count as (\nselect spend_date, 'both' as platform, count(distinct user_id) AS total_users, sum(amount) AS total_amount\nFROM sum_rank \nwhere sum_id > 1\ngroup by spend_date\n)\nSELECT spend_date , platform , total_amount , total_users FROM desktop_count\nUNION ALL\nSELECT spend_date , platform , total_amount , total_users FROM mobile_count\nUNION ALL\nSELECT spend_date , platform , total_amount , total_users FROM both_count\n----------------------------------------------------------------------\nOutput\n| spend_date | platform | total_amount | total_users |\n| ---------- | -------- | ------------ | ----------- |\n| 2019-07-01 | desktop  | 100          | 1           |\n| 2019-07-02 | desktop  | 100          | 1           |\n| 2019-07-01 | mobile   | 100          | 1           |\n| 2019-07-02 | mobile   | 100          | 1           |\n| 2019-07-01 | both     | 200          | 1           |",
      "voteCount": 0
    },
    {
      "name": "user4565bz",
      "year": 2024,
      "content": "Can someone tell me why this is failing after 9th test case?\\n\\n with spending_device_count(user_id, spend_date, device_count) as\\n    (select user_id, spend_date, count(distinct platform) as device_count\\n    from spending\\n    group by user_id, spend_date),\\nspending_combined(user_id, spend_date, platform, amount, device_count) as\\n    (select s.user_id as user_id, s.spend_date as spend_date, IF(sdc.device_count=2,\\'both\\',s.platform) as platform, s.amount as amount, sdc.device_count as device_count\\n    from spending s left join spending_device_count sdc on s.user_id =sdc.user_id and s.spend_date=sdc.spend_date),\\nonly_one(spend_date, platform, total_amount, total_users) as\\n    (select spend_date, platform, sum(amount) as total_amount, count(distinct user_id) as total_users\\n    from spending_combined\\n    where device_count = 1\\n    group by spend_date, platform),\\nonly_both(spend_date, platform, total_amount, total_users) as\\n    (select spend_date, platform, sum(amount) as total_amount, count(distinct user_id) as total_users\\n    from spending_combined\\n    where device_count = 2\\n    group by spend_date, platform),\\ndummy_rows(spend_date, platform, total_amount, total_users) as\\n    (select s.spend_date as spend_date, s2.platform as platform, 0 as total_amount, 0 as total_users\\n    from (select distinct spend_date\\n    from spending) s cross join (select distinct platform from spending_combined) s2 )\\nselect spend_date, platform, sum(total_amount) as total_amount, sum(total_users) as total_users\\nfrom \\n    (select * from only_one \\n    union\\n    select * from only_both\\n    union\\n    select * from dummy_rows) a\\ngroup by spend_date, platform\\norder by spend_date, platform",
      "voteCount": 0
    },
    {
      "name": "UtpalMat",
      "year": 2024,
      "content": "I am solving this problem by parts - so it is easier to track and debug.                                                        \n So, for example, for the spend_date of `2019-07-02`, the same `user_id` has not purchased using both platforms of `mobile` and `desktop`. So to specifically find the `total number of users` and the `total_amount` spent where the `user_id` did NOT use both mobile and desktop together for each date I wrote the following query and I only expect the return to be `| 2019-07-02 | both     | 0            | 0           |` (see last row of expected output in the question). Instead I also get get `2019-07-02'  back from the query. what am I missing? the query for this part is:                                                                                 \n \nSelect s1.spend_date,\n       'both' as platform,\n       '0' as total_amount,\n       '0' as total_users\nFrom Spending s1\nWhere s1.platform not in \n        (\n            Select s2.platform\n            From Spending s2\n            Where s1.user_id = s2.user_id and \n                  s1.platform <> s2.platform and \n                  s1.spend_date = s2.spend_date \n        )\nGroup By s1.spend_date",
      "voteCount": 0
    },
    {
      "name": "b02203054",
      "year": 2023,
      "content": "can anyone tell me what\\'s wrong in my code?\\nI try to filter the code with different platform and combine all of them, but it seems my solution doesn\\'t work out... \\n\\n\\n/* Write your PL/SQL query statement below */\\nwith platform_desktop as \\n        (select spend_time, \\n                platform, \\n                sum(amount) as total_amount, \\n                count(user_id) as total_users \\n        from Spending \\n        having platform = \\'desktop\\' \\n        group by spend_date)\\n    \\n    platform_mobile as (\\n        select spend_time, \\n                platform, \\n                sum(amount) as total_amount, \\n                count(user_id) as total_users \\n        from Spending \\n        having platform = \\'mobile\\' \\n        group by spend_date\\n    )\\n    platform_total as (\\n        select spend_time, \\n                both as platform, \\n                sum(amount) as total_amount, \\n                count(user_id) as total_users \\n        from Spending \\n        group by spend_date\\n    )\\n\\nselect *\\nfrom platform_desktop\\nunion \\nselect *\\nfrom platform_mobile\\nunion\\nselect *\\nfrom platform_total\\n\\n",
      "voteCount": 0
    },
    {
      "name": "Wendy94wendy",
      "year": 2022,
      "content": "what's wrong with this?\n```\nwith res as(\nselect spend_date, case when np=1 then r.platform else 'both' end as platform,\n    sum(amount) as total_amount, count(distinct user_id) as total_users\nfrom (\n    select user_id, spend_date, count(distinct platform) as np\n    from spending \n    group by 1,2 ) l\nright join spending r\nusing(user_id,spend_date)\ngroup by 1,2\n)\n\nselect spend_date, platform, \n        ifnull(total_amount,0) as total_amount, ifnull(total_users,0) as total_users\nfrom (\n    select distinct spending.spend_date, res.platform\n    from spending \n    cross join res) l\nleft join res\nusing(spend_date,platform)\n```",
      "voteCount": 0
    }
  ]
}
