{
  "category": "",
  "id": "138",
  "name": "Copy List with Random Pointer",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/copy-list-with-random-pointer/",
  "slug": "copy-list-with-random-pointer",
  "isPaidOnly": false,
  "tags": [
    "Hash Table",
    "Linked List"
  ],
  "similar_questions": [
    {
      "title": "Clone Graph",
      "difficulty": "Medium",
      "slug": "clone-graph"
    },
    {
      "title": "Clone Binary Tree With Random Pointer",
      "difficulty": "Medium",
      "slug": "clone-binary-tree-with-random-pointer"
    },
    {
      "title": "Clone N-ary Tree",
      "difficulty": "Medium",
      "slug": "clone-n-ary-tree"
    }
  ],
  "questionId": "138",
  "questionFrontendId": "138",
  "title": "Copy List with Random Pointer",
  "titleSlug": "copy-list-with-random-pointer",
  "content": "<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p>\n\n<p>Construct a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p>\n\n<p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p>\n\n<p>Return <em>the head of the copied linked list</em>.</p>\n\n<p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p>\n\n<ul>\n\t<li><code>val</code>: an integer representing <code>Node.val</code></li>\n\t<li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li>\n</ul>\n\n<p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e1.png\" style=\"width: 700px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n<strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e2.png\" style=\"width: 700px; height: 114px;\" />\n<pre>\n<strong>Input:</strong> head = [[1,1],[2,1]]\n<strong>Output:</strong> [[1,1],[2,1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e3.png\" style=\"width: 700px; height: 122px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> head = [[3,null],[3,0],[3,null]]\n<strong>Output:</strong> [[3,null],[3,0],[3,null]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li>\n</ul>\n",
  "likes": 15052,
  "dislikes": 1625,
  "stats": {
    "totalAccepted": "1.7M",
    "totalSubmission": "2.8M",
    "totalAcceptedRaw": 1711210,
    "totalSubmissionRaw": 2792790,
    "acRate": "61.3%"
  },
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Linked List",
      "slug": "linked-list"
    }
  ],
  "metaData": {
    "name": "copyRandomList",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "golang",
      "swift",
      "kotlin",
      "ruby",
      "c",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "typescriptCustomType": "class _Node {\n    val: number\n    next: _Node | null\n    random: _Node | null\n\n    constructor(val?: number, next?: _Node, random?: _Node) {\n        this.val = (val===undefined ? 0 : val)\n        this.next = (next===undefined ? null : next)\n        this.random = (random===undefined ? null : random)\n    }\n}\n"
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 69
      },
      {
        "taggedByAdmin": true,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 35
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "Antinotmanist",
      "year": 2024,
      "content": "i\\'m gonna work in McDonald\\'s",
      "voteCount": 782
    },
    {
      "name": "v2021",
      "year": 2020,
      "content": "This same question appeard in my amazon round 1.\\nLet me write some more about what was attending its round 1 felt.\\nAmazon round 1 contained 4 section.\\n\\t1. 7 Array based Question of debugging came. (Which were so easy that everyone solved them with all test cases as passed). (20 min)\\n\\t2. This section contained 2 Coding based Questin were given, 1 was 138. Copy List with Random Pointer and other question was to return a recommendataion gener list of book based on some information given, also very simple. But the time was of constraint here. (60 min)\\n\\t3. This section had some Behavioural question.(answers vary person to person).\\n\\t4. last section was combination of Technical and Apti Questions (25 Question in 34 min).\\n\\nThat\\'s it I hope it come of some use to you.",
      "voteCount": 456
    },
    {
      "name": "souvikmkhrj",
      "year": 2023,
      "content": "<a href=\"https://imgur.com/V9O4jyS\"><img src=\"https://i.imgur.com/V9O4jyS.jpg\" title=\"source: imgur.com\" width=\"400px\" /></a>",
      "voteCount": 245
    },
    {
      "name": "17BIT0216",
      "year": 2020,
      "content": "What does the question asks?\\nI was confused with  the question for a bit. But understood it, Basically the question is to deep copy the linked list,  that is make an exact copy.(replicate the random nodes too)\\nIf it was simple single linked list, it was simple. Just make a copy on the go and connect the nodes.\\nBut if the random element is present we have to replicate it to, just imagine you made a new node and the random of this node points to a node which is not yet created ?What will you do? How will you Point to that node, thats what we have to solve here,",
      "voteCount": 179
    },
    {
      "name": "tonyraubenheimer",
      "year": 2020,
      "content": "The question description indicates that node.random is an index. But, the inputs are structured such that node.random is actually a pointer.",
      "voteCount": 151
    },
    {
      "name": "napoleon",
      "year": 2013,
      "content": "I solve this problem by costing 392ms.\\nI use map to save the relation between the original list and the copy one.",
      "voteCount": 47
    },
    {
      "name": "razvx",
      "year": 2018,
      "content": "I dont understand the qn. can someone plz explain.\\nthanks",
      "voteCount": 44
    },
    {
      "name": "ufo2mstar",
      "year": 2018,
      "content": "It seems like the problem is merely asking for a deepcopy of the labels (node values) of the random node that nodes point to, not the absolute reference of the n-th node within the Linked List!\\n\\nI was mapping the internal relative index of the random destination node and was preserving the order,\\nbut the silly validation program is passing even if I create brand new references!\\n\\nI feel that either the problem should be restated to make this clear, \\nor the test cases should look into the node addresses properly!",
      "voteCount": 39
    },
    {
      "name": "sirsa",
      "year": 2018,
      "content": "The problem description is not clear.\\n\\n(1) What is meant by deep copy of a linked list?\\n(2) Why is there no sample input/output?\\n(3) Why is there no \"Run Code\" option with sample test case?\\n\\nPlease fix.",
      "voteCount": 34
    },
    {
      "name": "jason3",
      "year": 2013,
      "content": "Does anyone know what \\n\\n\\nInput:\\t{1,2,2,2}\\nOutput:\\t{1,2,#,#}\\nExpected:\\t{1,2,2,2}\\n\\nmeans?",
      "voteCount": 26
    }
  ]
}
