{
  "category": "",
  "id": "901",
  "name": "Online Stock Span",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/online-stock-span/",
  "slug": "online-stock-span",
  "isPaidOnly": false,
  "tags": [
    "Stack",
    "Design",
    "Monotonic Stack",
    "Data Stream"
  ],
  "similar_questions": [
    {
      "title": "Daily Temperatures",
      "difficulty": "Medium",
      "slug": "daily-temperatures"
    }
  ],
  "questionId": "937",
  "questionFrontendId": "901",
  "title": "Online Stock Span",
  "titleSlug": "online-stock-span",
  "content": "<p>Design an algorithm that collects daily price quotes for some stock and returns <strong>the span</strong> of that stock&#39;s price for the current day.</p>\n\n<p>The <strong>span</strong> of the stock&#39;s price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.</p>\n\n<ul>\n\t<li>For example, if the prices of the stock in the last four days is <code>[7,2,1,2]</code> and the price of the stock today is <code>2</code>, then the span of today is <code>4</code> because starting from today, the price of the stock was less than or equal <code>2</code> for <code>4</code> consecutive days.</li>\n\t<li>Also, if the prices of the stock in the last four days is <code>[7,34,1,2]</code> and the price of the stock today is <code>8</code>, then the span of today is <code>3</code> because starting from today, the price of the stock was less than or equal <code>8</code> for <code>3</code> consecutive days.</li>\n</ul>\n\n<p>Implement the <code>StockSpanner</code> class:</p>\n\n<ul>\n\t<li><code>StockSpanner()</code> Initializes the object of the class.</li>\n\t<li><code>int next(int price)</code> Returns the <strong>span</strong> of the stock&#39;s price given that today&#39;s price is <code>price</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;StockSpanner&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;]\n[[], [100], [80], [60], [70], [60], [75], [85]]\n<strong>Output</strong>\n[null, 1, 1, 1, 2, 1, 4, 6]\n\n<strong>Explanation</strong>\nStockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80);  // return 1\nstockSpanner.next(60);  // return 1\nstockSpanner.next(70);  // return 2\nstockSpanner.next(60);  // return 1\nstockSpanner.next(75);  // return 4, because the last 4 prices (including today&#39;s price of 75) were less than or equal to today&#39;s price.\nstockSpanner.next(85);  // return 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= price &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>next</code>.</li>\n</ul>\n",
  "likes": 6974,
  "dislikes": 480,
  "stats": {
    "totalAccepted": "503.4K",
    "totalSubmission": "740.4K",
    "totalAcceptedRaw": 503357,
    "totalSubmissionRaw": 740373,
    "acRate": "68.0%"
  },
  "topicTags": [
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Monotonic Stack",
      "slug": "monotonic-stack"
    },
    {
      "name": "Data Stream",
      "slug": "data-stream"
    }
  ],
  "metaData": {
    "classname": "StockSpanner",
    "maxbytesperline": 200000,
    "constructor": {
      "params": []
    },
    "methods": [
      {
        "name": "next",
        "params": [
          {
            "type": "integer",
            "name": "price"
          }
        ],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    }
  },
  "discussion_posts": [
    {
      "name": "andrew13",
      "year": 2018,
      "content": "this problem is badly descripted.  I cannot figure out how to make use of the input from the signature of the constructor. ",
      "voteCount": 286
    },
    {
      "name": "rudrabarot71",
      "year": 2022,
      "content": "very badly explained question, leetcode you can do better than this",
      "voteCount": 231
    },
    {
      "name": "mbmrajatit",
      "year": 2024,
      "content": "When I started solving LeetCode 75, questions like these were really challenging for me. I took it one step at a time, solving one question each day and thoroughly studying the problem and its solution. Now, as I near the end of my LeetCode 75 journey, I can confidently say that solving medium-level questions has become easier or at least manageable.\\n\\nThis is a message for everyone out there: keep practicing, don\\'t lose hope, and take the time to truly understand each problem and solution. Over time, your brain will naturally start recognizing patterns and approaches. Stay consistent, and you\\'ll see the progress!",
      "voteCount": 136
    },
    {
      "name": "dos_77",
      "year": 2022,
      "content": "How I came to a solution:\n1. choose the optimal Data Structure: Stack containing a pair of values (price , span)\n2. if stack is empty || top of stack is > price -> append to stack and return 1\n3. Now we only remain with one scenario i.e. top of stack is <= price:\n           - declare a temp variable         \n            while top of stack  <= price:\n                             - delete the top of the stack and for each popped element add the span attribute to the temp variable\n4. after the while loop, append the current price in the form of (price, temp_var + 1)\n5. return (temp_var + 1)\n\nPlease try it first and if you still need the code: [Click Here](https://leetcode.com/problems/online-stock-span/solutions/2796651/python-solution-stack-beats-95/)",
      "voteCount": 77
    },
    {
      "name": "pratul2010",
      "year": 2020,
      "content": "I think, this problem and the suggested solution should be revised.\\n\\nThe second call to 60 should return 2 because we have already seen 60 before.  By popping elements off the stack, the suggested solution is \"leaking\" information.",
      "voteCount": 37
    },
    {
      "name": "beall_canbe",
      "year": 2018,
      "content": "The span of the stock\\'s price **today** is defined as the maximum number of consecutive days (starting from today and **going backwards**) for which the price of the stock was less than or equal to today\\'s price.\\n\\nFor example, if the price of a stock over **the next 7 days** were [100, 80, 60, 70, 60, 75, 85], then the stock spans **(for which dates?)** would be [1, 1, 1, 2, 1, 4, 6].\\n\\nThe span for a day is defined as some statistics based on the prices in the past, why does the example talk about future prices?  I would appreciate it if someone can walk me through the numbers in the example.\\n\\nThanks!",
      "voteCount": 33
    },
    {
      "name": "amitbansal13",
      "year": 2023,
      "content": "Brute force solution is working. How is this a medium level problem?",
      "voteCount": 14
    },
    {
      "name": "harshjaiswal3110",
      "year": 2022,
      "content": "I didn\\'t get the format of input. How to make use of input? Can anyone explain?",
      "voteCount": 13
    },
    {
      "name": "rachilies",
      "year": 2020,
      "content": "Generally in such problems where we need to find the first smaller or bigger element to the left or right of the current element, stack based approach is very helpful and intuitive. I have tried to explain with examples and code for this problem.\\n\\nhttps://youtu.be/bidjFmxbGt0",
      "voteCount": 9
    },
    {
      "name": "fancyuserid",
      "year": 2022,
      "content": "If the below is input :\\n`# obj = StockSpanner()`\\n`# param_1 = obj.next(price)`\\n\\nWhy are they giving input as :\\n`[\"StockSpanner\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\"]`\\n`[[],[100],[80],[60],[70],[60],[75],[85]]`\\n\\nHow is the object actually called?\\n",
      "voteCount": 8
    }
  ]
}
