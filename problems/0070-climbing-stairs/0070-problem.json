{
  "category": "",
  "id": "70",
  "name": "Climbing Stairs",
  "difficulty": "Easy",
  "leetcode_url": "https://leetcode.com/problems/climbing-stairs/",
  "slug": "climbing-stairs",
  "isPaidOnly": false,
  "tags": [
    "Math",
    "Dynamic Programming",
    "Memoization"
  ],
  "similar_questions": [
    {
      "title": "Min Cost Climbing Stairs",
      "difficulty": "Easy",
      "slug": "min-cost-climbing-stairs"
    },
    {
      "title": "Fibonacci Number",
      "difficulty": "Easy",
      "slug": "fibonacci-number"
    },
    {
      "title": "N-th Tribonacci Number",
      "difficulty": "Easy",
      "slug": "n-th-tribonacci-number"
    },
    {
      "title": "Minimum Rounds to Complete All Tasks",
      "difficulty": "Medium",
      "slug": "minimum-rounds-to-complete-all-tasks"
    },
    {
      "title": "Count Number of Ways to Place Houses",
      "difficulty": "Medium",
      "slug": "count-number-of-ways-to-place-houses"
    },
    {
      "title": "Number of Ways to Reach a Position After Exactly k Steps",
      "difficulty": "Medium",
      "slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps"
    },
    {
      "title": "Count Ways To Build Good Strings",
      "difficulty": "Medium",
      "slug": "count-ways-to-build-good-strings"
    },
    {
      "title": "Frog Jump II",
      "difficulty": "Medium",
      "slug": "frog-jump-ii"
    },
    {
      "title": "Find Number of Ways to Reach the K-th Stair",
      "difficulty": "Hard",
      "slug": "find-number-of-ways-to-reach-the-k-th-stair"
    },
    {
      "title": "The Number of Ways to Make the Sum",
      "difficulty": "Medium",
      "slug": "the-number-of-ways-to-make-the-sum"
    }
  ],
  "questionId": "70",
  "questionFrontendId": "70",
  "title": "Climbing Stairs",
  "titleSlug": "climbing-stairs",
  "content": "<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>\n\n<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 45</code></li>\n</ul>\n",
  "likes": 23655,
  "dislikes": 982,
  "stats": {
    "totalAccepted": "4.5M",
    "totalSubmission": "8.4M",
    "totalAcceptedRaw": 4501635,
    "totalSubmissionRaw": 8387082,
    "acRate": "53.7%"
  },
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Memoization",
      "slug": "memoization"
    }
  ],
  "metaData": {
    "name": "climbStairs",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 19
      },
      {
        "taggedByAdmin": false,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 19
      }
    ],
    "3": [
      {
        "taggedByAdmin": true,
        "name": "Apple",
        "slug": "apple",
        "timesEncountered": 11
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "DrSaAI",
      "year": 2023,
      "content": "Stop classifying this question as easy. I graduated with CS degree and it took me 30 minutes before give up. I am very angry now.",
      "voteCount": 1534
    },
    {
      "name": "owenxing1994",
      "year": 2021,
      "content": "For this question, there are a bunch of people who have described their mindset. Rather than list the code, I will draw the image of climbing the stairs...\\n\\nFirst things first, we human can only climb 1 start or 2 starts at the very beginning.\\nSo here is an image of telling the number of methods to climb 1 start and 2 stairs\\n![image](https://assets.leetcode.com/users/images/53f54c19-bd86-445f-a428-332b8640af74_1626335122.5701866.png)\\nAs we can see, there is only 1 way to climb 1 stair; and there are 2 ways to climb 2 stairs: 1 stair and 1 stair; 2 stairs for 1 time\\n\\nWhat if N = 3? Here is the image\\n![image](https://assets.leetcode.com/users/images/a07d8fb4-255d-460f-8393-4de4640359a2_1626335216.9479923.png)\\nAgain, we can only climb 1 stair or 2 stairs for the first step. If we climb 1 stair, we have 2 stairs left, which is the situation for \"N = 2\", which is 2 ways; and if we climb 2 stairs, we have 1 stair left, which is the situation for \"N = 2\", which is 1 way. So total 2 + 1 = 3 ways\\n\\nWhat if N = 4?\\n![image](https://assets.leetcode.com/users/images/93e68f1f-0a72-4d3c-b3fc-d3721917da83_1626335339.4824002.png)\\nAgain, we can only climb 1 stair or 2 stairs for the first step. If we climb 1 stair, we will have 3 stairs left, which is the situation for \"N = 3\", which is 3 ways; and if we climb 2 stairs, we will have 2 stairs left, which is the situation for \"N = 2\", which is 2 ways. So in total 3 + 2 = 5 ways.\\n\\nWe can find that if there is x stairs(x is a number), the number of ways to climb is the ways to climb x-1 plus the ways to climb x-2:\\n![image](https://assets.leetcode.com/users/images/23937255-277a-4201-9210-3a16dcd9878d_1626335589.7534728.png)\\nwhich, is the famous fibonacci sequence that \"each number is the sum of the two preceding ones, starting from 0 and 1\"\\n\\n",
      "voteCount": 1276
    },
    {
      "name": "disturbedbrown1",
      "year": 2022,
      "content": "It gives TLE on recursive solution but it\\'s still categorized as an Easy problem. Interesting.",
      "voteCount": 475
    },
    {
      "name": "autekroy",
      "year": 2014,
      "content": "Hi, \\nAfter thinking your code, I found the relation between the ways like a Fibonacci number.\\n\\nBut how do you guys figure this relation out?\\n\\nDoes it have logical literally explanation?\\n\\nHope anyone can help me.\\n\\nThanks a lot.",
      "voteCount": 192
    },
    {
      "name": "yh32",
      "year": 2018,
      "content": "I figured out a better way to explain the Fibonacci solution for this this climbing stairs problem. Personally, I do think it makes more sense.\\n\\nIf we try to reach level n, we either take one step or two step for the last move. \\nFor the one step case, we need to be at the level n - 1, and say we have x1 ways to get level n - 1. For every way of reaching level n - 1, we can only take 1 step at the end to get level n. So, we have x1 ways to reach level n by taking 1 step at the last move. \\nSimilarly, for the two steps case, we need to be at the level n - 2, and say we has x2 ways to get level n - 2. For every way of reaching level n - 2, we can only take 2 stpes at the end to get level n. So, we have x2 ways to reach level n by taking 2 steps at the last move. \\nThus, to reach level n, we have x1 + x2 ways.\\n\\n\\nI hope this make sense to you as well.",
      "voteCount": 152
    },
    {
      "name": "Krishnaraj-shankar",
      "year": 2023,
      "content": "It is tagged as easy prob.. but giving TLE for recursion!! should be tagged as medium I think",
      "voteCount": 102
    },
    {
      "name": "MaratKh",
      "year": 2021,
      "content": "hint - FIBONACCI",
      "voteCount": 73
    },
    {
      "name": "Khan_Baba",
      "year": 2022,
      "content": "I think key for this problem is to understand \" then the total ways to get to the point [n] is n1 + n2. \\nBecause from the [n-1] point, we can take one single step to reach [n]. And from the [n-2] point, we could take two steps to get there.\"\\nfrom n-1 to n (taking 1 step) and from n-2 to n (take 2 steps or just 1 step) can\\'t be counted as a new way. for n-1, \\nno matter how many ways u get n-1, you can only take 1 step to n, so there is not a new way. for n-2, if you take 2 steps, \\nit is covered by n-1 scenario, if you take 1 steps(2 stairs), same consideration as n-1 to n.\\nways_to(n) = ways_to(n-1) (ways with 1 step from n-1 to 1)+ ways_to(n-2)(ways with 2 steps from n-2 to n)\\nso ways_to(n) = ways_to(n-1) *1 + ways_to(n-2)*1\\nso ways_to(n) = ways_to(n-1) + ways_to(n-2)",
      "voteCount": 46
    },
    {
      "name": "roxyfan",
      "year": 2020,
      "content": "So remember that this is a combination of steps; NOT the number of steps.\\n\\nConsider drawing a staircase and putting the number of combinations to make it easier.\\n\\nSo n[i-1] is the number of COMBINATIONS to get the the last stair. Now realize that you only need extra step to get to the ith stair. Now if you are thinking about n[i-1] + 1, it is wrong because you are thinking of the number of steps, not the number of combinations. \\n\\nLet\\'s make the problem easier: You HAVE to take ONE step, not two, on the LAST step. Imagine i is 6, and you are on the 5nd step, and now just say, that when you go from the 5th step to the 6th step, you will ALWAYS just take one more step to go to the 6th step, thus the number of combinations stays the SAME. Because all the combinations where you go to the 5th step, you are just taking another step, meaning the combination for all the 6th step will be the same as the 5th step, only you are taking another step at the end, and since it\\'s # of combinations, not # of steps.\\n\\nNow going back to the solution: n[i] = n[i-1] + n[i-2], realize that you also have to take in account for the fact that someone can go up 2 steps from i-2th step to ith step. Thus that\\'s why you add n[i-2], because it\\'s the same inituition. If you can only take a double step at the end, then the # of combinations will just be n[i-2] because it\\'s the same combination as n[i-2] except you just taking 2 more steps at the end.\\n\\nSince you can take 1 step at the end or 2 steps at the end, adding the two situtations together, it is n[i] = n[i-1] + n[i-2].",
      "voteCount": 43
    },
    {
      "name": "kminsu1204",
      "year": 2019,
      "content": "Runtime Error Message:\\nLine 18: Char 16: runtime error: signed integer overflow: 1836311903 + 1134903170 cannot be represented in type \\'int\\' (solution.cpp)\\n\\nLast executed input:\\n45\\n\\nIs there anyone who experienced overflow issues?",
      "voteCount": 39
    }
  ]
}
