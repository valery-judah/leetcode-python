{
  "category": "",
  "id": "581",
  "name": "Shortest Unsorted Continuous Subarray",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/shortest-unsorted-continuous-subarray/",
  "slug": "shortest-unsorted-continuous-subarray",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Two Pointers",
    "Stack",
    "Greedy",
    "Sorting",
    "Monotonic Stack"
  ],
  "similar_questions": [
    {
      "title": "Smallest Subarray to Sort in Every Sliding Window",
      "difficulty": "Medium",
      "slug": "smallest-subarray-to-sort-in-every-sliding-window"
    }
  ],
  "questionId": "581",
  "questionFrontendId": "581",
  "title": "Shortest Unsorted Continuous Subarray",
  "titleSlug": "shortest-unsorted-continuous-subarray",
  "content": "<p>Given an integer array <code>nums</code>, you need to find one <b>continuous subarray</b> such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.</p>\n\n<p>Return <em>the shortest such subarray and output its length</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,6,4,8,10,9,15]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Can you solve it in <code>O(n)</code> time complexity?",
  "likes": 7927,
  "dislikes": 272,
  "stats": {
    "totalAccepted": "368.2K",
    "totalSubmission": "978.9K",
    "totalAcceptedRaw": 368196,
    "totalSubmissionRaw": 978937,
    "acRate": "37.6%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Greedy",
      "slug": "greedy"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    },
    {
      "name": "Monotonic Stack",
      "slug": "monotonic-stack"
    }
  ],
  "metaData": {
    "name": "findUnsortedSubarray",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "vincentsong2008",
      "year": 2019,
      "content": "The last solution is awesome and should be a medium question if we want to achieve O(n) time and O(1) space.\\n\\nAnd yes, it\\'s absolutely easy if use sort, but I doubt it could be accept when you are in the real life interview.",
      "voteCount": 31
    },
    {
      "name": "Shash_728",
      "year": 2024,
      "content": "One of those questions where you have to debug your code with each failed test case :)",
      "voteCount": 22
    },
    {
      "name": "Nakanu",
      "year": 2017,
      "content": "From left to right, find the potential start s where nums[s+1]<nums[s]\\nFrom right to left, find the potential end e where nums[e]<nums[e-1]\\nFind the min value and max value of the elements between start and end, compare them with the numbers from 0 to s and e to length -1. Update the start and end. \\nReturn end - start + 1",
      "voteCount": 21
    },
    {
      "name": "nickshbln",
      "year": 2024,
      "content": "A couple of testcases for you bros\\n\\n```\\n[3,2,3,2,4]\\n[1]\\n[1,2,3,4,3,5,6,5,3,6,7,3,6,7,8]\\n[1,2,3,4,5,6,7,8,9]\\n[9,8,7,6,5,4,3,2,1]\\n[-64948, -30954, 93003, -63702,  -21219,  -68746, 93384]\\n[-91061, -22272, 2067, 55612, 86860, -90344, -3544, -47493, 89550, 73503, -20277, -33524, 51590, -18717, 7372, 95514, 29493, 76503, 94750, -23775, 34420, -48939, -40168, 7060, 24781, -71783, -25378, 31397, -77517, 77426, -93250, -23492, -17740, -412, 47619, 38327, -33676, -79038, -39694, 64345, -41954, -23151, -29126, 11429, -16449, -78098, 87038, 51968, -89655, 97336, 63633, 78058, -79225, 84906, -27949, 92147, -79632, 51376, 57011, -62669, 55378, 6796, -56511, 7196, 70537, 64343, 20923, -51289, 76736, -25434, -57507, 17944, 54338, -48282, -34623, 7177, -28634, 83216, -31352, 45699, 99329, -28267, -78011, -7620, 84699, 89265, -49776, -21235, 65902, 43270, 79334, 84362, 19442, 64730, -35898, 88186, 20582, -56827, -30975, 39187, 1327, 93042, 69512, -19927, -18379, -5643, -82624, -56710, -31031, 37181, 74314, 40518, -36299, -44728, 39742, -74671, -32110, -55657, 34016, -65990, 86746, 93094, -93894, -83162, 13408, -6857, -30669, 95812, -96285, -3445, -21164, -87494, -67545, 70622, -83445, 754, 55404, 14936, 97393, -16326, 15891, 78854, 84663, -2628, 41105, -48964, -3414, -93982, 58775, 59452, 13450, -63013, -34805, 66317, -2584, -14169, -7044, -27724, -22153, -28911, -89108, 84956, 6145, 52354, 48500, -24910, -27158, 4027, -91159, -41224, 65325, -97315, -62962, -61647, 98280, -11539, -75494, 58639, 63671, 27896, 39027, 30908, -92630, 82210, 8643, 39376, 46313, -66817, -79586, -49991, -80513, -66490, 30771, 54735, -40764, -79461, -1226, -36116, 10516, 80681, 65750, -41216, -67169, -64376, -5209, -79913, 1160, 63778, -23186, 10626, -38754, 52297, -94192, -86858, -98963, 30872, 84478, -69136, 78708, -99218, -72791, 77363, -51955, -9729, 52005, 69680, -52141, -77837, 22088, -27426, -71302, 19815, 12845, 84656, -40302, -80752, -51850, -31087, -84493, -91158, -44437, 43688, 66991, -7605, -39639, 33161, 77852, 12286, 60129, 54384, -65117, 13863, 7450, 61877, 63579, -25656, -85884, 32190, -78818, 56223, 39955, 69902, 77150, 60243, 13479, 80294, -67968, 83506, 69202, -69089, 44521, 1638, 13074, 61796, -32749, 13470, -57809, -74305, 20489, 93589, -59, 57804, 8775, 85588, -76302, 94604, 74868, 12952, 10506, -82883, -29028, -95972, 56335, -31074, 4546, -55946, -38743, -39208, -25006, -45472, -22577, 82896, -60432, -38134, 34324, -45481, 87218, 33583, 21584, -48506, 64036, 57105, -84780, 42113, 80473, 24019, 5460, -70551, 71785, -90463, -14473, 4175, 8980, -38976, 114, -11555, -19343, 97674, 49817, -41013, 45607, 15636, -62518, 32679, -65550, 13342, 33295, -74183, -57574, -34647, 21411, 52375, 95233, 65507, -30076, 36272, 3999, 95063, 99770, 64184, 69812, -14528, 8563, 75392, -24673, -89370, -58456, 6334, 80654, 48869, -75800, -62869, 71735, -59511, 25660, -51125, 23218, 50388, -14270, -35836, 29010, -20073, -43906, -25545, 38022, -64825, 66487, -4944, 80941, -77519, 97869, 6438, 17975, -29337, -7295, 51832, 77970, 67872, -62806, -82657, -18702, -52448, 51657, 78359, 32767, 41967, -80705, 30148, -79202, 25527, 33474, 61534, -31646, -84813, 15124, 5798, -62479, 48556, 62059, -96841, 90886, 91224, 95434, 95245, -78839, 86113, -24935, -36715, 32646, 79187, 58474, 45216, -42055, 63405, 79287, 2943, 16937, -62016, 7493, -55595, 26403, -95417, -34487, 7137, -34907, 61677, 32299, -69496, -88550, 8056, -94408, -33035, -57283, 56299, 73342, 22802, -79127, 35726, -53520, 14014, 7816, -19364, 69347, -13698, 65839, 16984, -31211, -88967, 37024, -21767, -5395, -11057, 19387, -28275, 75254, -25649, 35968, 54474, -83628, -52885, -44081, -24729, 85757, 55632, -96581, -78513, 38130, -96602, 6231, 58579, -56011, -48323, 4366, -10307, -45116, 94262, -92892, -60971, 30714, -63331, 58134, -20454, -22076, 16496, -74885, 86687, 3274, -16128, 45964, -73495, -82024, 48685, -33927, -91459, 71371, 10775, -49068, 1553, -84555, 70441, 66804, -33607, 40919, 75014, 45187, 68922, 42724, -61449, 63740, 39408, 35089, -37810, 78272, 73481, -22652, 89141, -40951, 4578, -23404, 61034, 51486, 71712, -406, -95312, -98904, -3340, -11273, 20665, -50505, -13942, -85382, -1113, 1901, 30710, -49982, 88242, -97579, -37541, 63929, -29116, 59744, -2729, 797, 74472, 41794, 57849, 95114, 99894, 7507, -88440, 54629, 69365, -77645, -87287, 6605, 35624, 41125, 10106, -20150, -37747, 49920, 76338, -799, -2903, -37103, 74956, 19060, -73118, 30327, 42195, 28428, -97704, 7741, 47387, 27577, 18230, -23484, -23548, 4741, -32403, 51938, -31634, 65097, -88581, 80768, 63726, -87917, 12271, -92969, 88620, 42844, 54998, 99859, 4933, -15136, -85508, -11847, -48723, -10840, 112, 50980, -14121, 58468, -36120, 69167, -94117, -91447, 58205, 34154, -34662, 60398, 31461, 49426, -8354, 16071, 85673, -98179, 52094, 51291, 90769, -68287, -47408, 93218, -66922, -15628, 92196, 95531, 61949, 15781, 59999, 27018, 36819, 71942, -77359, -17997, -65552, 87209, 36310, -47157, -96870, -56264, 56719, 24333, -77325, -64968, 57583, 40037, 80299, -88160, 52300, 77438, -64148, 16908, -64847, -52720, -66635, -84671, 46371, -86689, -1120, -30642, 63140, -39016, 18115, 20469, 41034, 70981, 4436, -91666, 78339, 7139, -14882, -72466, 8322, 76876, -56692, 19436, 4988, -10302, -40478, 6902, 35899, 39680, 40884, 93119, 64840, -39607, -21183, 64913, -35579, 4414, 22589, -5675, 46895, -22105, -75511, 41408, -41586, 34346, 89180, 60722, 27678, 23590, -41173, 65293, -41706, 64446, -30366, -13288, 16743, 40538, -91590, 36900, -83278, -60463, -54904, -83258, -41218, -37777, -75700, 46933, -83047, -10775, 34146, -53766, -48403, -16070, 72424, 73829, 2912, 22512, -99160, 39819, -62518, -13599, -47428, 29955, 55886, 17332, -23907, -44996, 23911, 53034, 71984, -93409, 86980, 85482, -27778, 72193, 73841, 36448, 2402, 90562, -96187, 29408, -59724, 97072, 53771, -26810, 6515, 78803, -66003, -14568, 10307, 94638, 98821, -87394, -63208, -40614, 9860, -21179, 67658, -76295, -8499, -81044, -58124, 55994, 24176, -47701, 26125, -22240, -46172, -60319, 14307, 59723, -5454, -73581, 35861, -43006, -66747, 494, 6405, 45004, 47235, -45504, 10328, -33565, 97895, -12152, 12661, 38364, 75421, -66928, 72375, -18031, 41344, 46827, -30027, -49672, -90771, -9473, 19956, 86878, -53469, -94457, -95333, 25361, 34140, 32839, -27076, -35974, 24209, 88838, -18854, -47021, -88522, 49084, -13198, -41980, 37020, 88520, 49172, 29544, 90120, 37696, -39534, 40874, -62479, 91893, -51338, 44445, -81651, 7075, 9214, -73392, -76611, -37321, 86343, -79366, 81803, 19421, 15137, 70437, -27670, 8851, 89050, -9839, -45986, 72855, -35866, 1769, 4001, 82607, -51145, 21386, -85514, -18781, -75612, -24892, 17612, -67526, 81560, 64877, 80696, -73405, 95416, -29283, -39342, -22963, -44479, -51106, -72864, -88616, -25086, -73288, -76999, 6266, 26813, 26210, 3569, 37634, 55838, 12466, -70942, 52466, 75219, 1358, -14838, -17744, 92876, -26005, 98, -60708, 54083, -82418, -15516, -61014, 81035, -83611, -27575, -71386, -20465, 34027, 18477, -44057, 32536, 36654, -6614, 17276, -69421, -44599, 61926, -45780, -4606, 65400, -53211, 27599, 70118, 69798, 44443, 3582, -59325, -3263, 58321, -72440, -67110, 65066, -34226, -26709, -24691, 4065, -26084, -33956, 24159, -99906, 88460, 52672, -10502, -84820, -25445, -96701, 29580, -90332, -71103, 71922, 27967, 51751, -30639, 64767, -63606, -14554, 38978, 59082, -82803, 77303, -51667, 11451, -55981, -81966, -95429, -3937, 8783, 63134, -54603, -71270, 58954, -4161, -31648, 92261, -58268, -79577, -16107, -11084, -92753, -56761, -39401, 22529, 79217, 18480, 27982]\\n```",
      "voteCount": 18
    },
    {
      "name": "vedant_khasbage05",
      "year": 2024,
      "content": "I hate duplicates\\uD83D\\uDC80\\uD83D\\uDC80",
      "voteCount": 17
    },
    {
      "name": "LeetCode",
      "year": 2022,
      "content": "This problem is the Daily LeetCoding Challenge for May, Day 3.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/shortest-unsorted-continuous-subarray/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 5 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Better Brute Force\n\n  \n**Approach 3:** Using Sorting\n\n  \n**Approach 4:** Using Stack\n\n  \n**Approach 5:** Without Using Extra Space\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
      "voteCount": 7
    },
    {
      "name": "gthor10",
      "year": 2019,
      "content": "Going through the problem makes me think it shouldn\\'t be ranked as easy. While sorting based solutions are obvious the O(n) time and O(1) space is kind of tricky. Plus having multiple solutions makes it a good candidate for many follow-up questions. \\nI feel it\\'s a good \"medium\" level one.",
      "voteCount": 6
    },
    {
      "name": "ihsansfd",
      "year": 2023,
      "content": "So close to find the optimal answer but failed :\\')",
      "voteCount": 5
    },
    {
      "name": "4Mk48OCNbJ",
      "year": 2024,
      "content": "Someone said, \"I hate duplicates\". Couldn\\'t relate more",
      "voteCount": 4
    },
    {
      "name": "Musti_Don",
      "year": 2024,
      "content": "O(n) Approach is non-intuitive, however using sort() makes the question easy peasy.",
      "voteCount": 3
    }
  ]
}
