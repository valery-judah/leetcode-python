{
  "category": "",
  "id": "295",
  "name": "Find Median from Data Stream",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/find-median-from-data-stream/",
  "slug": "find-median-from-data-stream",
  "isPaidOnly": false,
  "tags": [
    "Two Pointers",
    "Design",
    "Sorting",
    "Heap (Priority Queue)",
    "Data Stream"
  ],
  "similar_questions": [
    {
      "title": "Sliding Window Median",
      "difficulty": "Hard",
      "slug": "sliding-window-median"
    },
    {
      "title": "Finding MK Average",
      "difficulty": "Hard",
      "slug": "finding-mk-average"
    },
    {
      "title": "Sequentially Ordinal Rank Tracker",
      "difficulty": "Hard",
      "slug": "sequentially-ordinal-rank-tracker"
    },
    {
      "title": "Minimum Operations to Make Median of Array Equal to K",
      "difficulty": "Medium",
      "slug": "minimum-operations-to-make-median-of-array-equal-to-k"
    },
    {
      "title": "Minimum Operations to Make Subarray Elements Equal",
      "difficulty": "Medium",
      "slug": "minimum-operations-to-make-subarray-elements-equal"
    },
    {
      "title": "Minimum Operations to Make Elements Within K Subarrays Equal",
      "difficulty": "Hard",
      "slug": "minimum-operations-to-make-elements-within-k-subarrays-equal"
    }
  ],
  "questionId": "295",
  "questionFrontendId": "295",
  "title": "Find Median from Data Stream",
  "titleSlug": "find-median-from-data-stream",
  "content": "<p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p>\n\n<ul>\n\t<li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li>\n\t<li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li>\n</ul>\n\n<p>Implement the MedianFinder class:</p>\n\n<ul>\n\t<li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li>\n\t<li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li>\n\t<li><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MedianFinder&quot;, &quot;addNum&quot;, &quot;addNum&quot;, &quot;findMedian&quot;, &quot;addNum&quot;, &quot;findMedian&quot;]\n[[], [1], [2], [], [3], []]\n<strong>Output</strong>\n[null, null, null, 1.5, null, 2.0]\n\n<strong>Explanation</strong>\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></code></li>\n\t<li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n\t<li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n</ul>\n",
  "likes": 12800,
  "dislikes": 271,
  "stats": {
    "totalAccepted": "1.1M",
    "totalSubmission": "2M",
    "totalAcceptedRaw": 1075443,
    "totalSubmissionRaw": 2004655,
    "acRate": "53.6%"
  },
  "topicTags": [
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    },
    {
      "name": "Heap (Priority Queue)",
      "slug": "heap-priority-queue"
    },
    {
      "name": "Data Stream",
      "slug": "data-stream"
    }
  ],
  "metaData": {
    "classname": "MedianFinder",
    "constructor": {
      "params": []
    },
    "methods": [
      {
        "params": [
          {
            "type": "integer",
            "name": "num"
          }
        ],
        "name": "addNum",
        "return": {
          "type": "void"
        }
      },
      {
        "params": [],
        "name": "findMedian",
        "return": {
          "type": "double"
        }
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 26
      },
      {
        "taggedByAdmin": false,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 20
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "nupt_wang",
      "year": 2019,
      "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].",
      "voteCount": 594
    },
    {
      "name": "garcia_garcia",
      "year": 2024,
      "content": "I got asked this question in a phone screen and solve it just because I had seen it in LC a couple of days earlier, I didn\\'t even notice it was hard. 6 years later I\\'m still in the same company... wild how such a stupid coincidence changed the course of my career.",
      "voteCount": 345
    },
    {
      "name": "vyshnavkr",
      "year": 2021,
      "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!",
      "voteCount": 94
    },
    {
      "name": "Msey",
      "year": 2023,
      "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha",
      "voteCount": 77
    },
    {
      "name": "chao4",
      "year": 2018,
      "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that.",
      "voteCount": 68
    },
    {
      "name": "in-the-machine",
      "year": 2024,
      "content": "yippie !! this was my 100th leetcode problem :3",
      "voteCount": 45
    },
    {
      "name": "Future6",
      "year": 2017,
      "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton",
      "voteCount": 36
    },
    {
      "name": "54564269",
      "year": 2018,
      "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared.",
      "voteCount": 30
    },
    {
      "name": "reas0ner",
      "year": 2024,
      "content": "> The median is the middle value in an ordered integer list\\n\\nThe question is not fully clear. Nowhere does it mention sorted, by ordered I imagined that what they mean is that the order of insertion of elements has to be maintained. An example containing unsorted lists should be added. ",
      "voteCount": 29
    },
    {
      "name": "prakashsellathurai",
      "year": 2022,
      "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n",
      "voteCount": 22
    }
  ]
}
