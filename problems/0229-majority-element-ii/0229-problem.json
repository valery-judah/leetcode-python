{
  "category": "",
  "id": "229",
  "name": "Majority Element II",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/majority-element-ii/",
  "slug": "majority-element-ii",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Hash Table",
    "Sorting",
    "Counting"
  ],
  "similar_questions": [
    {
      "title": "Majority Element",
      "difficulty": "Easy",
      "slug": "majority-element"
    },
    {
      "title": "Check If a Number Is Majority Element in a Sorted Array",
      "difficulty": "Easy",
      "slug": "check-if-a-number-is-majority-element-in-a-sorted-array"
    },
    {
      "title": "Most Frequent Even Element",
      "difficulty": "Easy",
      "slug": "most-frequent-even-element"
    }
  ],
  "questionId": "229",
  "questionFrontendId": "229",
  "title": "Majority Element II",
  "titleSlug": "majority-element-ii",
  "content": "<p>Given an integer array of size <code>n</code>, find all elements that appear more than <code>&lfloor; n/3 &rfloor;</code> times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,3]\n<strong>Output:</strong> [3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?</p>\n",
  "likes": 10629,
  "dislikes": 472,
  "stats": {
    "totalAccepted": "1.1M",
    "totalSubmission": "2M",
    "totalAcceptedRaw": 1076979,
    "totalSubmissionRaw": 1957112,
    "acRate": "55.0%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    },
    {
      "name": "Counting",
      "slug": "counting"
    }
  ],
  "metaData": {
    "name": "majorityElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    }
  },
  "discussion_posts": [
    {
      "name": "cartesPerforees",
      "year": 2023,
      "content": "The follow up in O(1) space is hard, and the original question is easy, neither of them are medium. \n\nAnything that I can solve in under 5 minutes with a one-liner can't be a medium. Anything that requires you to come up with an algorithm which bears not one but two names of famous dudes probably can't be medium either",
      "voteCount": 456
    },
    {
      "name": "tekmark",
      "year": 2017,
      "content": "i am so dumb.",
      "voteCount": 249
    },
    {
      "name": "alanmiller",
      "year": 2019,
      "content": "This article is for those who are familiar with how Moore\\'s voting algorithm is implemented, but don\\'t understand why it works, or seeks for a rigorous proof of its correctness.\\n\\nIntuitive idea:\\nLet\\'s start with the basic case: [169. Majority Element](https://leetcode.com/problems/majority-element/)\\nOne can think of the algorithm as a battle process, whenever two different elements encountered, the battle occurs, and they both vanishes. The candidate is whoever that survives this battle process. The point here is that whenever a majority element vanishes (no matter it is the current candidate or not), there is at least (exactly) one other element dies with it. Hence, the majority element survives, since there are at least n/2 of them.\\n\\nNow for this problem, the only difference is that there are two candidates, corresponding to two survivors that we pick. And whenever an element vanishes in a battle, there are at least (exactly) 2 other elements die with it. Hence, whenever an element with occurences > n/3 dies (no matter it is a current candidate or not), there are at least 2 other elements die with it. So it survives.\\n\\nRigorous proof this problem:\\nThe above intuitive idea can easily be turned into a rigorous proof.\\nLet\\'s prove by contradiction, suppose an element with occurences > n/3 is not a candidate after the algorithm finishes. Then, they must be all cancelled out at a certain point (either got counted down as a candidate element, or as a non-candidate to cause two candidates counted down), this corresponds to all of them vanishes in the battle. But whenever a cancellation occurs, three elements are recorded (two candidates counted down, and one non-candidate got passed), this corresponds to whenever an element dies, two others die with it. So in total, there are > 3*(n/3) elements recorded, but there are only n elements. Contradiction.\\n\\nGeneralization:\\nAs one can see, the point is whenever an element dies, 2 others die with it. For general k,  just choose k candidates, and there will be (k-1) elements die with it. The proof is almost verbatim.\\n",
      "voteCount": 181
    },
    {
      "name": "irshadcc135",
      "year": 2023,
      "content": "Hint explanation\n\nLet n denote total number of elements. \n\n\nIf an element \"a\" occurs more than n/3 times, then number of elements excluding \"a\" is \n\nn - ((n/3)+1)  = (2n-3)/3 \n\nIf an element \"b\" occurs more than n/3 times, then number of element excluding \"a\" and \"b\" is \n\n((2n-3)/3) - ((n/3) +1) = (n-6)/3 \n\nNow we have only left (n-6)/3 elements, and no elements can occur more than (n/3) times, since (n-6)/3 is less than (n/3)\n\nWe only have to look for 2 elements using O(n) algorithm. I hope the hint make sense now. \n",
      "voteCount": 87
    },
    {
      "name": "ajv97",
      "year": 2023,
      "content": "An analogy that might help.\nImagine some armies of people in a country with a population of 7.\n4 people are from the army A and 3 are from the army B. The soldiers that fight each other die.\nSo, in this case we will be left with only 1 soldier of army A-the king/ majority element.\n\nNow, Imagine a country with a population of 7 and we have 3 of army A, 3 of army B and 1 of army C.\nIf A and B fight with each other then the majority army might not win, so they are forced to form a truce and become partners. \nTo defeat the other members in the country both parties will send 1 of their soldiers since if only one of them sends, then the other becomes the stronger army.\nNow we have 2 kings in the country/ 2 majorities.\n\nIf armies need a majority more than n/2 then we can have 1 dominant army.\nIf armies need a majority more than n/3 then we CAN have 2 dominant armies.\nIf armies need a majority more than n/4 then we CAN have 3 dominant armies.\n\nSo with more than n/3 and n/4 there is a possibility of having mutiple majority members.\n\nThis question-https://leetcode.com/problems/majority-element/ will help you find the 1 majority element with more than n/2 members.\n",
      "voteCount": 70
    },
    {
      "name": "lgylym",
      "year": 2018,
      "content": "And it\\'ll absurd if the interviewer is looking for that.\\n\\nVery interesting algorithm though.",
      "voteCount": 60
    },
    {
      "name": "Daciuk",
      "year": 2020,
      "content": "Did leetcode just not give us test cases that show the strength of O(1) space?  Does that make sense to anyone?",
      "voteCount": 53
    },
    {
      "name": "_aakash027",
      "year": 2023,
      "content": "Real problem to do in O(1) space",
      "voteCount": 28
    },
    {
      "name": "_ro_",
      "year": 2023,
      "content": "Am I the only one that feels implementing \"Boyer-Moore Voting Algorithm\" on own poses crap ton of edgecases?",
      "voteCount": 20
    },
    {
      "name": "MNARAYAN04",
      "year": 2023,
      "content": "The real game of this question is to solve in O(1) Space Complexity and thinking of all edge condition\\uD83D\\uDE25\\uD83D\\uDE05",
      "voteCount": 17
    }
  ]
}
