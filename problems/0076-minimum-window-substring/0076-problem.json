{
  "category": "",
  "id": "76",
  "name": "Minimum Window Substring",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/minimum-window-substring/",
  "slug": "minimum-window-substring",
  "isPaidOnly": false,
  "tags": [
    "Hash Table",
    "String",
    "Sliding Window"
  ],
  "similar_questions": [
    {
      "title": "Substring with Concatenation of All Words",
      "difficulty": "Hard",
      "slug": "substring-with-concatenation-of-all-words"
    },
    {
      "title": "Minimum Size Subarray Sum",
      "difficulty": "Medium",
      "slug": "minimum-size-subarray-sum"
    },
    {
      "title": "Sliding Window Maximum",
      "difficulty": "Hard",
      "slug": "sliding-window-maximum"
    },
    {
      "title": "Permutation in String",
      "difficulty": "Medium",
      "slug": "permutation-in-string"
    },
    {
      "title": "Smallest Range Covering Elements from K Lists",
      "difficulty": "Hard",
      "slug": "smallest-range-covering-elements-from-k-lists"
    },
    {
      "title": "Minimum Window Subsequence",
      "difficulty": "Hard",
      "slug": "minimum-window-subsequence"
    },
    {
      "title": "Count Substrings That Can Be Rearranged to Contain a String II",
      "difficulty": "Hard",
      "slug": "count-substrings-that-can-be-rearranged-to-contain-a-string-ii"
    },
    {
      "title": "Count Substrings That Can Be Rearranged to Contain a String I",
      "difficulty": "Medium",
      "slug": "count-substrings-that-can-be-rearranged-to-contain-a-string-i"
    }
  ],
  "questionId": "76",
  "questionFrontendId": "76",
  "title": "Minimum Window Substring",
  "titleSlug": "minimum-window-substring",
  "content": "<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window</strong></em> <span data-keyword=\"substring-nonempty\"><strong><em>substring</em></strong></span><em> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window</em>. If there is no such substring, return <em>the empty string </em><code>&quot;&quot;</code>.</p>\n\n<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\n<strong>Output:</strong> &quot;BANC&quot;\n<strong>Explanation:</strong> The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The entire string s is the minimum window.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == s.length</code></li>\n\t<li><code>n == t.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
  "likes": 19370,
  "dislikes": 818,
  "stats": {
    "totalAccepted": "1.9M",
    "totalSubmission": "4.1M",
    "totalAcceptedRaw": 1872660,
    "totalSubmissionRaw": 4075759,
    "acRate": "45.9%"
  },
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Sliding Window",
      "slug": "sliding-window"
    }
  ],
  "metaData": {
    "name": "minWindow",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": true,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 52
      },
      {
        "taggedByAdmin": false,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 17
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "pilot_n_programmer",
      "year": 2021,
      "content": "Got this problem at FB yesterday.\\nI solved it sometime ago on leetcode but during the interview I failed to do it.\\nIt was a second problem to solve, 20 mins left and all this time pressure+stress made me to panic.\\nI would expect that two problems in 45 mins would be Easy and Medium or worst case Medium/Medium but got Medium and Hard. \\nMoral of the story: don\\'t expect that you will get the same complexity tasks like others usually get - I find it is sort of lottery. Prepare for worst to make it done! And don\\'t stress or panic - it doesn\\'t help. Good luck everyone!",
      "voteCount": 914
    },
    {
      "name": "matcovic",
      "year": 2023,
      "content": "It really feels bad when you come up with a solution spending hours, only to receive a TLE on the last test cases with a 10^5 input size!",
      "voteCount": 279
    },
    {
      "name": "harrypotter0",
      "year": 2019,
      "content": "Here are the other sliding window problems to practice:\\n\\nhttps://leetcode.com/problems/sliding-window-maximum/\\nhttps://leetcode.com/problems/minimum-size-subarray-sum/\\nhttps://leetcode.com/problems/minimum-window-substring/\\nhttps://leetcode.com/problems/maximum-length-of-repeated-subarray/\\n\\n\\n\\n",
      "voteCount": 204
    },
    {
      "name": "Pratham_Upadhyay",
      "year": 2023,
      "content": "It feels amazing when you can solve a hard question all by yourself! It brings great happiness, right? If you managed to do it on your own, give yourself a thumbs-up! \\uD83C\\uDF1F",
      "voteCount": 199
    },
    {
      "name": "bhanujggandhi",
      "year": 2023,
      "content": "Do not maintain the string variable and update it every time you find a better minimum substring. **Instead maintain pointers and create substring only once, otherwise there will be TLE/MLE**",
      "voteCount": 190
    },
    {
      "name": "petia",
      "year": 2019,
      "content": "I don\\'t know if it is just me, but I am really tired of the poor explanations of LC problems. Quite often we do not have any input restrictions and bounds. In this problem we don\\'t know if we expect duplicate characters in T, if we are looking for each distinct character of T in S, or literally every single one (i.e. T=\"aa\" and S=\"a\" - is this valid S or not...). Every time I need to submit my code to get to yet another failing test because there is some unmentioned restriction or requirement. In a real interview if this is the case I would ask clarifying questions, obviously this is not an option in this case. So annoying!",
      "voteCount": 112
    },
    {
      "name": "codewhisperer__",
      "year": 2022,
      "content": "\\uD83D\\uDE02\\uD83D\\uDE02\\uD83D\\uDE02 imagine getting this question in a live interview having never heard it before and answering it correctly on the spot in less than 45 minutes \\uD83D\\uDE02\\uD83D\\uDE02\\uD83D\\uDE02\\uD83D\\uDE02\\uD83D\\uDE02\\uD83D\\uDE02",
      "voteCount": 70
    },
    {
      "name": "MyPing0",
      "year": 2023,
      "content": "If you are stuck on the really long test cases, like #266, make sure you are using either .equals() or .intValue() when trying to compare the values in your HashMap\\'s\\n\\nhttps://stackoverflow.com/questions/4428774/why-java-does-not-see-that-integers-are-equal",
      "voteCount": 51
    },
    {
      "name": "RyanYibingJia",
      "year": 2021,
      "content": "Just be careful for object `Integer`, using `Integer.intValue()` to compare the value of it.\\n\\n",
      "voteCount": 46
    },
    {
      "name": "ayushabg",
      "year": 2022,
      "content": "Very Badly written Description! I solved the problem believing that we need to match exact frequencies of characters in t in substrings of s. Only to find test case 192 failing. \\n\"aaaaaaaaaaaabbbbbcdd\", \"abcdd\"  -> \"abbbbbcdd\"",
      "voteCount": 45
    }
  ]
}
