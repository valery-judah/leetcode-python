{
  "category": "",
  "id": "352",
  "name": "Data Stream as Disjoint Intervals",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/data-stream-as-disjoint-intervals/",
  "slug": "data-stream-as-disjoint-intervals",
  "isPaidOnly": false,
  "tags": [
    "Binary Search",
    "Design",
    "Ordered Set"
  ],
  "similar_questions": [
    {
      "title": "Summary Ranges",
      "difficulty": "Easy",
      "slug": "summary-ranges"
    },
    {
      "title": "Find Right Interval",
      "difficulty": "Medium",
      "slug": "find-right-interval"
    },
    {
      "title": "Range Module",
      "difficulty": "Hard",
      "slug": "range-module"
    },
    {
      "title": "Count Integers in Intervals",
      "difficulty": "Hard",
      "slug": "count-integers-in-intervals"
    }
  ],
  "questionId": "352",
  "questionFrontendId": "352",
  "title": "Data Stream as Disjoint Intervals",
  "titleSlug": "data-stream-as-disjoint-intervals",
  "content": "<p>Given a data stream input of non-negative integers <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub></code>, summarize the numbers seen so far as a list of disjoint intervals.</p>\n\n<p>Implement the <code>SummaryRanges</code> class:</p>\n\n<ul>\n\t<li><code>SummaryRanges()</code> Initializes the object with an empty stream.</li>\n\t<li><code>void addNum(int value)</code> Adds the integer <code>value</code> to the stream.</li>\n\t<li><code>int[][] getIntervals()</code> Returns a summary of the integers in the stream currently as a list of disjoint intervals <code>[start<sub>i</sub>, end<sub>i</sub>]</code>. The answer should be sorted by <code>start<sub>i</sub></code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;SummaryRanges&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\n<strong>Output</strong>\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n\n<strong>Explanation</strong>\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= value &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>getIntervals</code>.</li>\n\t<li>At most <code>10<sup>2</sup></code>&nbsp;calls will be made to&nbsp;<code>getIntervals</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?</p>\n",
  "likes": 1791,
  "dislikes": 369,
  "stats": {
    "totalAccepted": "122.2K",
    "totalSubmission": "204.9K",
    "totalAcceptedRaw": 122164,
    "totalSubmissionRaw": 204920,
    "acRate": "59.6%"
  },
  "topicTags": [
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Design",
      "slug": "design"
    },
    {
      "name": "Ordered Set",
      "slug": "ordered-set"
    }
  ],
  "metaData": {
    "classname": "SummaryRanges",
    "constructor": {
      "params": []
    },
    "methods": [
      {
        "params": [
          {
            "type": "integer",
            "name": "value"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "addNum"
      },
      {
        "params": [],
        "return": {
          "type": "integer[][]"
        },
        "name": "getIntervals"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true
  },
  "discussion_posts": [
    {
      "name": "lirongbin",
      "year": 2016,
      "content": "I can not understand the question description, can any one explain it?",
      "voteCount": 221
    },
    {
      "name": "sarpalmadhav",
      "year": 2023,
      "content": "I want to meet the problem setter who takes joy in withholding such an important piece of information that interval here means a consecutive sequence of numbers, and summary means just the beginning and ending of  that sequence.\\nHow much difficult it is to mention:\\n**A sequence of consecutive numbers `a1, a2, a3 .... an` represents an interval with summary `[a1, an]`**",
      "voteCount": 116
    },
    {
      "name": "clipper21",
      "year": 2023,
      "content": "This should be a medium or easy. Explanation is bad too.",
      "voteCount": 44
    },
    {
      "name": "vin36",
      "year": 2023,
      "content": "I think an interval in this question is a sequence of consecutive numbers.\nSo in the example where the numbers are: [1, 2, 3, 6, 7]\nThe sequence of consecutive numbers (intervals) are [1,2,3] and [6,7], but we only want the \"summary\": [start, end]. Therefore the intervals are [1,3] and [6,7].\nHope this helps!",
      "voteCount": 18
    },
    {
      "name": "saklanishubham15",
      "year": 2023,
      "content": "Brute Force solution is accepted.",
      "voteCount": 17
    },
    {
      "name": "HereForLearning_JS",
      "year": 2023,
      "content": "Looking at these hard problems everyday / 2-3 in a week , and graph/heap tree questions makes me want to stop doing this , can\\'t solve most of them , always have to look at solution. \\nI understand that you need to solve hard , but for someone who is forming a practice , its tough. ",
      "voteCount": 10
    },
    {
      "name": "rbarcelos",
      "year": 2016,
      "content": "I have a C# solution and would like to make sure that it is correct.. could you add a C# code defintion",
      "voteCount": 10
    },
    {
      "name": "Firebelias12",
      "year": 2023,
      "content": "Wow! This should be marked as Easy.",
      "voteCount": 8
    },
    {
      "name": "dev-null0",
      "year": 2023,
      "content": "You basically just need to use a form of binary search to find the relevant range in your list of ranges, then merge with the left or right range if applicable.",
      "voteCount": 6
    },
    {
      "name": "devvartkumarkumar",
      "year": 2023,
      "content": "daily challenges are getting harder and harder ; )",
      "voteCount": 5
    }
  ]
}
