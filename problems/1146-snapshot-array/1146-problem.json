{
  "category": "",
  "id": "1146",
  "name": "Snapshot Array",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/snapshot-array/",
  "slug": "snapshot-array",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Design"
  ],
  "similar_questions": [],
  "questionId": "1249",
  "questionFrontendId": "1146",
  "title": "Snapshot Array",
  "titleSlug": "snapshot-array",
  "content": "<p>Implement a SnapshotArray that supports the following interface:</p>\n\n<ul>\n\t<li><code>SnapshotArray(int length)</code> initializes an array-like data structure with the given length. <strong>Initially, each element equals 0</strong>.</li>\n\t<li><code>void set(index, val)</code> sets the element at the given <code>index</code> to be equal to <code>val</code>.</li>\n\t<li><code>int snap()</code> takes a snapshot of the array and returns the <code>snap_id</code>: the total number of times we called <code>snap()</code> minus <code>1</code>.</li>\n\t<li><code>int get(index, snap_id)</code> returns the value at the given <code>index</code>, at the time we took the snapshot with the given <code>snap_id</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> [&quot;SnapshotArray&quot;,&quot;set&quot;,&quot;snap&quot;,&quot;set&quot;,&quot;get&quot;]\n[[3],[0,5],[],[0,6],[0,0]]\n<strong>Output:</strong> [null,null,0,null,5]\n<strong>Explanation: </strong>\nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= index &lt; length</code></li>\n\t<li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= snap_id &lt; </code>(the total number of times we call <code>snap()</code>)</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>set</code>, <code>snap</code>, and <code>get</code>.</li>\n</ul>\n",
  "likes": 3850,
  "dislikes": 535,
  "stats": {
    "totalAccepted": "254.7K",
    "totalSubmission": "694.6K",
    "totalAcceptedRaw": 254716,
    "totalSubmissionRaw": 694629,
    "acRate": "36.7%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    },
    {
      "name": "Design",
      "slug": "design"
    }
  ],
  "metaData": {
    "classname": "SnapshotArray",
    "maxbytesperline": 400000,
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "length"
        }
      ]
    },
    "methods": [
      {
        "params": [
          {
            "type": "integer",
            "name": "index"
          },
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "name": "set",
        "return": {
          "type": "void"
        }
      },
      {
        "params": [],
        "name": "snap",
        "return": {
          "type": "integer"
        }
      },
      {
        "params": [
          {
            "type": "integer",
            "name": "index"
          },
          {
            "type": "integer",
            "name": "snap_id"
          }
        ],
        "name": "get",
        "return": {
          "type": "integer"
        }
      }
    ],
    "return": {
      "type": "boolean"
    },
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "systemdesign": true,
    "manual": false
  },
  "discussion_posts": [
    {
      "name": "sasukesharma",
      "year": 2023,
      "content": "**are you here, after crying in contest?**",
      "voteCount": 74
    },
    {
      "name": "codymon",
      "year": 2023,
      "content": "And it sucks when u get a MLE at 69/74 inputs :(",
      "voteCount": 65
    },
    {
      "name": "who_rules",
      "year": 2023,
      "content": "Leetcode: Use a list of lists, adding both the element and the snap_id to each index.\\nMe: Following suggestion\\nLeetcode: Memory Limit Exceeded",
      "voteCount": 39
    },
    {
      "name": "dmitryartux",
      "year": 2023,
      "content": "The problem I\\'ve collected both **MLE** and **TLE**",
      "voteCount": 36
    },
    {
      "name": "ad_xd",
      "year": 2023,
      "content": "Good Morning :)",
      "voteCount": 13
    },
    {
      "name": "ehmyitayew",
      "year": 2023,
      "content": "A couple of things that weren\\'t clear from the questions:\\n- if snap isn\\'t called, changes aren\\'t persisted. I.e if you for instance you have a set() followed by a get() before any snaps that should result with a 0\\n- when getting, you don\\'t need to have have the exact snap_id, it is more like the latest snapshot <= snap_id",
      "voteCount": 12
    },
    {
      "name": "NesaPrasath",
      "year": 2023,
      "content": "can anyone pls explain what is snapshot?",
      "voteCount": 10
    },
    {
      "name": "caje99",
      "year": 2022,
      "content": "Why can't use just a dictionary?\n(In comparison to the solution which uses array of arrays to note just the change)\n\nIf I set the key as `(snap_id, index)` and value as `Value` \n\nThe time complexity would be O(1) for get operations!\n\nI executed the above operation, but I got a space limit exceeded error! ",
      "voteCount": 10
    },
    {
      "name": "anwendeng",
      "year": 2023,
      "content": "I don't really understand what to do. Some OOP problem is very difficult to  figure out what should be done. \nThe problem here is something like this kind of problem!  Test and error better than nothing!\n```\n[\"SnapshotArray\",\"set\",\"snap\",\"snap\",\"snap\",\"get\",\"snap\",\"snap\",\"get\"]\n[[1],[0,15],[],[],[],[0,2],[],[],[0,0]]\n```",
      "voteCount": 8
    },
    {
      "name": "oneupwallstreet",
      "year": 2023,
      "content": "Painfully solved it using LinkedList but got TLE, still happy that it worked lol ",
      "voteCount": 5
    }
  ]
}
