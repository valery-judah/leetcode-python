{
  "category": "",
  "id": "707",
  "name": "Design Linked List",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/design-linked-list/",
  "slug": "design-linked-list",
  "isPaidOnly": false,
  "tags": [
    "Linked List",
    "Design"
  ],
  "similar_questions": [
    {
      "title": "Design Skiplist",
      "difficulty": "Hard",
      "slug": "design-skiplist"
    }
  ],
  "questionId": "838",
  "questionFrontendId": "707",
  "title": "Design Linked List",
  "titleSlug": "design-linked-list",
  "content": "<p>Design your implementation of the linked list. You can choose to use a singly or doubly linked list.<br />\nA node in a singly linked list should have two attributes: <code>val</code> and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code> is a pointer/reference to the next node.<br />\nIf you want to use the doubly linked list, you will need one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are <strong>0-indexed</strong>.</p>\n\n<p>Implement the <code>MyLinkedList</code> class:</p>\n\n<ul>\n\t<li><code>MyLinkedList()</code> Initializes the <code>MyLinkedList</code> object.</li>\n\t<li><code>int get(int index)</code> Get the value of the <code>index<sup>th</sup></code> node in the linked list. If the index is invalid, return <code>-1</code>.</li>\n\t<li><code>void addAtHead(int val)</code> Add a node of value <code>val</code> before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li>\n\t<li><code>void addAtTail(int val)</code> Append a node of value <code>val</code> as the last element of the linked list.</li>\n\t<li><code>void addAtIndex(int index, int val)</code> Add a node of value <code>val</code> before the <code>index<sup>th</sup></code> node in the linked list. If <code>index</code> equals the length of the linked list, the node will be appended to the end of the linked list. If <code>index</code> is greater than the length, the node <strong>will not be inserted</strong>.</li>\n\t<li><code>void deleteAtIndex(int index)</code> Delete the <code>index<sup>th</sup></code> node in the linked list, if the index is valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]\n[[], [1], [3], [1, 2], [1], [1], [1]]\n<strong>Output</strong>\n[null, null, null, null, 2, null, 3]\n\n<strong>Explanation</strong>\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1-&gt;2-&gt;3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1-&gt;3\nmyLinkedList.get(1);              // return 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= index, val &lt;= 1000</code></li>\n\t<li>Please do not use the built-in LinkedList library.</li>\n\t<li>At most <code>2000</code> calls will be made to <code>get</code>, <code>addAtHead</code>, <code>addAtTail</code>, <code>addAtIndex</code> and <code>deleteAtIndex</code>.</li>\n</ul>\n",
  "likes": 2915,
  "dislikes": 1664,
  "stats": {
    "totalAccepted": "434.5K",
    "totalSubmission": "1.5M",
    "totalAcceptedRaw": 434531,
    "totalSubmissionRaw": 1482122,
    "acRate": "29.3%"
  },
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    },
    {
      "name": "Design",
      "slug": "design"
    }
  ],
  "metaData": {
    "classname": "MyLinkedList",
    "constructor": {
      "params": []
    },
    "methods": [
      {
        "params": [
          {
            "type": "integer",
            "name": "index"
          }
        ],
        "return": {
          "type": "integer"
        },
        "name": "get"
      },
      {
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "addAtHead"
      },
      {
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "addAtTail"
      },
      {
        "params": [
          {
            "type": "integer",
            "name": "index"
          },
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "addAtIndex"
      },
      {
        "params": [
          {
            "type": "integer",
            "name": "index"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "deleteAtIndex"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true
  },
  "discussion_posts": [
    {
      "name": "greenleafs",
      "year": 2020,
      "content": "what is this garbage?\\ninput: [\"MyLinkedList\",\"addAtHead\",\"addAtTail\",\"addAtTail\",\"get\",\"get\",\"addAtTail\",\"addAtIndex\",\"addAtHead\",\"addAtHead\",\"addAtTail\",\"addAtTail\",\"addAtTail\",\"addAtTail\",\"get\",\"addAtHead\",\"addAtHead\",\"addAtIndex\",\"addAtIndex\",\"addAtHead\",\"addAtTail\",\"deleteAtIndex\",\"addAtHead\",\"addAtHead\",\"addAtIndex\",\"addAtTail\",\"get\",\"addAtIndex\",\"addAtTail\",\"addAtHead\",\"addAtHead\",\"addAtIndex\",\"addAtTail\",\"addAtHead\",\"addAtHead\",\"get\",\"deleteAtIndex\",\"addAtTail\",\"addAtTail\",\"addAtHead\",\"addAtTail\",\"get\",\"deleteAtIndex\",\"addAtTail\",\"addAtHead\",\"addAtTail\",\"deleteAtIndex\",\"addAtTail\",\"deleteAtIndex\",\"addAtIndex\",\"deleteAtIndex\",\"addAtTail\",\"addAtHead\",\"addAtIndex\",\"addAtHead\",\"addAtHead\",\"get\",\"addAtHead\",\"get\",\"addAtHead\",\"deleteAtIndex\",\"get\",\"addAtHead\",\"addAtTail\",\"get\",\"addAtHead\",\"get\",\"addAtTail\",\"get\",\"addAtTail\",\"addAtHead\",\"addAtIndex\",\"addAtIndex\",\"addAtHead\",\"addAtHead\",\"deleteAtIndex\",\"get\",\"addAtHead\",\"addAtIndex\",\"addAtTail\",\"get\",\"addAtIndex\",\"get\",\"addAtIndex\",\"get\",\"addAtIndex\",\"addAtIndex\",\"addAtHead\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"get\",\"addAtHead\",\"addAtTail\",\"addAtTail\",\"addAtHead\",\"get\",\"addAtTail\",\"addAtHead\",\"addAtTail\",\"get\",\"addAtIndex\"]\\n[[],[84],[2],[39],[3],[1],[42],[1,80],[14],[1],[53],[98],[19],[12],[2],[16],[33],[4,17],[6,8],[37],[43],[11],[80],[31],[13,23],[17],[4],[10,0],[21],[73],[22],[24,37],[14],[97],[8],[6],[17],[50],[28],[76],[79],[18],[30],[5],[9],[83],[3],[40],[26],[20,90],[30],[40],[56],[15,23],[51],[21],[26],[83],[30],[12],[8],[4],[20],[45],[10],[56],[18],[33],[2],[70],[57],[31,24],[16,92],[40],[23],[26],[1],[92],[3,78],[42],[18],[39,9],[13],[33,17],[51],[18,95],[18,33],[80],[21],[7],[17,46],[33],[60],[26],[4],[9],[45],[38],[95],[78],[54],[42,86]]\\n\\nexpected: \\n[null,null,null,null,-1,2,null,null,null,null,null,null,null,null,84,null,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,null,37,null,null,null,null,null,23,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19,null,17,null,null,56,null,null,31,null,17,null,12,null,null,null,null,null,null,null,40,null,null,null,37,null,76,null,-1,null,null,null,null,null,null,80,null,null,null,null,43,null,null,null,-1,null]\\n\\n\\noutput: \\n\\n[null,null,null,null,-1,2,null,null,null,null,null,null,null,null,84,null,null,null,null,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,null,37,null,null,null,null,null,23,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19,null,17,null,null,56,null,null,31,null,17,null,12,null,null,null,null,null,null,null,40,null,null,null,37,null,76,null,42,null,null,null,null,null,null,80,null,null,null,null,43,null,null,null,40,null]\\n\\ntwo values in my output are wrong and you expect me to sit here and parse through this garbage? what a joke, I want to get better at data structures and algorithms but test cases like this are absolute garbage and you should feel bad about it.",
      "voteCount": 100
    },
    {
      "name": "vzh",
      "year": 2019,
      "content": "In order to pass test case(s) that require the solution to process values at negative indicies:\\n* on Get - treat negaive index as zero if node list is empty\\n* on AddAtIndex - insert element at index zero",
      "voteCount": 30
    },
    {
      "name": "LF-SH",
      "year": 2019,
      "content": "When you insert with `index < 0`, test case will just treat as insert at `index = 0`. \\nThis is not specified in the comment.",
      "voteCount": 26
    },
    {
      "name": "greenleafs",
      "year": 2020,
      "content": "[\"MyLinkedList\",\"addAtHead\",\"get\",\"addAtTail\",\"deleteAtIndex\",\"get\",\"addAtTail\",\"get\",\"deleteAtIndex\",\"addAtHead\",\"addAtHead\",\"addAtHead\",\"addAtHead\",\"addAtTail\",\"addAtTail\",\"addAtTail\",\"deleteAtIndex\",\"addAtIndex\",\"addAtHead\",\"addAtIndex\",\"addAtTail\",\"addAtHead\",\"get\",\"addAtHead\",\"addAtTail\",\"addAtHead\",\"addAtHead\",\"get\",\"addAtHead\",\"addAtHead\",\"addAtTail\",\"addAtHead\",\"addAtTail\",\"addAtTail\",\"deleteAtIndex\",\"addAtTail\",\"deleteAtIndex\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"addAtHead\",\"addAtTail\",\"addAtHead\",\"deleteAtIndex\",\"deleteAtIndex\",\"addAtHead\",\"addAtTail\",\"addAtTail\",\"addAtHead\",\"addAtHead\",\"get\",\"deleteAtIndex\",\"addAtHead\",\"addAtTail\",\"deleteAtIndex\",\"addAtTail\",\"addAtTail\",\"addAtTail\",\"addAtIndex\",\"addAtIndex\",\"get\",\"addAtTail\",\"addAtTail\",\"addAtHead\",\"addAtTail\",\"addAtTail\",\"addAtHead\",\"get\",\"addAtTail\",\"get\",\"deleteAtIndex\",\"addAtHead\",\"addAtHead\",\"addAtHead\",\"addAtIndex\",\"addAtIndex\",\"deleteAtIndex\",\"get\",\"addAtTail\",\"addAtTail\",\"addAtHead\",\"get\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"deleteAtIndex\",\"addAtHead\",\"addAtHead\",\"addAtTail\",\"get\",\"deleteAtIndex\",\"addAtHead\",\"addAtTail\",\"addAtTail\",\"addAtHead\",\"addAtHead\",\"deleteAtIndex\",\"get\",\"addAtHead\",\"addAtTail\",\"addAtHead\",\"addAtTail\"]\\n[[],[24],[1],[18],[1],[1],[30],[2],[1],[3],[3],[33],[97],[43],[12],[10],[1],[1,56],[30],[8,83],[57],[74],[5],[98],[72],[34],[61],[6],[70],[24],[91],[99],[13],[10],[17],[84],[16],[73],[88],[4,19],[59],[41],[57],[10],[18],[2],[12],[25],[1],[77],[1],[7],[34],[87],[13],[4],[12],[11],[10,92],[21,55],[11],[38],[31],[45],[4],[21],[38],[4],[88],[12],[22],[40],[22],[23],[13,96],[24,50],[8],[14],[25],[53],[42],[6],[58],[55],[18,72],[13],[30],[97],[59],[47],[24],[37],[26],[31],[93],[66],[11],[43],[70],[36],[31],[28]]\\n\\nTheres your test case, something in there is wrong, good luck have fun! you guys cant format these test cases any better huh? cant make this any easier to read? best and brightest algorithmic thinkers and this is the best UI / UX you could come up with, hilarious.",
      "voteCount": 21
    },
    {
      "name": "willson2000",
      "year": 2023,
      "content": "So many \"good\" test cases.",
      "voteCount": 17
    },
    {
      "name": "robertzee",
      "year": 2018,
      "content": "It seems that there is a typo in test cases.",
      "voteCount": 14
    },
    {
      "name": "LeonMoreno",
      "year": 2023,
      "content": "Runtime improved from 60 ms to Runtime 39 ms if I don\\'t free memory, which is very bad practice.\\nIf you check with valgrind you will see many leaks, which is very risky and a very bad practice, as far as I understand.\\n\\nMy conclusion. Not only look at the Runtime, but also at memory leaks and bad programming practices. A leak is a potential bug.",
      "voteCount": 10
    },
    {
      "name": "kedarnayak1106",
      "year": 2023,
      "content": "Did anyone find issue with case 32 / 65?\n\nI got the output : [null,null,null,null,null,null,null,null,-1,null,null,null]\n\nbut expected is given as [null,null,null,null,null,null,null,null,4,null,null,null]\n\ninput: [\"MyLinkedList\",\"addAtHead\",\"addAtHead\",\"addAtHead\",\"addAtIndex\",\"deleteAtIndex\",\"addAtHead\",\"addAtTail\",\"get\",\"addAtHead\",\"addAtIndex\",\"addAtHead\"]\n\n[[],[7],[2],[1],[3,0],[2],[6],[4],[4],[4],[5,0],[6]]\n\nSo it should be\n\n7\n2->7\n1->2->7 \n1->2->7 as 0 cannot be added to index 3 as length is 3 and there is no index 3\n1->2 , 7 is deleted as the delete index is 2 which corresponds to 7\n6->1->2 \n6->1->2 ->4\nNext, it should return -1 for get(4) as the max index in the current linked list is 3. BUt the output given by leetcode is 4. How is this?\n\n4->6->1->2 ->4\n6-> 4->6->1->2 ->4\n\nI believe there is an error in thye test condition.",
      "voteCount": 9
    },
    {
      "name": "Teklemekuria",
      "year": 2023,
      "content": "Guys, do you think the out put suggested is valid?\n\nInput\n[\"MyLinkedList\",\"addAtHead\",\"addAtHead\",\"addAtHead\",\"addAtIndex\",\"deleteAtIndex\",\"addAtHead\",\"addAtTail\",\"get\",\"addAtHead\",\"addAtIndex\",\"addAtHead\"]\n\n[[],[7],[2],[1],[3,0],[2],[6],[4],[4],[4],[5,0],[6]]\n\nUse Testcase\nOutput\n[null,null,null,null,null,null,null,null,-1,null,null,null]\nExpected\n[null,null,null,null,null,null,null,null,4,null,null,null]\n",
      "voteCount": 9
    },
    {
      "name": "WilmerKrisp",
      "year": 2021,
      "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/9f48dcc1-885e-43a8-af86-2d20d37fa236_1638343601.3567674.png)\\n\\n![image](https://assets.leetcode.com/users/images/5e60ab37-4346-4fbb-8a9e-ea1cc22463ec_1638343606.5562923.png)\\n\\n\\n![image](https://assets.leetcode.com/users/images/a98d2868-08bc-4fe8-a915-cbfc68926d08_1638362991.1542804.png)\\n\\n\\n![image](https://assets.leetcode.com/users/images/548be6a6-c746-4e60-8418-918113811e6b_1638362998.7538996.png)\\n",
      "voteCount": 9
    }
  ]
}
