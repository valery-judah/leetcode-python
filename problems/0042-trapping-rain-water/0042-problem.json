{
  "category": "",
  "id": "42",
  "name": "Trapping Rain Water",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/trapping-rain-water/",
  "slug": "trapping-rain-water",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Two Pointers",
    "Dynamic Programming",
    "Stack",
    "Monotonic Stack"
  ],
  "similar_questions": [
    {
      "title": "Container With Most Water",
      "difficulty": "Medium",
      "slug": "container-with-most-water"
    },
    {
      "title": "Product of Array Except Self",
      "difficulty": "Medium",
      "slug": "product-of-array-except-self"
    },
    {
      "title": "Trapping Rain Water II",
      "difficulty": "Hard",
      "slug": "trapping-rain-water-ii"
    },
    {
      "title": "Pour Water",
      "difficulty": "Medium",
      "slug": "pour-water"
    },
    {
      "title": "Maximum Value of an Ordered Triplet II",
      "difficulty": "Medium",
      "slug": "maximum-value-of-an-ordered-triplet-ii"
    }
  ],
  "questionId": "42",
  "questionFrontendId": "42",
  "title": "Trapping Rain Water",
  "titleSlug": "trapping-rain-water",
  "content": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,2,0,3,2,5]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
  "likes": 34920,
  "dislikes": 633,
  "stats": {
    "totalAccepted": "3M",
    "totalSubmission": "4.6M",
    "totalAcceptedRaw": 3049020,
    "totalSubmissionRaw": 4636237,
    "acRate": "65.8%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Monotonic Stack",
      "slug": "monotonic-stack"
    }
  ],
  "metaData": {
    "name": "trap",
    "params": [
      {
        "name": "height",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "1": [
      {
        "taggedByAdmin": false,
        "name": "Goldman Sachs",
        "slug": "goldman-sachs",
        "timesEncountered": 64
      },
      {
        "taggedByAdmin": true,
        "name": "Amazon",
        "slug": "amazon",
        "timesEncountered": 58
      },
      {
        "taggedByAdmin": true,
        "name": "Google",
        "slug": "google",
        "timesEncountered": 36
      },
      {
        "taggedByAdmin": false,
        "name": "Meta",
        "slug": "facebook",
        "timesEncountered": 12
      },
      {
        "taggedByAdmin": false,
        "name": "Microsoft",
        "slug": "microsoft",
        "timesEncountered": 12
      },
      {
        "taggedByAdmin": true,
        "name": "Bloomberg",
        "slug": "bloomberg",
        "timesEncountered": 12
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "EricHKCA",
      "year": 2024,
      "content": "This is my first hard problem ever after 220 easy and medium.\\nI take a look of it and go for a shower.\\nthink of a solution, come out to code it in 5 mins, and it worked.\\n\\nTry taking a bath in your interviews.",
      "voteCount": 1767
    },
    {
      "name": "AdilARahman",
      "year": 2023,
      "content": "This question makes me wanna kiss a tree at 300kmph",
      "voteCount": 1767
    },
    {
      "name": "thewal",
      "year": 2021,
      "content": "Here we want to find trapping water \\n\\n=> left and right end there is no wall \\n=> at any point we store water is :\\n`water[i]= min (max_left_height,max_right_height)-arr[i];`\\n\\nto store left height and right max height any given point we can use two array.\\n\\nso space would be O(n) and time would be O(n) \\n\\nHappy Codding :) \\nUp vote if you like or down vote :)",
      "voteCount": 464
    },
    {
      "name": "rajat18078",
      "year": 2021,
      "content": "I was struggling with this problem for days. \\nI got a hint, that this question is based upon finding next greater element to right/left of ith position of array, now it looks damn easy 0.o",
      "voteCount": 305
    },
    {
      "name": "MajorMikeTango",
      "year": 2021,
      "content": "Got this follow up in the actual interview:\\n\\nSuppose a \\'0\\' in the input means that there is a leak at that position and the water can leak out. After the adjustment, that is, after the water levels have stabilized due to leaking, what is the answer? \\n\\nHow do we change our approach/what would be out ideal answer for this scenario? \\n\\nThanks in advance!",
      "voteCount": 172
    },
    {
      "name": "kingofrow",
      "year": 2023,
      "content": " the problem can be solved by calculating the maximum height of walls to the left and right of each element. Then, the amount of water that can be trapped at each element is equal to the minimum of the maximum heights of the walls to the left and right minus the height of the element itself. Finally, the total amount of trapped water is the sum of the water trapped at each individual element.",
      "voteCount": 142
    },
    {
      "name": "aryanvijay",
      "year": 2023,
      "content": "really simple concept wise but hard to imagine this problem",
      "voteCount": 113
    },
    {
      "name": "mstuebs",
      "year": 2024,
      "content": "I hope these testcases help you in validating your solution.\n```\n[11,679]\n[766,576,765]\n[50,51,52,53,54,55,58,59,60,62,63,66,67,68,69,70,71,73,74,77,80,82,83,84,86,89,90,92,94,97,100,103,104,107,108,109,110,112,113,114,115,118,121,124,127,128,131,134,135,137,138,139,140,141,142,144,146,147,148,149,152,153,155,156,157,159,160,161,163,165,167,170,173,176,177,179,180,182,184,185,186,188,190,192,193,195,196,199,201,202,203,204,206,208,210,213,216,217,218,220,222]\n[396,392,392,388,385,383,380,378,374,372,372,372,370,367,365,363,359,355,353,352,350,347,346,345,341,338,336,336,332,330,326,324,321,318,317,316,316,314,314,312,312,309,307,307,304,302,302,302,300,299,297,296,294,293,290,286,283,281,278,276,274,274,273,273,271,271,269,268,264,260,260,256,255,254,252,250,249,246,244,240,238,238,236,233,229,229,228,226,225,224,221,219,219,218,217,216,213,210,209,205]\n[968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582,968,582]\n[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15]\n[1439,1438,1434,1429,1425,1421,1416,1413,1410,1405,1403,1394,1392,1391,1388,1384,1374,1367,1362,1360,1359,1349,1340,1330,1324,1316,1309,1305,1297,1288,1282,1279,1279,1273,1267,1265,1260,1255,1252,1251,1244,1239,1234,1225,1222,1213,1204,1204,1202,1199,1194,1194,1184,1175,1171,1168,1165,1164,1164,1160,1151,1148,1146,1141,1133,1132,1122,1115,1105,1099,1097,1087,1081,1080,1075,1073,1069,1067,1064,1059,1056,1051,1051,1051,1051,1044,1034,1026,1026,1018,1014,1014,1009,999,989,979,978,969,959,950,960,962,972,975,977,979,979,980,989,998,1004,1006,1008,1010,1015,1025,1030,1030,1038,1038,1041,1041,1041,1041,1042,1044,1047,1047,1048,1049,1051,1058,1064,1073,1076,1076,1078,1081,1085,1090,1091,1092,1098,1104,1112,1116,1119,1129,1134,1141,1144,1146,1156,1161,1164,1169,1175,1185,1193,1199,1207,1216,1219,1226,1234,1243,1253,1256,1266,1269,1270,1280,1280,1288,1291,1298,1303,1313,1318,1325,1325,1331,1335,1339,1346,1347,1351,1351,1353,1361,1370,1374,1380,1389,1394,1397,1403,1413,1419,1426]\n[455,304,452,307,450,311,448,313,446,315,443,319,441,321,439,324,436,326,433,329,430,332,428,334,425,337,423,341,421,343,419,348,417,351,414,354,411,359,408,361,405,366,403,368,400,372,398,374,395,376,392,381,390,385,387,390,384,394,382,398,379,403,377,407,374,411,372,414,370,417,368,422,366,425,364,427,361,430,358,433,355,435,353,440,351,444,349,449,346,451,343,455,341,459,339,462,337,464,334,466,332,470,329,475,327,477,324,482,321,486,319,490,316,494,314,499,311,502,308,506,306,511,303,514,301,517,299,522,297,527,294,532,291,536,288,538,285,542,283,546,281,548,278,552,276,556,274,559,272,562,269,565,266,568,263,573,260,575,258,580,255,582,252,587,250,592,248,597,246,599,244,602,242,605,239,610,236,613,234,615,232,620,229,622,227,624,224,628,222,631,220,634,217,639,214,642,211,646,208,649]\n[163,966,482,343,494,116,744,724,879,181,760,712,741,585,661,10,743,362,829,922,662,808,947,405,498,415,434,796,601,783,708,980,38,621,377,294,195,506,511,795,520,918,511,896,938,774,521,79,390,205,246,809,721,313,736,192,585,990,887,198,282,159,73,603,380,97,539,254,537,985,246,455,808,258,985,872,902,747,556,265,793,151,933,253,958,992,383,729,809,265,592,92,400,806,746,360,751,257,601,12,279,751,459,131,484,246,285,583,721,80,601,102,379,275,91,837,248,326,195,977,251,61,196,436,526,65,199,900,894,346,359,607,183,217,933,700,708,226,225,442,804,870,92,732,787,513,552,357,181,690,66,695,545,735,299,264,378,592,512,825,182,372,406,20,424,60,187,46,512,404,480,49,896,675,709,217,950,155,645,691,277,361,868,212,346,84,844,923,819,416,433,134,250,912,659,891,514,51,30,359,683,806,95,67,799,565,412,792,834,223,918,611,872,184,938,76,621,799,977,651,738,196,153,723,161,886,202,700,223,939,601,459,132,116,437,998,811,77,305,166,747,490,730,468,153,987,906,77,890,66,899,474,249,702,420,433,432,15,780,768,110,621,668,703,492,168,317,365,243,422,759,122,171,728,109,397,772,651,452,779,750,278,648,810,650,942,639,376,291,38,671,959,727,544,365,763,501,593,395,28,665,819,7,255,795,571,474,351,386,684,177,360,138,8,440,122,48,312,344,10,686,69,443,975,943,247,719,771,40,955,868,227,214,56,617,622,251,544,197,733,404,182,588,708,635,306,948,601,699,261,858,6,274,767,908,58,700,597,585,663,606,827,187,686,34,35,752,265,72,755,85,941,89,942,376,820,30,845,753,695,70,594,31,254,622,294,208,1000,53,949,214,740,27,513,362,632,267,380,940,137,542,482,205,941,881,21,616,370,283,399,889,480,420,477,287,401,793,385,908,916,494,317,675,772,558,216,947,73,82,685,143,24,640,22,460,158,220,138,389,596,152,499,297,652,469,529,278,999,678,498,22,908,557,607,29,367,446,372,675,405,110,506,649,57,139,102,427,911,924,292,382,870,649,465,27,821,647,992,578,423,25,632,532,450,570,799,496,743,944,625,206,308,560,50,230,483,794,40,715,4,572,278,110,113,85,0,424,5,164,274,600,293,48,744,981,716,318,162,149,452,942,800,983,928,494,837,961,375,216,582,930,534,853,537,860,726,154,528,24,951,946,284,100,873,766,382,117,297,934,11,820,480,145,622,518,280,55,446,890,749,541,888,538,208,586,261,590,503,792,10,636,815,389,608,65,761,447,122,672,471,164,816,62,543,610,322,859,760,763,499,749,158,467,296,96,294,109,823,166,447,647,208,679,373,845,313,517,572,880,656,945,709,509,504,553,757,287,151,883,95,774,922,572,90,803,344,335,706,479,989,238,321,71,888,98,834,126,569,424,729,537,609,893,760,838,28,722,57,369,610,787,883,712,135,862,845,747,391,309,850,684,83,430,920,658,745,940,62,943,74,381,978,682,23,889,770,72,123,197,674,744,703,66,85,16,240,190,790,292,895,263,656,426,334,569,731,152,556,707,95,403,660,269,67,388,933,147,64,533,950,920,459,643,170,388,892,454,808,354,632,135,684,787,837,644,845,617,152,59,610,24,30,46,879,937,12,177,805,585,609,146,425,937,594,38,528,830,434,504,153,382,765,13,986,566,150,153,654,248,537,263,765,456,730,952,579,941,429,171,988,165,921,993,108,884,893,365,153,762,971,439,518,988,13,965,377,170,648,498,679,415,202,201,161,886,242,578,516,246,643,157,156,990,560,772,451,149,516,663,131,884,119,76,682,30,206,425,801,442,885,762,200,826,255,690,81,24,207,902,959,303,151,791,392,568,573,375,312,805,699,580,410,864,153,324,691,449,494,440,245,551,821,602,115,508,587,455,173,687,975,747,642,663,698,994,249,576,566,940,247,312,510,833,332,659,323,864,969,732,219,645,41,607,847,151,176,341,768,83,826,196,204,459,424,238,990,136,89,846,775,831,396,763,975,630,983,566,868,527,426,354,289,500,477,34,604,767,267,474,188,880,479,937,247,356,191,94,139,41,590,529,986,445,57,263,834,111,723,238,745,454,682,103,20,381,745,59,341,534,496,521,27,942,205,300,570,301,320,238,333,661,354,868,837,40,597,809,195,557,926,683,579,318,888,248,589,537,229,489,390,651,423,368,805,4,271,712,575,427,561,533,429,468,707,463,29,389,543,167,884,667,708,705,400,909,928,913,111,494,410,146,697,971,457,872,459,440,648,508,872,86,350,642,666,519,564,522,861,2,180,488,566,415,551,713,110,504,733,869,987,780,581,671,496,266,348,868,722,388,773,958,120,964,302,19,312,339,407,135,844,611,342,12,266,577,204,850,3,242,273,104,114,963,498,384,170,677,886,264,307,147,406,791,381,213,519,776,760,678,578,671,255,250,824,73,539,162,171,643,795,60,80,497,373,463,371,934,873,264,666,613,178,448,316,918,408,320,872,559,463,944,891,587,357,355,430,397,333,458,570,647,958,249,980,903,123,69,635,235,968,191,859,77,379,523,514,840,405,563,999,716,339,411,948,212,790,227,594,956,443,869,520,731,819,70,799,529,930,519,623,269,382,674,724,154,928,745,408,387,629,278,147,252,964,257,418,934,907,447,650,382,112,542,740,512,775,979,287,562,756,460,545,91,277,715,919,166,24,769,610,705,623,861,54,614,443,861,950,542,167,750,837,727,316,757,474,813,458,37,155,35,831,933,678,83,915,0,371,418,415,293,110,438,428,987,778,668,893,798,238,881,72,778,152,659,525,583,814,479,905,946,363,609,343,212,793,563,316,525,830,682,116,952,697,445,931,465,906,956,883,726,356,142,951,1,752,977,21,602,307,641,34,198,212,198,21,964,791,100,243,45,352,54,564,88,605,659,688,278,910,423,418,912,686,144,812,325,864,122,273,654,200,964,896,281,841,89,583,601,552,156,848,637,719,85,357,617,489,707,583,916,485,306,121,355,758,512,209,922,887,210,894,848,775,7,687,518,59,997,123,403,362,632,373,939,523,964,415,868,863,315,924,709,777,709,568,501,793,256,861,447,694,911,16,479,187,581,226,36,255,563,457,477,874,231,339,947,573,192,414,336,227,336,473,556,83,740,359,345,420,742,218,674,196,715,557,615,328,102,323,930,6,770,58,715,991,885,476,435,910,24,283,75,38,813,497,111,710,904,266,520,547,462,562,421,294,958,808,66,497,34,321,412,3,926,852,746,259,370,482,800,342,135,113,523,336,779,163,918,242,553,768,978,878,913,25,405,971,172,365,883,817,290,272,361,897,90,126,103,679,111,78,198,85,480,129,465,796,237,237,266,642,919,943,981,928,383,65,333,869,113,942,482,967,622,647,195,180,761,433,644,851,530,861,440,20,844,470,699,790,982,192,37,292,507,719,722,236,579,357,543,481,530,390,811,554,537,429,450,245,90,174,279,313,335,124,418,191,828,504,904,804,229,201,432,916,581,611,88,995,114,471,532,942,81,264,348,87,140,762,786,399,194,205,388,546,370,707,264,267,823,210,660,517,413,74,277,521,123,810,124,299,515,760,936,760,309,481,619,458,661,892,884,28,731,307,707,810,33,966,477,768,286,75,139,920,439,322,435,643,144,866,736,900,783,309,8,854,369,681,490,113,924,974,229,198,60,768,758,432,873,562,675,321,514,811,895,402,795,427,154,556,139,917,420,457,521,331,939,657,604,163,98,644,293,63,321,925,410,247,216,831,556,291,510,333,405,210,101,154,802,342,669,170,583,264,973,34,601,935,844,483,717,104,458,537,785,204,601,271,632,905,904,322,878,466,797,920,392,868,511,450,711,563,257,826,909,354,289,663,327,794,943,779,314,867,94,679,895,662,708,718,654,895,941,27,220,370,154,537,50,2,480,948,585,730,136,213,192,103,756,964,7,17,170,637,736,777,174,981,988,464,619,821,734,290,686,567,647,478,601,221,823,979,300,510,418,849,149,248,998,738,471,861,387,465,367,147,861,100,464,168,246,77,39,841,875,624,142,374,424,915,157,328,540,733,420,110,877,166,511,546,890,72,984,923,98,898,841,893,576,269,918,972,774,130,159,924,875,94,429,97,522,861,366,514,477,901,228,666,86,444,623,979,768,948,762,550,610,48,197,669,202,595,925,845,956,645,890,274,3,113,702,974,902,233,428,152,988,705,660,853,784,825,570,247,777,1000,943,644,215,572,384,910,775,75,246,671,903,48,922,169,961,608,608,940,980,67,512,594,331,888,4,924,736,103,301,997,928,545,188,478,803,936,970,533,781,188,717,151,359,972,608,834,646,359,147,248,732,786,217,606,547,157,483,910,636,783,343,95,115,240,719,692,851,428,564,553,918,556,733,669,364,161,781,694,656,501,310,973,305,435,158,144,18,787,250,343,202,799,363,354,912,863,367,530,324,794,308,931,302,267,268,399,50,967,610,474,959,597,693,25,889,831,997,858,862,793,949,834,485,834,394,720,126,600,842,30,717,49,141,936,854,705,512,782,510,710,437,374,620,887,616,140,341,280,288,414,657,787,756,105,783,505,226,367,491,458,994,903,298,2,181,76,332,679,337,599,687,287,989,618,670,988,904,682,842,645,852,318,944,686,26,935,165,645,801,822,360,343,636,966,394,702,850,82,351,813,829,535,684,873,140,101,692,740,711,383,481,262,120,411,432,386,647,373,527,745,13,911,715,573,404,5,867,383,426,770,730,963,649,415,383,192,432,221,453,62,188,22,149,472,82,123,440,200,507,907,488,545,3,236,441,432,942,23,502,382,467,661,153,519,154,599,412,897,791,395,950,765,681,365,795,816,677,118,408,417,788,269,613,376,289,940,98,874,705,769,36,139,64,890,498,820,112,335,729,570,839,919,182,284,515,684,117,0,420,810,915,146,395,977,382,733,890,207,272,407,742,718,51,269,609,647,663,995,443,205,500,741,628,156,648,610,530,453,496,658,380,515,65,719,579,421,463,817,780,135,829,148,701,470,173,416,234,291,318,939,76,619,379,986,232,936,417,847,438,256,69,396,298,515,467,792,353,713,427,395,291,860,906,782,823,707,361,354,736,179,150,838,129,419,477,309,206,786,785,31,835,623,615,316,424,158,739,251,561,778,662,493,656,65,107,178,809,729,477,437,81,216,62,408,153,667,333,819,637,787,366,587,126,146,397,442,799,176,605,546,811,122,520,9,506,999,129,439,505,24,200,922,444,865,821,743,25,813,355,659,582,482,59,878,323,671,560,982,502,68,329,16,473,381,47,185,786,836,929,345,710,758,971,996,683,774,762,179,585,115,658,148,478,677,182,496,683,642,951,120,410,492,975,930,892,196,516,121,991,783,223,61,819,440,687,203,163,840,143,169,10,697,170,20,844,539,857,413,664,323,944,225,559,993,896,64,976,178,892,156,801,166,652,356,26,710,142,662,113,547,493,697,117,762,558,89,716,871,159,522,242,929,500,139,673,351,946,1000,475,462,249,568,575,499,36,396,443,558,966,115,103,598,813,346,331,489,679,845,461,118,58,80,952,280,442,232,251,388,811,0,814,155,613,850,877,480,800,512,615,878,162,206,187,1,813,252,616,879,274,754,265,619,320,123,962,153,171,528,968,421,540,58,773,833,451,82,597,328,169,89,301,523,250,209,908,33,869,622,827,225,22,640,593,859,958,986,251,576,858,45,987,705,806,683,201,955,31,147,976,919,832,545,400,375,880,704,129,667,905,575,840,917,890,377,25,794,502,995,200,343,437,450,699,225,836,79,946,396,278,969,425,20,959,670,92,431,908,455,137,254,241,147,299,133,354,498,64,900,256,308,640,178,28,128,177,216,154,660,813,533,769,967,740,88,418,514,9,43,885,412,290,413,636,686,250,277,601,132,397,626,247,967,93,441,829,55,334,131,671,414,885,270,937,26,566,893,943,993,321,95,844,981,347,600,806,366,35,978,406,921,666,146,400,700,653,104,521,25,320,545,537,627,241,591,318,463,566,362,295,275,401,919,380,591,938,195,240,892,597,169,267,247,494,858,458,672,336,720,453,7,653,356,378,622,420,621,214,770,372,219,100,327,703,856,111,761,690,201,38,653,435,35,890,186,593,304,738,266,877,424,35,765,588,356,211,308,473,505,133,931,569,857,149,444,38,576,653,289,260,699,563,520,655,482,529,92,430,899,212,515,480,206,258,364,594,397,107,250,1,436,156,794,349,767,925,881,10,983,772,798,917,25,796,96,171,17,445,702,769,364,228,693,753,813,424,153,972,579,607,17,893,966,7,614,151,871,876,282,185,595,73,306,199,734,983,556,369,784,285,833,725,135,921,341,739,620,467,404,690,452,835,273,463,393,816,364,165,138,727,756,40,376,685,644,899,408,708,620,159,740,177,921,480,474,971,364,486,22,257,829,495,733,742,401,219,590,945,158,868,198,717,447,42,85,7,242,523,339,47,850,717,117,752,114,429,741,493,953,88,493,559,406,12,583,803,432,1000,137,233,445,71,672,414,502,223,876,29,862,776,617,644,280,64,760,323,794,713,480,365,483,249,234,63,83,237,917,236,879,553,145,580,732,101,825,679,219,805,339,967,718,37,659,385,455,177,372,211,134,659,220,326,811,64,843,469,651,136,413,355,686,6,844,94,872,210,594,491,1000,446,872,496,518,961,98,662,239,930,658,922,879,564,689,462,301,749,485,539,681,793,779,467,85,651,61,31,682,919,791,463,869,443,440,55,924,755,315,792,463,143,436,754,299,820,726,577,281,548,783,874,747,792,566,847,323,559,66,922,139,739,741,382,166,34,792,662,961,446,418,425,513,939,101,738,791,852,243,492,684,91,374,531,484,704,828,234,428,812,982,67,859,431,219,270,679,960,664,901,467,752,737,555,842,887,466,100,0,141,639,401,574,216,129,980,401,318,461,955,650,541,634,768,544,611,764,361,158,750,981,715,717,53,409,83,138,774,139,387,972,260,380,110,336,423,963,37,726,733,337,730,928,833,142,441,768,120,581,354,463,345,363,931,335,781,226,616,881,632,608,615,213,737,361,578,669,836,875,312,89,900,739,628,621,336,847,351,341,35,209,129,635,544,480,509,9,543,271,685,359,939,814,335,919,745,126,483,7,876,462,209,594,29,609,263,212,740,614,642,786,452,433,769,543,600,993,975,235,962,257,107,668,79,300,250,473,66,318,674,812,676,487,469,213,249,899,536,146,78,561,791,229,962,775,259,788,349,495,626,807,45,792,757,415,308,217,35,13,180,125,232,500,578,730,898,520,736,945,479,8,812,394,935,482,364,182,814,583,147,332,812,381,907,702,0,642,913,707,467,339,428,326,974,570,25,917,563,121,23,731,746,860,756,77,881,953,440,225,784,723,997,395,131,187,54,853,584,66,859,172,263,816,148,811,310,983,872,781,290,822,943,32,687,775,156,983,714,392,140,284,671,645,767,349,48,852,829,558,987,594,250,313,425,51,687,55,796,728,114,997,758,572,212,394,406,182,489,562,931,15,905,431,184,951,105,585,942,328,968,716,38,648,411,630,518,272,220,104,433,860,173,143,606,118,72,262,806,261,69,838,840,120,307,584,92,430,349,558,530,690,296,257,951,457,665,401,472,805,614,181,783,360,498,900,464,791,143,184,439,543,78,179,110,63,39,874,355,344,450,851,583,617,694,290,290,477,600,109,218,803,639,240,746,796,103,266,334,912,656,682,136,478,473,800,417,712,86,579,323,996,966,665,215,294,645,54,901,813,155,956,600,946,599,365,530,23,297,382,534,397,254,176,174,392,879,213,787,346,518,7,468,171,597,151,587,273,542,472,369,478,392,804,103,245,533,179,171,549,391,222,97,911,948,971,748,940,999,830,369,850,252,936,163,145,324,936,423,148,153,710,222,540,378,365,974,931,347,451,688,812,39,231,610,510,159,499,277,468,15,388,346,33,359,469,852,961,883,377,281,256,415,400,611,547,447,993,536,969,247,808,741,559,381,657,547,589,646,484,858,384,257,952,483,922,703,443,19,562,394,506,567,11,23,382,527,496,494,814,765,574,433,202,234,34,863,230,949,807,207,963,852,661,616,58,739,711,797,842,875,903,306,335,861,655,749,567,187,870,525,354,594,443,211,445,313,361,775,11,882,849,599,346,125,80,521,21,113,187,296,755,911,286,177,122,537,979,717,269,733,680,603,346,623,760,25,475,990,565,985,50,180,475,65,962,289,959,372,633,300,637,99,762,946,204,430,160,168,999,429,238,711,392,997,785,975,312,188,305,948,947,345,662,33,277,158,815,648,117,568,800,27,712,346,741,896,196,387,86,216,439,260,417,255,222,419,53,130,459,195,106,515,966,607,142,372,79,404,750,708,880,320,978,169,80,262,822,555,527,957,585,626,570,684,515,246,954,506,677,955,96,356,299,967,706,202,444,108,655,563,980,579,747,97,973,82,222,562,928,549,907]\n```\nTLE Testcases: [42_Trapping_Rain_Water.txt](https://raw.githubusercontent.com/mquintus/l33tcode-testcase-generator/main/generated/42_Trapping_Rain_Water.txt)\nSource Code: [Generator42.py](https://github.com/mquintus/l33tcode-testcase-generator/blob/main/source/Generator42.py)",
      "voteCount": 71
    },
    {
      "name": "DanielemZolfo",
      "year": 2024,
      "content": "I managed to make the function also draw the result lol\n\n\n\n                                   |\"\"\"|                    \n                                   |___|                    \n               |\"\"\"|~~~~~~~~~~~~~~~|\"\"\"||\"\"\"|~~~~~|\"\"\"|     \n               |___|               |___||___|     |___|     \n     |\"\"\"|~~~~~|\"\"\"||\"\"\"|~~~~~|\"\"\"||\"\"\"||\"\"\"||\"\"\"||\"\"\"||\"\"\"|\n     |___|     |___||___|     |___||___||___||___||___||___|\n",
      "voteCount": 58
    },
    {
      "name": "a_reddy_k",
      "year": 2023,
      "content": "the last test case is empty \\nso the time limit is exceeding \\n\\nplease check the last test case.\\n\\n[leetcode](https://leetcode.com)",
      "voteCount": 45
    }
  ]
}
