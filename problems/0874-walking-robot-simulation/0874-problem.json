{
  "category": "",
  "id": "874",
  "name": "Walking Robot Simulation",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/walking-robot-simulation/",
  "slug": "walking-robot-simulation",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Hash Table",
    "Simulation"
  ],
  "similar_questions": [
    {
      "title": "Walking Robot Simulation II",
      "difficulty": "Medium",
      "slug": "walking-robot-simulation-ii"
    }
  ],
  "questionId": "906",
  "questionFrontendId": "874",
  "title": "Walking Robot Simulation",
  "titleSlug": "walking-robot-simulation",
  "content": "<p>A robot on an infinite XY-plane starts at point <code>(0, 0)</code> facing north. The robot receives an array of integers <code>commands</code>, which represents a sequence of moves that it needs to execute. There are only three possible types of instructions the robot can receive:</p>\n\n<ul>\n\t<li><code>-2</code>: Turn left <code>90</code> degrees.</li>\n\t<li><code>-1</code>: Turn right <code>90</code> degrees.</li>\n\t<li><code>1 &lt;= k &lt;= 9</code>: Move forward <code>k</code> units, one unit at a time.</li>\n</ul>\n\n<p>Some of the grid squares are <code>obstacles</code>. The <code>i<sup>th</sup></code> obstacle is at grid point <code>obstacles[i] = (x<sub>i</sub>, y<sub>i</sub>)</code>. If the robot runs into an obstacle, it will stay in its current location (on the block adjacent to the obstacle) and move onto the next command.</p>\n\n<p>Return the <strong>maximum squared Euclidean distance</strong> that the robot reaches at any point in its path (i.e. if the distance is <code>5</code>, return <code>25</code>).</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>There can be an obstacle at <code>(0, 0)</code>. If this happens, the robot will ignore the obstacle until it has moved off the origin. However, it will be unable to return to <code>(0, 0)</code> due to the obstacle.</li>\n\t<li>North means +Y direction.</li>\n\t<li>East means +X direction.</li>\n\t<li>South means -Y direction.</li>\n\t<li>West means -X direction.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">commands = [4,-1,3], obstacles = []</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">25</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The robot starts at <code>(0, 0)</code>:</p>\n\n<ol>\n\t<li>Move north 4 units to <code>(0, 4)</code>.</li>\n\t<li>Turn right.</li>\n\t<li>Move east 3 units to <code>(3, 4)</code>.</li>\n</ol>\n\n<p>The furthest point the robot ever gets from the origin is <code>(3, 4)</code>, which squared is <code>3<sup>2</sup> + 4<sup>2 </sup>= 25</code> units away.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">commands = [4,-1,4,-2,4], obstacles = [[2,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">65</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The robot starts at <code>(0, 0)</code>:</p>\n\n<ol>\n\t<li>Move north 4 units to <code>(0, 4)</code>.</li>\n\t<li>Turn right.</li>\n\t<li>Move east 1 unit and get blocked by the obstacle at <code>(2, 4)</code>, robot is at <code>(1, 4)</code>.</li>\n\t<li>Turn left.</li>\n\t<li>Move north 4 units to <code>(1, 8)</code>.</li>\n</ol>\n\n<p>The furthest point the robot ever gets from the origin is <code>(1, 8)</code>, which squared is <code>1<sup>2</sup> + 8<sup>2</sup> = 65</code> units away.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">commands = [6,-1,-1,6], obstacles = [[0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">36</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The robot starts at <code>(0, 0)</code>:</p>\n\n<ol>\n\t<li>Move north 6 units to <code>(0, 6)</code>.</li>\n\t<li>Turn right.</li>\n\t<li>Turn right.</li>\n\t<li>Move south 5 units and get blocked by the obstacle at <code>(0,0)</code>, robot is at <code>(0, 1)</code>.</li>\n</ol>\n\n<p>The furthest point the robot ever gets from the origin is <code>(0, 6)</code>, which squared is <code>6<sup>2</sup> = 36</code> units away.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= commands.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>commands[i]</code> is either <code>-2</code>, <code>-1</code>, or an integer in the range <code>[1, 9]</code>.</li>\n\t<li><code>0 &lt;= obstacles.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-3 * 10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li>The answer is guaranteed to be less than <code>2<sup>31</sup></code>.</li>\n</ul>\n",
  "likes": 887,
  "dislikes": 200,
  "stats": {
    "totalAccepted": "164.8K",
    "totalSubmission": "282.5K",
    "totalAcceptedRaw": 164838,
    "totalSubmissionRaw": 282478,
    "acRate": "58.4%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Simulation",
      "slug": "simulation"
    }
  ],
  "metaData": {
    "name": "robotSim",
    "params": [
      {
        "name": "commands",
        "type": "integer[]"
      },
      {
        "name": "obstacles",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "company_tag_stats": {
    "2": [
      {
        "taggedByAdmin": false,
        "name": "Shopify",
        "slug": "shopify",
        "timesEncountered": 11
      }
    ]
  },
  "discussion_posts": [
    {
      "name": "dsapelnikov",
      "year": 2024,
      "content": "Why the hell the robot can start inside an obstacle?",
      "voteCount": 251
    },
    {
      "name": "sarpalmadhav",
      "year": 2024,
      "content": "Uff, Could have explained more clearly that Robot stops one step before the obstacle.",
      "voteCount": 106
    },
    {
      "name": "varungopal4210",
      "year": 2024,
      "content": "NOTE: IF THERE IS AN OBSTACLE AT [0,0] THEN IT DOES NOT MEAN THE ROBOT CANNOT MOVE ANYWHERE. IT MEANS IT SKIPS THE OBSTACLE WHEN IT LANDS ON IT BUT CONTINUES THE REST OF THE PROCESS LIKE THE SIMULATION. (SOMEONE NEEDS TO PUT THIS IN THE QUESTION)",
      "voteCount": 86
    },
    {
      "name": "adityakumar8068",
      "year": 2024,
      "content": "TESTCASES------------------>\n```\n[4,-1,3]\n[]\n[4,-1,4,-2,4]\n[[2,4]]\n[6,-1,-1,6]\n[]\n[1,2,-2,5,-1,-2,-1,8,3,-1,9,4,-2,3,2,4,3,9,2,-1,-1,-2,1,3,-2,4,1,4,-1,1,9,-1,-2,5,-1,5,5,-2,6,6,7,7,2,8,9,-1,7,4,6,9,9,9,-1,5,1,3,3,-1,5,9,7,4,8,-1,-2,1,3,2,9,3,-1,-2,8,8,7,5,-2,6,8,4,6,2,7,2,-1,7,-2,3,3,2,-2,6,9,8,1,-2,-1,1,4,7]\n[[-57,-58],[-72,91],[-55,35],[-20,29],[51,70],[-61,88],[-62,99],[52,17],[-75,-32],[91,-22],[54,33],[-45,-59],[47,-48],[53,-98],[-91,83],[81,12],[-34,-90],[-79,-82],[-15,-86],[-24,66],[-35,35],[3,31],[87,93],[2,-19],[87,-93],[24,-10],[84,-53],[86,87],[-88,-18],[-51,89],[96,66],[-77,-94],[-39,-1],[89,51],[-23,-72],[27,24],[53,-80],[52,-33],[32,4],[78,-55],[-25,18],[-23,47],[79,-5],[-23,-22],[14,-25],[-11,69],[63,36],[35,-99],[-24,82],[-29,-98],[-50,-70],[72,95],[80,80],[-68,-40],[65,70],[-92,78],[-45,-63],[1,34],[81,50],[14,91],[-77,-54],[13,-88],[24,37],[-12,59],[-48,-62],[57,-22],[-8,85],[48,71],[12,1],[-20,36],[-32,-14],[39,46],[-41,75],[13,-23],[98,10],[-88,64],[50,37],[-95,-32],[46,-91],[10,79],[-11,43],[-94,98],[79,42],[51,71],[4,-30],[2,74],[4,10],[61,98],[57,98],[46,43],[-16,72],[53,-69],[54,-96],[22,0],[-7,92],[-69,80],[68,-73],[-24,-92],[-21,82],[32,-1],[-6,16],[15,-29],[70,-66],[-85,80],[50,-3],[6,13],[-30,-98],[-30,59],[-67,40],[17,72],[79,82],[89,-100],[2,79],[-95,-46],[17,68],[-46,81],[-5,-57],[7,58],[-42,68],[19,-95],[-17,-76],[81,-86],[79,78],[-82,-67],[6,0],[35,-16],[98,83],[-81,100],[-11,46],[-21,-38],[-30,-41],[86,18],[-68,6],[80,75],[-96,-44],[-19,66],[21,84],[-56,-64],[39,-15],[0,45],[-81,-54],[-66,-93],[-4,2],[-42,-67],[-15,-33],[1,-32],[-74,-24],[7,18],[-62,84],[19,61],[39,79],[60,-98],[-76,45],[58,-98],[33,26],[-74,-95],[22,30],[-68,-62],[-59,4],[-62,35],[-78,80],[-82,54],[-42,81],[56,-15],[32,-19],[34,93],[57,-100],[-1,-87],[68,-26],[18,86],[-55,-19],[-68,-99],[-9,47],[24,94],[92,97],[5,67],[97,-71],[63,-57],[-52,-14],[-86,-78],[-17,92],[-61,-83],[-84,-10],[20,13],[-68,-47],[7,28],[66,89],[-41,-17],[-14,-46],[-72,-91],[4,52],[-17,-59],[-85,-46],[-94,-23],[-48,-3],[-64,-37],[2,26],[76,88],[-8,-46],[-19,-68]]\n[9,-1,9,-2,3]\n[[4,8], [5,6], [7,7], [8,4]]\n[1]\n[[2,2], [3,3]]\n[9,-1,9,9,-2,9,9,-1,9,9,-2,9,9,9,-1,9,9,-2,9,9,-1,-1,9,9]\n[[10,10], [5,5], [8,8], [15,15], [20,20]]\nn[]",
      "voteCount": 60
    },
    {
      "name": "BradV",
      "year": 2024,
      "content": "Clockwise rotation:\\n    dx, dy = dy, -dx\\nCounterclockwise rotation:\\n    dx, dy = -dy, dx",
      "voteCount": 50
    },
    {
      "name": "anwendeng",
      "year": 2024,
      "content": "Evil testcases. For C/C++ programmers, it\\'s suggested to use long long for hash table.\\nHave a nice day.",
      "voteCount": 36
    },
    {
      "name": "yeedaKing",
      "year": 2023,
      "content": "honestly not that difficult IMO. just follow the simulation and find max distance after each move",
      "voteCount": 31
    },
    {
      "name": "Garv_Virmani",
      "year": 2024,
      "content": "# Problem Overview\\nYou need to simulate a robot moving on a grid based on a set of commands. The robot can turn left or right or move forward, but must avoid obstacles on the grid. The goal is to find the maximum squared distance the robot achieves from its starting point.\\n\\nApproach\\nInitialize:\\n\\nStart at (0, 0), facing north.\\nUse direction vectors to handle movement: North (0,1), East (1,0), South (0,-1), West (-1,0).\\nProcess Commands:\\n\\n-2: Turn left (adjust direction index).\\n-1: Turn right (adjust direction index).\\nPositive integer k: Move forward k units. Stop if hitting an obstacle.\\nCheck Obstacles:\\n\\nUse a set for quick lookup of obstacles.\\nUpdate position and compute squared distance if no obstacle is encountered.\\nTrack Maximum Distance:\\n\\nKeep track of the maximum squared Euclidean distance from the origin.",
      "voteCount": 22
    },
    {
      "name": "thomasgainant",
      "year": 2020,
      "content": "Vector arithmetics and trigonometry in an \"easy\" exercice? Is this some sort of joke? I wanted to solve a small thing in front of my coffee, not program a whole 2d simulation",
      "voteCount": 12
    },
    {
      "name": "amsukdu",
      "year": 2018,
      "content": "It was maximum guys.................................................................................. good lord.\\nI\\'m pretty sure there is not much of algorithmic thinking in finding MAX value.\\n\\nI mean WHY?",
      "voteCount": 12
    }
  ]
}
