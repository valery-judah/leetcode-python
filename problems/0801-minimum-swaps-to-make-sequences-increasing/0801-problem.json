{
  "category": "",
  "id": "801",
  "name": "Minimum Swaps To Make Sequences Increasing",
  "difficulty": "Hard",
  "leetcode_url": "https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/",
  "slug": "minimum-swaps-to-make-sequences-increasing",
  "isPaidOnly": false,
  "tags": [
    "Array",
    "Dynamic Programming"
  ],
  "similar_questions": [
    {
      "title": "Minimum Operations to Make the Array K-Increasing",
      "difficulty": "Hard",
      "slug": "minimum-operations-to-make-the-array-k-increasing"
    },
    {
      "title": "Minimum Operations to Maximize Last Elements in Arrays",
      "difficulty": "Medium",
      "slug": "minimum-operations-to-maximize-last-elements-in-arrays"
    }
  ],
  "questionId": "819",
  "questionFrontendId": "801",
  "title": "Minimum Swaps To Make Sequences Increasing",
  "titleSlug": "minimum-swaps-to-make-sequences-increasing",
  "content": "<p>You are given two integer arrays of the same length <code>nums1</code> and <code>nums2</code>. In one operation, you are allowed to swap <code>nums1[i]</code> with <code>nums2[i]</code>.</p>\n\n<ul>\n\t<li>For example, if <code>nums1 = [1,2,3,<u>8</u>]</code>, and <code>nums2 = [5,6,7,<u>4</u>]</code>, you can swap the element at <code>i = 3</code> to obtain <code>nums1 = [1,2,3,4]</code> and <code>nums2 = [5,6,7,8]</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of needed operations to make </em><code>nums1</code><em> and </em><code>nums2</code><em> <strong>strictly increasing</strong></em>. The test cases are generated so that the given input always makes it possible.</p>\n\n<p>An array <code>arr</code> is <strong>strictly increasing</strong> if and only if <code>arr[0] &lt; arr[1] &lt; arr[2] &lt; ... &lt; arr[arr.length - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3,5,4], nums2 = [1,2,3,7]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums1.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums2.length == nums1.length</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 2 * 10<sup>5</sup></code></li>\n</ul>\n",
  "likes": 2912,
  "dislikes": 138,
  "stats": {
    "totalAccepted": "92.8K",
    "totalSubmission": "226.4K",
    "totalAcceptedRaw": 92773,
    "totalSubmissionRaw": 226391,
    "acRate": "41.0%"
  },
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    }
  ],
  "metaData": {
    "name": "minSwap",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  },
  "discussion_posts": [
    {
      "name": "prabhakar_jha",
      "year": 2024,
      "content": "When I read the title and saw the problem categorised as \\'Hard,\\' I initially felt low on confidence. However, as I read the description, I realised it\\'s not that hard after all. All I can say is that this is a simple DP problem\\n\\nJust try to solve it; you can do it!",
      "voteCount": 13
    },
    {
      "name": "Archanam",
      "year": 2018,
      "content": "for test case with input \\n[0,7,8,10,10,11,12,13,19,18]\\n[4,4,5,7,11,14,15,16,17,20]\\nexpected output is 4 but swapping 2,3,4 elements would give strictly increasing sequence. Anyone please explain where I am wrong or why the expected output is 4.",
      "voteCount": 9
    },
    {
      "name": "Aradhya_soni",
      "year": 2024,
      "content": "i don\\'t know why but after seeing this question not any dp approach coming in my mind...seriously i am blank.\\n",
      "voteCount": 4
    },
    {
      "name": "kaynaat007",
      "year": 2020,
      "content": "Hi,\\n\\nI am having trouble to exactly see where \"minimum\" swaps is coming from. I need to see a few more  examples. \\nUnfortunately, they have just 1 example and that too just requires 1 swap. \\nCan\\'t really conclude anything from that. \\n\\n",
      "voteCount": 4
    },
    {
      "name": "the_vishaal26",
      "year": 2025,
      "content": "\\uD83D\\uDCA1 Hint:\\nAt every index i, you have two choices:\\n\\nEither swap nums1[i] and nums2[i]\\n\\nOr keep them as they are\\n\\nBut you can only make that choice if doing so keeps both arrays strictly increasing.\\nTo make the best decision, think about how the decision at index i depends on what you did at index i - 1.\\n\\nYou might want to use dynamic programming where your state includes:\\n\\nThe current index\\n\\nWhether you swapped at the previous index\\n\\nTry exploring both valid options recursively and keeping track of the minimum swaps required.\\n\\n\\n",
      "voteCount": 1
    },
    {
      "name": "Adithya_U_Bhat",
      "year": 2025,
      "content": "this is also one of the good test case:\\n[9,1,2,3,4]\\n[0,10,11,12,13]",
      "voteCount": 1
    },
    {
      "name": "mobious",
      "year": 2025,
      "content": "Pretty straightforward DP problem. Don\\'t let the hard rating deter you.",
      "voteCount": 1
    },
    {
      "name": "ayaz18",
      "year": 2024,
      "content": "The input MUST be striclty increasing after applying some operations. \\nGetting invalid testcase for testcase nums1= [7,8,9,2] nums2=[1,2,3,7].\\nNo such constraint is mentioned in the constrained section.\\nANY IDEA?",
      "voteCount": 1
    },
    {
      "name": "Dhairya_Vardhan_Chauhan",
      "year": 2023,
      "content": "```\nclass Solution {\npublic:\n\nint solve(vector<int>&nums,vector<int>&nums2,int idx,bool swapped){\n        if(idx == nums.size()){\n            return 0;\n        }\n        // case1 not strictly inc. so perform swap\n        int prev1 = nums[idx-1];\n        int prev2 = nums2[idx-1];\n        int ans = 0;\n        if(swapped){\n            swap(prev1,prev2);\n        }\n\n        if(nums[idx]<=prev1 || nums2[idx]<=prev2){\n            ans +=  1 + solve(nums,nums2,idx+1,1);\n        }\n        else{\n            ans += min(solve(nums,nums2,idx+1,0),1 + solve(nums,nums2,idx+1,1));\n        }\n        return ans;\n    }\n\n    int minSwap(vector<int>& nums1, vector<int>& nums2) {\n        nums1.insert(nums1.begin(),-1);\n        nums2.insert(nums2.begin(),-1);\n        return solve(nums1,nums2,1,0);\n    }\n};\n```\n\ncan anyone find what is the problem in this code  you deserve an upvote",
      "voteCount": 1
    },
    {
      "name": "Daksh2456",
      "year": 2025,
      "content": "People saying it is at max a medium probelm but it took my 30 mins to write 2 wrong appraches and then when i saw the solution i still felt that the logic is not tricky the implementation of the solution is",
      "voteCount": 0
    }
  ]
}
