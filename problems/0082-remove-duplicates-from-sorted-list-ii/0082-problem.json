{
  "category": "",
  "id": "82",
  "name": "Remove Duplicates from Sorted List II",
  "difficulty": "Medium",
  "leetcode_url": "https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/",
  "slug": "remove-duplicates-from-sorted-list-ii",
  "isPaidOnly": false,
  "tags": [
    "Linked List",
    "Two Pointers"
  ],
  "similar_questions": [
    {
      "title": "Remove Duplicates from Sorted List",
      "difficulty": "Easy",
      "slug": "remove-duplicates-from-sorted-list"
    },
    {
      "title": "Remove Duplicates From an Unsorted Linked List",
      "difficulty": "Medium",
      "slug": "remove-duplicates-from-an-unsorted-linked-list"
    }
  ],
  "questionId": "82",
  "questionFrontendId": "82",
  "title": "Remove Duplicates from Sorted List II",
  "titleSlug": "remove-duplicates-from-sorted-list-ii",
  "content": "<p>Given the <code>head</code> of a sorted linked list, <em>delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,3,4,4,5]\n<strong>Output:</strong> [1,2,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg\" style=\"width: 500px; height: 205px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,1,2,3]\n<strong>Output:</strong> [2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>\n</ul>\n",
  "likes": 9401,
  "dislikes": 269,
  "stats": {
    "totalAccepted": "978.3K",
    "totalSubmission": "1.9M",
    "totalAcceptedRaw": 978312,
    "totalSubmissionRaw": 1939647,
    "acRate": "50.4%"
  },
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    }
  ],
  "metaData": {
    "name": "deleteDuplicates",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    }
  },
  "discussion_posts": [
    {
      "name": "AlecLC",
      "year": 2023,
      "content": "Am I the only one who stared at this for 5 minutes not understanding the difference between delete dupes 2 and delete dupes 1?",
      "voteCount": 105
    },
    {
      "name": "Ramonsan07",
      "year": 2023,
      "content": "I hate linked list problems and the tons of edge cases you find yourself into when you solve them",
      "voteCount": 93
    },
    {
      "name": "tanula",
      "year": 2023,
      "content": "description is poorly written. It should have said \"find the duplicates and remove them all from the original list\". ",
      "voteCount": 71
    },
    {
      "name": "Ajay_787",
      "year": 2024,
      "content": "Solved in 20 mins feeling proud, I love LL",
      "voteCount": 65
    },
    {
      "name": "BishalPoudel",
      "year": 2024,
      "content": "*** JUST IN CASE IF YOU WANT HINT ***\\n- Use two pointers, slow and fast.\\n- Initialize slow to head and fast to head.next\\n- Initialize another pointers, preSlow to null, we will need this to eliminate duplicate in between.\\n- if slow.val != fast.val, keep moving forward and keep tracking preslow while moving forward.\\n- If slow.val == fast.val, keep moving the fast pointer till we are finding the same value as slow.\\n- And then set preslow.next to fast. This eliminates the duplicates.\\n- And then set slow and fast for next iteration, for next iteration, They will be set as, slow=fast and fast=fast.next\\n- Make sure to handle null cases during the process.",
      "voteCount": 51
    },
    {
      "name": "vladiora",
      "year": 2024,
      "content": "Test cases that I found useful:\\n[]\\n[1,1]\\n[1,2,2]",
      "voteCount": 27
    },
    {
      "name": "huzaifac137",
      "year": 2024,
      "content": "Took me almost full day but I did it :(  Beats 100% , 81%.\nI hate linkedList",
      "voteCount": 11
    },
    {
      "name": "Vishesh2308",
      "year": 2020,
      "content": "https://youtu.be/j7W70djR5ow (clickable)",
      "voteCount": 11
    },
    {
      "name": "Tushar0903200",
      "year": 2024,
      "content": "Here my very bad intuition . Please don\\'t cuss me . I am new to linked List. We can use get the length of the Linked list . Then we create another function in which we create another array of size n(which is the size of linked list) and use HashMap to check frequency of the elements in the array . If the frequency of element is 1 . Modify the array . Then in main function . Just add the elements of array in linked list . \\nI know my solution is very bad but its my first intuition when i saw this question . ",
      "voteCount": 9
    },
    {
      "name": "sharqawycs",
      "year": 2025,
      "content": "Good test cases:\n ```\n[]\n[-3,-1,0,0,0,3,3]\n[1,1]\n[1,1,2]\n[1,1,2,2]\n[1,1,2,2,3]\n[1,2,3,3,4,4,5]\n[1,1,1,2,3]\n```",
      "voteCount": 8
    }
  ]
}
