

version: 1
track: track_8_dynamic_programming_i
title: Dynamic Programming I — 1D States, Rolling Arrays, Greedy vs DP
description: "Build core 1D DP skills: skip/take, linear scans, Kadane, LIS, subset/coin DPs, and basic string DPs."
problems:
  # Warm‑ups
  - slug: climbing-stairs
    title: Climbing Stairs
    difficulty: easy
    primary_pattern: dp-fibonacci
    section: warmups
    why: >
      Smallest DP. f[n]=f[n-1]+f[n-2]. Sets up base cases, transitions, and O(1) rolling state.

  # Linear skip/take
  - slug: house-robber
    title: House Robber
    difficulty: medium
    primary_pattern: dp-skip-take
    section: linear
    why: >
      Classic skip/take recurrence with rolling two states. Teaches state naming and overwrite order.
  - slug: house-robber-ii
    title: House Robber II
    difficulty: medium
    primary_pattern: dp-skip-take-circle
    section: linear
    why: >
      Circular constraint. Solve two lines (include/exclude first). Reinforces decomposition.

  # Subarray DPs
  - slug: maximum-subarray
    title: Maximum Subarray
    difficulty: medium
    primary_pattern: kadane
    section: subarray
    why: >
      Kadane: best ending here vs global best. Introduces local→global aggregation.
  - slug: maximum-product-subarray
    title: Maximum Product Subarray
    difficulty: medium
    primary_pattern: kadane-with-minmax
    section: subarray
    why: >
      Track max and min due to negatives. Sharpens multi-state updates.

  # Sequence DP
  - slug: longest-increasing-subsequence
    title: Longest Increasing Subsequence
    difficulty: medium
    primary_pattern: dp-patience-or-n2
    section: sequences
    why: >
      O(n log n) patience with tails or O(n^2) DP. Teaches choosing formulation by constraints.
  - slug: largest-divisible-subset
    title: Largest Divisible Subset
    difficulty: medium
    primary_pattern: dp-chain
    section: sequences
    why: >
      Sort then chain by divisibility. Practice parent pointers for reconstruction.

  # Knapsack family (1D)
  - slug: coin-change
    title: Coin Change
    difficulty: medium
    primary_pattern: unbounded-knapsack-min
    section: knapsack
    why: >
      Min coins for amount. Teaches sentinel initialization and iteration order.
  - slug: partition-equal-subset-sum
    title: Partition Equal Subset Sum
    difficulty: medium
    primary_pattern: subset-sum-0-1
    section: knapsack
    why: >
      0/1 subset sum to half total. Trains backward iteration and boolean DP.

  # String DP (1D)
  - slug: decode-ways
    title: Decode Ways
    difficulty: medium
    primary_pattern: dp-string-ways
    section: strings
    why: >
      dp[i]=ways up to i using 1‑ or 2‑digit decodes with zero rules. Indexing care and base cases.
  - slug: word-break
    title: Word Break
    difficulty: medium
    primary_pattern: dp-boolean-dictionary
    section: strings
    why: >
      Boolean reachability over prefixes with a dictionary set. Encourages pruning by max word length.

  # Counting sequences
  - slug: combination-sum-iv
    title: Combination Sum IV
    difficulty: medium
    primary_pattern: dp-order-sensitive-count
    section: counting
    why: >
      Order matters. Distinguish from 0/1 and combination counting. Good for reasoning about loops order.

notes:
  ordering: Warm‑ups → linear skip/take → subarray → sequences → knapsack → strings → counting.
  next_track: track_9_dynamic_programming_ii

extensions:
  optional:
    - slug: min-cost-climbing-stairs
      title: Min Cost Climbing Stairs
      difficulty: easy
      primary_pattern: dp-fibonacci-cost
      section: warmups
      why: >
        Same as 70 with costs. Clean practice for base initialization and rolling state.
    - slug: delete-and-earn
      title: Delete and Earn
      difficulty: medium
      primary_pattern: dp-skip-take-bucket
      section: linear
      why: >
        Bucket by value then apply House Robber on buckets. Shows problem reduction.
    - slug: coin-change-ii
      title: Coin Change II
      difficulty: medium
      primary_pattern: unbounded-knapsack-count
      section: knapsack
      why: >
        Count combinations where order does not matter. Emphasizes loop nesting (coins outer, amounts inner).
    - slug: perfect-squares
      title: Perfect Squares
      difficulty: medium
      primary_pattern: unbounded-knapsack-min
      section: knapsack
      why: >
        Like coin change over square numbers. Good for generating candidate set and pruning.
    - slug: target-sum
      title: Target Sum
      difficulty: medium
      primary_pattern: subset-sum-transform
      section: knapsack
      why: >
        Transform to subset sum over (S+sum)/2. Clarifies algebraic reductions to 0/1 knapsack.
    - slug: word-break-ii
      title: Word Break II
      difficulty: hard
      primary_pattern: dfs-with-memo
      section: strings
      why: >
        Enumerate all sentences with memoized DFS. Heavy but cements DP vs memo distinction.
    - slug: fibonacci-number
      title: Fibonacci Number
      difficulty: easy
      primary_pattern: dp-fibonacci
      section: warmups
      why: >
        Trivial, for speed reps or to demo top‑down vs bottom‑up equivalence.

omitted:
  from_neetcode_250:
    - id: 1143
      slug: longest-common-subsequence
      reason: >
        2D table DP. Scheduled for DP II to group with edit distance family.
    - id: 5
      slug: longest-palindromic-substring
      reason: >
        2D string DP or expand‑around‑center. Reserved for DP II to keep DP I 1D‑focused.
    - id: 647
      slug: palindromic-substrings
      reason: >
        2D DP/center expansion. Moved to DP II.
    - id: 62
      slug: unique-paths
      reason: >
        Grid 2D DP. In DP II with other grid tables.
    - id: 63
      slug: unique-paths-ii
      reason: >
        Grid with obstacles. DP II with 2D rolling arrays.
    - id: 64
      slug: minimum-path-sum
      reason: >
        Grid table DP. In DP II.
    - id: 120
      slug: triangle
      reason: >
        2D bottom‑up table or 1D roll. Grouped with DP II grid/triangle problems.
    - id: 221
      slug: maximal-square
      reason: >
        2D table with neighbor min+1 transition. DP II.
    - id: 55
      slug: jump-game
      reason: >
        Greedy invariant beats DP. Covered earlier; not part of DP I core.
    - id: 45
      slug: jump-game-ii
      reason: >
        Greedy BFS‑layer solution preferred. Kept outside DP I.
  from_leetcode_150:
    - id: 139
      slug: word-break
      reason: >
        Included in core.
    - id: 91
      slug: decode-ways
      reason: >
        Included in core.
    - id: 198
      slug: house-robber
      reason: >
        Included in core.
    - id: 213
      slug: house-robber-ii
      reason: >
        Included in core.
    - id: 62
      slug: unique-paths
      reason: >
        Deferred to DP II with 2D tables.
